<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Infragistics35.Excel.v8.2</name>
    </assembly>
    <members>
        <member name="T:Infragistics.Excel.NamedReferenceBase">
            <summary>
            Abstract base class for a named reference defined in the workbook.
            </summary>
        </member>
        <member name="P:Infragistics.Excel.NamedReferenceBase.Name">
            <summary>
            Gets or sets the name of the reference.
            </summary>
            <remarks>
            <p class="body">
            See the overview on <see cref="P:Infragistics.Excel.NamedReferenceBase.Scope"/> for details on how to access a named reference by name in formulas.
            </p>
            </remarks>
            <exception cref="T:System.ArgumentNullException">
            The value assigned is null or empty.
            </exception>
            <exception cref="T:System.ArgumentException">
            The value assigned is longer than 255 characters.
            </exception>
            <exception cref="T:System.ArgumentException">
            The value assigned is not a valid named reference. The name must begin with a letter, underscore (_), or a backslash (\).
            All other characters in the name must be letters, numbers, periods, underscores (_), or backslashes (\).
            The name cannot be a an A1 cell reference (1 to 3 letters followed by 1 to 6 numbers). In addition, the name
            cannot be 'r', 'R', 'c', or 'C' or start with a row or column reference in R1C1 cell reference mode 
            ('R' followed by 1 to 6 numbers or 'C' followed by 1 to 6 numbers).
            </exception>
            <exception cref="T:System.InvalidOperationException">
            The value assigned is the name of another named reference with the same Scope. 
            Names are compared case-insensitively.
            </exception>
            <value>The name of the reference.</value>
        </member>
        <member name="P:Infragistics.Excel.NamedReferenceBase.Scope">
            <summary>
            Gets the scope of the named reference.
            </summary>
            <remarks>
            <p class="body">
            This can either be the workbook which the named reference belongs to or one of the worksheets 
            in the workbook.
            </p>
            <p class="body">
            The scope determines how formulas need to preface a name in order to use the named reference.
            </p>
            <p class="body">
            If the scope is the workbook, formulas in any cell in the workbook can reference the named reference
            by specifying just the name or the workbook's file name, an exclamation point, and the name:
            <list type="bullet">
            <item>=MyWorkbookName</item>
            <item>='C:\MyWorkbook.xls'!MyWorkbookName</item>
            </list>
            When cells in other workbook's want to reference the named reference, they must use the second format
            by first specifying the file name when the workbook-scoped named reference exists.
            </p>
            <p class="body">
            If the scope is a worksheet, formulas in cells of the worksheet can reference the named reference
            by specifying just the name. In addition, they can fully qualify the named reference with the worksheet name
            and, optionally, the workbook file name:
            <list type="bullet">
            <item>=MyWorksheetName</item>
            <item>=Sheet1!MyWorksheetName</item>
            <item>='C:\[MyWorkbook.xls]Sheet1'!MyWorksheetName</item>
            </list>
            Formulas in cells of other worksheets in the same workbook can use the named reference as well, but they must 
            specify the worksheet name and, optionally, the workbook file name:
            <list type="bullet">
            <item>=Sheet2!OtherWorksheetName</item>
            <item>='C:\[MyWorkbook.xls]Sheet2'!OtherWorksheetName</item>
            </list>
            Formulas in cells of other workbooks can also used the named reference, but they must specify the workbook file
            name, worksheet name, and named reference name.
            </p>
            </remarks>
            <value>The scope of the named reference.</value>
        </member>
        <member name="T:Infragistics.Excel.ArrayFormula">
            <summary>
            Represents an array formula for a group of cells.
            </summary>
            <remarks>
            <p class="body">
            Array formulas are similar to regular formula in that they have the same grammar. However, array formulas
            must be set on a single region of cells only. When the array formula is applied to a region of cells, each cell's
            <see cref="P:Infragistics.Excel.WorksheetCell.Value">Value</see> property will the array formula. This Value cannot be changed unless
            <see cref="M:Infragistics.Excel.ArrayFormula.ClearCellRange"/> is called on the array formula or another value is applied to a region of cells which
            completely contains the array formula's region.
            </p>
            <p class="body">
            Because the array formula stores the region of cell to which it is applied in the <see cref="P:Infragistics.Excel.ArrayFormula.CellRange"/> property, 
            the array formula can only be applied to one region of cells.
            </p>
            <p class="body">
            Array formulas are created through Microsoft Excel by selecting a region of cells, entering a formula for
            that range, and pressing Ctrl+Shift+Enter. This causes the formula of each cell in the region to appear as follows:
            {=Formula}.
            </p>
            <p class="body">
            See the Microsoft Excel documentation for more information on array formulas.
            </p>
            </remarks>
        </member>
        <member name="T:Infragistics.Excel.Formula">
            <summary>
            Represents a formula for a cell or group of cells.
            </summary>
            <remarks>
            <p class="body">
            Formulas provide a way to show dynamic values in a cell. The value could be based any number of factors, such as 
            the values of other cells and the time of day.  Those alternate cells can even exist in different workbook files
            on the user's machine or on the internet.
            </p>
            <p class="body">
            See Microsoft Excel help for more information on formulas.
            </p>
            <p class="body">
            Use one of the Parse or TryParse overloads to create a new formula.
            </p>
            </remarks>
        </member>
        <member name="M:Infragistics.Excel.Formula.ToString">
            <summary>
            Converts the formula to a string representation, similar to the string with which it was created. 
            This uses the <see cref="T:Infragistics.Excel.CellReferenceMode"/> with which the formula was created to create cell
            reference strings.
            </summary>
            <returns>The string representing the formula.</returns>
        </member>
        <member name="M:Infragistics.Excel.Formula.ApplyTo(Infragistics.Excel.WorksheetCell)">
            <summary>
            Applies the formula to the specified cell.
            </summary>
            <remarks>
            <p class="body">
            This method, or one of the other ApplyTo overrides must be used to set the value of a cell to a formula.
            </p>
            <p class="body">
            After this method returns, the <see cref="P:Infragistics.Excel.WorksheetCell.Value"/> of the specified cell will return the formula.
            </p>
            </remarks>
            <param name="cell">The cell to apply the formula to.</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="cell"/> is null.
            </exception>
            <exception cref="T:System.InvalidOperationException">
            <paramref name="cell"/> is part of an array formula or data table which is not confined to just the cell.
            </exception>
            <seealso cref="P:Infragistics.Excel.WorksheetCell.Value"/>
            <seealso cref="M:Infragistics.Excel.Formula.ApplyTo(Infragistics.Excel.WorksheetRegion)"/>
            <seealso cref="M:Infragistics.Excel.Formula.ApplyTo(Infragistics.Excel.WorksheetRegion[])"/>
            <seealso cref="M:Infragistics.Excel.WorksheetCell.ApplyFormula(System.String)"/>
            <seealso cref="M:Infragistics.Excel.WorksheetRegion.ApplyFormula(System.String)"/>
            <seealso cref="M:Infragistics.Excel.WorksheetRegion.ApplyArrayFormula(System.String)"/>
        </member>
        <member name="M:Infragistics.Excel.Formula.ApplyTo(Infragistics.Excel.WorksheetRegion)">
            <summary>
            Applies the formula to the specified region of cells.
            </summary>
            <remarks>
            <p class="body">
            This method, or one of the other ApplyTo overrides must be used to set the value of a cell to a formula.
            </p>
            <p class="body">
            After this method returns, the <see cref="P:Infragistics.Excel.WorksheetCell.Value"/> of all cells in the specified region will
            return the formula.
            </p>
            </remarks>
            <param name="region">The region of cells to apply the formula to.</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="region"/> is null.
            </exception>
            <exception cref="T:System.InvalidOperationException">
            <paramref name="region"/> contains an array formula or data table which extends outside the region.
            </exception>
            <seealso cref="M:Infragistics.Excel.Formula.ApplyTo(Infragistics.Excel.WorksheetCell)"/>
            <seealso cref="M:Infragistics.Excel.Formula.ApplyTo(Infragistics.Excel.WorksheetRegion[])"/>
            <seealso cref="M:Infragistics.Excel.WorksheetCell.ApplyFormula(System.String)"/>
            <seealso cref="M:Infragistics.Excel.WorksheetRegion.ApplyFormula(System.String)"/>
            <seealso cref="M:Infragistics.Excel.WorksheetRegion.ApplyArrayFormula(System.String)"/>
        </member>
        <member name="M:Infragistics.Excel.Formula.ApplyTo(Infragistics.Excel.WorksheetRegion[])">
            <summary>
            Applies the formula to all specified regions of cells.
            </summary>
            <remarks>
            <p class="body">
            This method, or one of the other ApplyTo overrides must be used to set the value of a cell to a formula.
            </p>
            <p class="body">
            After this method returns, the <see cref="P:Infragistics.Excel.WorksheetCell.Value"/> of all cells in all specified regions will
            return the formula.
            </p>
            </remarks>
            <param name="regions">The regions of cells to apply the formula to.</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="regions"/> is null.
            </exception>
            <exception cref="T:System.ArgumentException">
            <paramref name="regions"/> has a length of 0.
            </exception>
            <exception cref="T:System.ArgumentException">
            Not all regions specified are from the same worksheet.
            </exception>
            <exception cref="T:System.InvalidOperationException">
            One or more regions specified contain array formulas or data tables which extend outside the region.
            </exception>
            <seealso cref="M:Infragistics.Excel.Formula.ApplyTo(Infragistics.Excel.WorksheetCell)"/>
            <seealso cref="M:Infragistics.Excel.Formula.ApplyTo(Infragistics.Excel.WorksheetRegion)"/>
            <seealso cref="M:Infragistics.Excel.WorksheetCell.ApplyFormula(System.String)"/>
            <seealso cref="M:Infragistics.Excel.WorksheetRegion.ApplyFormula(System.String)"/>
        </member>
        <member name="M:Infragistics.Excel.Formula.ToString(Infragistics.Excel.CellReferenceMode)">
            <summary>
            Converts the formula to a string representation, similar to the string with which it was created.
            </summary>
            <param name="cellReferenceMode">The cell reference mode used to create cell reference strings.</param>
            <returns>The string representing the formula.</returns>
        </member>
        <member name="M:Infragistics.Excel.Formula.Equals(Infragistics.Excel.Formula,Infragistics.Excel.Formula,Infragistics.Excel.CellReferenceMode)">
            <summary>
            Determines whether two <see cref="T:Infragistics.Excel.Formula"/> instances are equal using the specified cell reference mode.
            </summary>
            <remarks>
            This essentially performs a case-insensitive string comparison, ignoring the white space in the formula.
            </remarks>
            <param name="formulaA">The first Formula to compare.</param>
            <param name="formulaB">The second Formula to compare.</param>
            <param name="cellReferenceMode">The cell reference mode to use when comparing the two formulas.</param>
            <returns>True if the formulas are both null or both equivalent; False otherwise.</returns>
        </member>
        <member name="M:Infragistics.Excel.Formula.Parse(System.String,Infragistics.Excel.CellReferenceMode)">
            <summary>
            Parses the specified formula value and returns the formula which was created from it.
            </summary>
            <param name="value">The string which defines the formula to parse.</param>
            <param name="cellReferenceMode">The mode used to interpret cell references in the formula.</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="value"/> is null or empty.
            </exception>
            <exception cref="T:System.ComponentModel.InvalidEnumArgumentException">
            <paramref name="cellReferenceMode"/> is not defined in the <see cref="T:Infragistics.Excel.CellReferenceMode"/> enumeration.
            </exception>
            <exception cref="T:Infragistics.Excel.FormulaParseException">
            <paramref name="value"/> is not a valid formula.
            </exception>
            <returns>A <see cref="T:Infragistics.Excel.Formula"/> instance which represents the formula specified.</returns>
        </member>
        <member name="M:Infragistics.Excel.Formula.TryParse(System.String,Infragistics.Excel.CellReferenceMode,Infragistics.Excel.Formula@)">
            <summary>
            Parses the specified formula value. The return value indicates whether the operation succeeded.
            </summary>
            <param name="value">The string which defines the formula to parse.</param>
            <param name="cellReferenceMode">The mode used to interpret cell references in the formula.</param>
            <param name="formula">
            When this method returns, contains the formula which was parsed from <paramref name="value"/>,
            if the conversion succeeded, or null if the conversion failed. This parameter is passed uninitialized.
            </param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="value"/> is null or empty.
            </exception>
            <exception cref="T:System.ComponentModel.InvalidEnumArgumentException">
            <paramref name="cellReferenceMode"/> is not defined in the <see cref="T:Infragistics.Excel.CellReferenceMode"/> enumeration.
            </exception>
            <returns>True if <paramref name="value"/> was converted successfully; False otherwise.</returns>
        </member>
        <member name="M:Infragistics.Excel.Formula.TryParse(System.String,Infragistics.Excel.CellReferenceMode,Infragistics.Excel.Formula@,Infragistics.Excel.FormulaParseException@)">
            <summary>
            Parses the specified formula value. The return value indicates whether the operation succeeded.
            </summary>
            <param name="value">The string which defines the formula to parse.</param>
            <param name="cellReferenceMode">The mode used to interpret cell references in the formula.</param>
            <param name="formula">
            When this method returns, contains the formula which was parsed from <paramref name="value"/>
            if the conversion succeeded or null if the conversion failed. This parameter is passed uninitialized.
            </param>
            <param name="exception">
            When this method returns, contains the error information if the conversion failed or null if the 
            conversion succeeded. This parameter is passed uninitialized.
            </param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="value"/> is null or empty.
            </exception>
            <exception cref="T:System.ComponentModel.InvalidEnumArgumentException">
            <paramref name="cellReferenceMode"/> is not defined in the <see cref="T:Infragistics.Excel.CellReferenceMode"/> enumeration.
            </exception>
            <returns>True if <paramref name="value"/> was converted successfully; False otherwise.</returns>
        </member>
        <member name="M:Infragistics.Excel.ArrayFormula.ApplyTo(Infragistics.Excel.WorksheetRegion[])">
            <summary>
            Applies the formula to all specified regions of cells.
            </summary>
            <remarks>
            <p class="body">
            This method, or one of the other ApplyTo overrides must be used to set the value of a cell to a formula.
            </p>
            <p class="body">
            After this method returns, the <see cref="P:Infragistics.Excel.WorksheetCell.Value"/> of all cells in all specified regions will
            return the formula.
            </p>
            </remarks>
            <param name="regions">The regions of cells to apply the formula to.</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="regions"/> is null.
            </exception>
            <exception cref="T:System.ArgumentException">
            The length <paramref name="regions"/> is anything other than one.
            </exception>
            <exception cref="T:System.InvalidOperationException">
            The array formula is already applied to a cell region.
            </exception>
            <exception cref="T:System.InvalidOperationException">
            One or more regions specified contain array formulas or data tables which extend outside the region.
            </exception>
            <seealso cref="M:Infragistics.Excel.Formula.ApplyTo(Infragistics.Excel.WorksheetCell)"/>
            <seealso cref="M:Infragistics.Excel.Formula.ApplyTo(Infragistics.Excel.WorksheetRegion)"/>
            <seealso cref="M:Infragistics.Excel.WorksheetRegion.ApplyArrayFormula(System.String)"/>
        </member>
        <member name="M:Infragistics.Excel.ArrayFormula.ClearCellRange">
            <summary>
            Removes this formula as the value for the cells to which it was applied.
            </summary>
            <remarks>
            <p class="body">
            After this method returns, the <see cref="P:Infragistics.Excel.ArrayFormula.CellRange"/> will be null.
            </p>
            </remarks>
        </member>
        <member name="M:Infragistics.Excel.ArrayFormula.Parse(System.String,Infragistics.Excel.CellReferenceMode)">
            <summary>
            Parses the specified formula value and returns the formula which was created from it.
            </summary>
            <param name="value">The string which defines the formula to parse.</param>
            <param name="cellReferenceMode">The mode used to interpret cell references in the formula.</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="value"/> is null or empty.
            </exception>
            <exception cref="T:System.ComponentModel.InvalidEnumArgumentException">
            <paramref name="cellReferenceMode"/> is not defined in the <see cref="T:Infragistics.Excel.CellReferenceMode"/> enumeration.
            </exception>
            <exception cref="T:Infragistics.Excel.FormulaParseException">
            <paramref name="value"/> is not a valid formula.
            </exception>
            <returns>A <see cref="T:Infragistics.Excel.ArrayFormula"/> instance which represents the formula value specified.</returns>
        </member>
        <member name="M:Infragistics.Excel.ArrayFormula.TryParse(System.String,Infragistics.Excel.CellReferenceMode,Infragistics.Excel.ArrayFormula@)">
            <summary>
            Parses the specified formula value. The return value indicates whether the operation succeeded.
            </summary>
            <param name="value">The string which defines the formula to parse.</param>
            <param name="cellReferenceMode">The mode used to interpret cell references in the formula.</param>
            <param name="formula">
            When this method returns, contains the formula which was parsed from <paramref name="value"/>,
            if the conversion succeeded, or null if the conversion failed. This parameter is passed uninitialized.
            </param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="value"/> is null or empty.
            </exception>
            <exception cref="T:System.ComponentModel.InvalidEnumArgumentException">
            <paramref name="cellReferenceMode"/> is not defined in the <see cref="T:Infragistics.Excel.CellReferenceMode"/> enumeration.
            </exception>
            <returns>True if <paramref name="value"/> was converted successfully; False otherwise.</returns>
        </member>
        <member name="M:Infragistics.Excel.ArrayFormula.TryParse(System.String,Infragistics.Excel.CellReferenceMode,Infragistics.Excel.ArrayFormula@,Infragistics.Excel.FormulaParseException@)">
            <summary>
            Parses the specified formula value. The return value indicates whether the operation succeeded.
            </summary>
            <param name="value">The string which defines the formula to parse.</param>
            <param name="cellReferenceMode">The mode used to interpret cell references in the formula.</param>
            <param name="formula">
            When this method returns, contains the formula which was parsed from <paramref name="value"/>
            if the conversion succeeded or null if the conversion failed. This parameter is passed uninitialized.
            </param>
            <param name="exception">
            When this method returns, contains the error information if the conversion failed or null if the 
            conversion succeeded. This parameter is passed uninitialized.
            </param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="value"/> is null or empty.
            </exception>
            <exception cref="T:System.ComponentModel.InvalidEnumArgumentException">
            <paramref name="cellReferenceMode"/> is not defined in the <see cref="T:Infragistics.Excel.CellReferenceMode"/> enumeration.
            </exception>
            <returns>True if <paramref name="value"/> was converted successfully; False otherwise.</returns>
        </member>
        <member name="P:Infragistics.Excel.ArrayFormula.CellRange">
            <summary>
            Gets the cells to which the array formula is applied.
            </summary>
            <remarks>
            <p class="body">
            If this is null, the formula has not yet been applied.
            </p>
            </remarks>
            <value>The cells to which the array formula is applied.</value>
        </member>
        <member name="T:Infragistics.Shared.AssemblyVersion">
            <summary>
            Contains version information for the Infragistics assemblies.
            </summary>
        </member>
        <member name="F:Infragistics.Shared.AssemblyVersion.MajorMinor">
            <summary>
            Major.Minor number portion of the assembly version
            </summary>
        </member>
        <member name="F:Infragistics.Shared.AssemblyVersion.Build">
            <summary>
            Build number portion of the assembly version
            </summary>
        </member>
        <member name="F:Infragistics.Shared.AssemblyVersion.Revision">
            <summary>
            Revision number portion of the assembly version
            </summary>
        </member>
        <member name="F:Infragistics.Shared.AssemblyVersion.Version">
            <summary>
            Assembly version number
            </summary>
        </member>
        <member name="F:Infragistics.Shared.AssemblyVersion.ToolBoxBitmapFolder">
            <summary>
            Location of the resources for toolbox bitmaps. 
            </summary>
        </member>
        <member name="F:Infragistics.Shared.AssemblyVersion.CompanyName">
            <summary>
            Assembly company name
            </summary>
        </member>
        <member name="F:Infragistics.Shared.AssemblyVersion.EndCopyrightYear">
            <summary>
            End year of assembly copyright
            </summary>
        </member>
        <member name="F:Infragistics.Shared.AssemblyVersion.SatelliteContractVersion">
            <summary>
            The assembly version number for the satellite assemblies.
            </summary>
        </member>
        <member name="F:Infragistics.Shared.AssemblyVersion.Configuration">
            <summary>
            The current build configuration for the assembly.
            </summary>
        </member>
        <member name="T:Infragistics.Excel.BIFF8Writer">
            <summary>
            BIFF8Writer provides static methods for exporting abstract workbook object to concrete Excel file.
            </summary>
            <remarks>
            <p class="note">
            <b>Note:</b> The BIFF8Writer class is no longer needed.  Use one of the Save overloads on <see cref="T:Infragistics.Excel.Workbook"/>instead.
            </p>
            </remarks>
        </member>
        <member name="M:Infragistics.Excel.BIFF8Writer.WriteWorkbookToFile(Infragistics.Excel.Workbook,System.String)">
            <summary>
            Writes existing workbook object to a file in BIFF8 format.
            </summary>
            <remarks>
            <p class="note">
            <b>Note:</b> The <see cref="M:Infragistics.Excel.Workbook.Save(System.String)"/> method should be used instead to write the workbook to a file.
            </p>
            </remarks>
            <param name="workbook">Workbook to export.</param>
            <param name="fileName">Filename of resulting excel file. If path is not included, file is created in default program folder.</param>
        </member>
        <member name="M:Infragistics.Excel.BIFF8Writer.WriteWorkbookToStream(Infragistics.Excel.Workbook,System.IO.Stream)">
            <summary>
            Writes existing workbook object to a stream.
            </summary>
            <remarks>
            <p class="note">
            <b>Note:</b> The <see cref="M:Infragistics.Excel.Workbook.Save(System.IO.Stream)"/> method should be used instead to write the workbook to a stream.
            </p>
            </remarks>
            <param name="workbook">Workbook to export.</param>
            <param name="outStream">Output file stream.</param>
        </member>
        <member name="M:Infragistics.Excel.BIFF8Writer.WriteWorkbookToStreamEx(Infragistics.Excel.Workbook,System.IO.Stream)">
            <summary>
            Writes existing workbook object to a stream in BIFF8 format.
            </summary>
            <remarks>
            <p class="note">
            <b>Note:</b> The <see cref="M:Infragistics.Excel.Workbook.Save(System.IO.Stream)"/> method should be used instead to write the workbook to a stream.
            </p>
            </remarks>
            <param name="workbook">Workbook to export.</param>
            <param name="outStream">An output stream to generate the BIFF8 content into.</param>
        </member>
        <member name="T:Infragistics.Excel.CustomView">
            <summary>
            Represents a custom view in Microsoft Excel.
            </summary>
            <remarks>
            <p class="body">
            Custom views provide a way to save display options and optionally print options for the workbook and each worksheet in the workbook.
            These options can be different from the options currently set on the workbook and worksheets.
            </p>
            <p class="body">
            Multiple custom views can be saved with a workbook, and the options from a custom view can be applied to its associated workbook by 
            calling the <see cref="M:Infragistics.Excel.CustomView.Apply"/> method on it.
            </p>
            </remarks>
            <seealso cref="P:Workbook.CustomViews"/>
        </member>
        <member name="M:Infragistics.Excel.CustomView.Apply">
            <summary>
            Applies all options from the custom view to the associated workbook and its worksheets.
            </summary>
            <remarks>
            <p class="body">
            There is no state of the workbook indicating the custom view currently applied, so applying a custom view
            simply copies over all options saved with it to the workbook and its worksheet. If an applied custom view
            is then changed, those changes will not be updated on the workbook or worksheets. Instead, the custom view will need
            to be applied again for those changes to be reflected on the workbook or worksheet.
            </p>
            </remarks>
            <exception cref="T:System.InvalidOperationException">
            The custom view has previously been removed from its associated workbook.
            </exception>
        </member>
        <member name="M:Infragistics.Excel.CustomView.GetDisplayOptions(Infragistics.Excel.Worksheet)">
            <summary>
            Gets the display options associated with the specified worksheet.
            </summary>
            <remarks>
            <p class="body">
            Setting properties on the returned <see cref="T:Infragistics.Excel.DisplayOptions"/> instance will not change the actual
            display of the worksheet. After setting properties, the <see cref="M:Infragistics.Excel.CustomView.Apply"/> method of the 
            <see cref="T:Infragistics.Excel.CustomView"/> will apply them to the worksheet.
            </p>
            </remarks>
            <param name="worksheet">The worksheet whose associated display options are to be retrieved.</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="worksheet"/> is null.
            </exception>
            <returns>
            Null if the worksheet does not belong to the workbook associated with this custom view; 
            otherwise, the display options associated with the worksheet.
            </returns>
            <seealso cref="P:Infragistics.Excel.Worksheet.DisplayOptions"/>
        </member>
        <member name="M:Infragistics.Excel.CustomView.GetHiddenColumns(Infragistics.Excel.Worksheet)">
            <summary>
            Gets the hidden columns associated with the specified worksheet.
            </summary>
            <remarks>
            <p class="body">
            Adding columns on the returned <see cref="T:Infragistics.Excel.HiddenColumnCollection"/> instance will not actually hide 
            columns in the worksheet. After modifying the hidden columns in this collection, the <see cref="M:Infragistics.Excel.CustomView.Apply"/> 
            method of the <see cref="T:Infragistics.Excel.CustomView"/> will hide or unhide the columns.
            </p>
            </remarks>
            <param name="worksheet">The worksheet whose associated hidden columns are to be retrieved.</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="worksheet"/> is null.
            </exception>
            <returns>
            Null if <see cref="P:Infragistics.Excel.CustomView.SaveHiddenRowsAndColumns"/> is False or if the worksheet does not belong to the workbook 
            associated with this custom view; otherwise, the collection of hidden columns associated with the worksheet.
            </returns>
            <seealso cref="P:Infragistics.Excel.RowColumnBase.Hidden"/>
            <seealso cref="P:Infragistics.Excel.CustomView.SaveHiddenRowsAndColumns"/>
        </member>
        <member name="M:Infragistics.Excel.CustomView.GetHiddenRows(Infragistics.Excel.Worksheet)">
            <summary>
            Gets the hidden rows associated with the specified worksheet.
            </summary>
            <remarks>
            <p class="body">
            Adding rows on the returned <see cref="T:Infragistics.Excel.HiddenRowCollection"/> instance will not actually hide 
            rows in the worksheet. After modifying the hidden rows in this collection, the <see cref="M:Infragistics.Excel.CustomView.Apply"/> 
            method of the <see cref="T:Infragistics.Excel.CustomView"/> will hide or unhide the rows.
            </p>
            </remarks>
            <param name="worksheet">The worksheet whose associated hidden rows are to be retrieved.</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="worksheet"/> is null.
            </exception>
            <returns>
            Null if <see cref="P:Infragistics.Excel.CustomView.SaveHiddenRowsAndColumns"/> is False or if the worksheet does not belong to the workbook 
            associated with this custom view; otherwise, the collection of hidden rows associated with the worksheet.
            </returns>
            <seealso cref="P:Infragistics.Excel.RowColumnBase.Hidden"/>
            <seealso cref="P:Infragistics.Excel.CustomView.SaveHiddenRowsAndColumns"/>
        </member>
        <member name="M:Infragistics.Excel.CustomView.GetPrintOptions(Infragistics.Excel.Worksheet)">
            <summary>
            Gets the print options associated with the specified worksheet.
            </summary>
            <remarks>
            <p class="body">
            Setting properties on the returned <see cref="T:Infragistics.Excel.PrintOptions"/> instance will not change the actual
            print settings of the worksheet. After setting properties, the <see cref="M:Infragistics.Excel.CustomView.Apply"/> method of the 
            <see cref="T:Infragistics.Excel.CustomView"/> will apply them to the worksheet.
            </p>
            </remarks>
            <param name="worksheet">The worksheet whose associated print options are to be retrieved.</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="worksheet"/> is null.
            </exception>
            <returns>
            Null if <see cref="P:Infragistics.Excel.CustomView.SavePrintOptions"/> is False or if the worksheet does not belong to the workbook associated
            with this custom view; otherwise, the print options associated with the worksheet.
            </returns>
            <seealso cref="P:Infragistics.Excel.Worksheet.PrintOptions"/>
            <seealso cref="P:Infragistics.Excel.CustomView.SavePrintOptions"/>
        </member>
        <member name="P:Infragistics.Excel.CustomView.Name">
            <summary>
            Gets or sets the name of the custom view.
            </summary>
            <remarks>
            <p class="body">
            The name of the custom view is displayed in the custom views dialog of Microsoft Excel and must be 
            case-insensitively unique to other custom views in the workbook.
            </p>
            </remarks>
            <exception cref="T:System.ArgumentNullException">
            The value assigned is a null or empty.
            </exception>
            <exception cref="T:System.ArgumentException">
            The value assigned is the name of another custom view in this custom view's associated workbook (custom view 
            names are compared case-insensitively).
            </exception>
            <value>The name of the custom view.</value>
        </member>
        <member name="P:Infragistics.Excel.CustomView.SaveHiddenRowsAndColumns">
            <summary>
            Gets the value indicating whether hidden row and column settings are saved with the custom view.
            </summary>
            <remarks>
            <p class="body">
            If the value is False, the return value of <see cref="M:Infragistics.Excel.CustomView.GetHiddenColumns(Infragistics.Excel.Worksheet)"/> and <see cref="M:Infragistics.Excel.CustomView.GetHiddenRows(Infragistics.Excel.Worksheet)"/>
            will always be null, regardless of the worksheet specified.
            </p>
            </remarks>
            <value>The value indicating whether hidden row and column settings are saved with the custom view.</value>
            <seealso cref="M:Infragistics.Excel.CustomView.GetHiddenColumns(Infragistics.Excel.Worksheet)"/>
            <seealso cref="M:Infragistics.Excel.CustomView.GetHiddenRows(Infragistics.Excel.Worksheet)"/>
            <seealso cref="T:Infragistics.Excel.HiddenColumnCollection"/>
            <seealso cref="T:Infragistics.Excel.HiddenRowCollection"/>
        </member>
        <member name="P:Infragistics.Excel.CustomView.SavePrintOptions">
            <summary>
            Gets the value indicating whether print options are saved with the custom view.
            </summary>
            <remarks>
            <p class="body">
            If the value is False, the return value of <see cref="M:Infragistics.Excel.CustomView.GetPrintOptions(Infragistics.Excel.Worksheet)"/> will always be null, 
            regardless of the worksheet specified.
            </p>
            </remarks>
            <value>The value indicating whether print options are saved with the custom view.</value>
            <seealso cref="M:Infragistics.Excel.CustomView.GetPrintOptions(Infragistics.Excel.Worksheet)"/>
            <seealso cref="T:Infragistics.Excel.PrintOptions"/>
        </member>
        <member name="P:Infragistics.Excel.CustomView.WindowOptions">
            <summary>
            Gets the window options for the workbook associated with the custom view.
            </summary>
            <remarks>
            <p class="body">
            Setting properties on the returned <see cref="P:Infragistics.Excel.CustomView.WindowOptions"/> instance will not change the actual
            window options of the associated workbook. After setting properties, the <see cref="M:Infragistics.Excel.CustomView.Apply"/> method 
            of the <see cref="T:Infragistics.Excel.CustomView"/> will apply them to the workbook.
            </p>
            </remarks>
            <value>The window options for the workbook associated with the custom view..</value>
            <seealso cref="T:Workbook.WindowOptions"/>
        </member>
        <member name="T:Infragistics.Excel.CustomViewDisplayOptions">
            <summary>
            Class which exposes the worksheet display options which can only be controlled through the custom view.
            </summary>
            <seealso cref="M:Infragistics.Excel.CustomView.GetDisplayOptions(Infragistics.Excel.Worksheet)"/>
            <seealso cref="T:Infragistics.Excel.WorksheetDisplayOptions"/>
        </member>
        <member name="T:Infragistics.Excel.DisplayOptions">
            <summary>
            Abstract base class which exposes the various display options available for a worksheet which can be 
            saved with both a worksheet and a custom view.
            </summary>
            <remarks>
            <p class="body">
            This class provides a way to control how a worksheet is displayed when it is viewed in Microsoft Excel.
            </p>
            </remarks>
            <seealso cref="T:Infragistics.Excel.CustomViewDisplayOptions"/>
            <seealso cref="T:Infragistics.Excel.WorksheetDisplayOptions"/>
        </member>
        <member name="M:Infragistics.Excel.DisplayOptions.Reset">
            <summary>
            Resets the display options to their default settings.
            </summary>
            <remarks>
            <p class="body">
            The defaults used for each setting are the same defaults with which Microsoft Excel creates a blank worksheet.
            </p>
            </remarks>
        </member>
        <member name="P:Infragistics.Excel.DisplayOptions.FrozenPaneSettings">
            <summary>
            Gets the settings which control the frozen panes in the worksheet.
            </summary>
            <remarks>
            <p class="body">
            For these settings to be saved in the workbook file, <see cref="P:Infragistics.Excel.DisplayOptions.PanesAreFrozen"/> must be True.
            </p>
            <p class="note">
            <B>Note:</B> Frozen and unfrozen panes cannot be used simultaneously, so depending whether the panes are 
            frozen or unfrozen, these settings may not be used.
            </p>
            </remarks>
            <value>The settings which control the frozen panes in the worksheet..</value>
            <seealso cref="P:Infragistics.Excel.DisplayOptions.PanesAreFrozen"/>
            <seealso cref="P:Infragistics.Excel.DisplayOptions.UnfrozenPaneSettings"/>
        </member>
        <member name="P:Infragistics.Excel.DisplayOptions.GridlineColor">
            <summary>
            Gets or sets the color of the gridlines on the worksheet.
            </summary>
            <remarks>
            <p class="body">
            If the workbook is using a standard palette, the color set may be changed if it is not in the palette.
            In this case, the closest color in the standard palette will be used.
            </p>
            </remarks>
            <exception cref="T:System.InvalidOperationException">
            The workbook is using a custom palette and setting this color would cause the custom palette to use 
            too many colors.
            </exception>
            <value>The color of the gridlines on the worksheet.</value>
        </member>
        <member name="P:Infragistics.Excel.DisplayOptions.PanesAreFrozen">
            <summary>
            Gets or sets the value which indicates if the panes in the worksheet are frozen.
            </summary>
            <remarks>
            <p class="body">
            Depending on the value of this property, either the <see cref="P:Infragistics.Excel.DisplayOptions.FrozenPaneSettings"/> or the
            <see cref="P:Infragistics.Excel.DisplayOptions.UnfrozenPaneSettings"/> will be used for the worksheet. The unused settings are 
            ignored and are not saved with the workbook stream.
            </p>
            </remarks>
            <value>The value which indicates if the panes in the worksheet are frozen.</value>
            <seealso cref="P:Infragistics.Excel.DisplayOptions.FrozenPaneSettings"/>
            <seealso cref="P:Infragistics.Excel.DisplayOptions.UnfrozenPaneSettings"/>
        </member>
        <member name="P:Infragistics.Excel.DisplayOptions.ShowFormulasInCells">
            <summary>
            Gets or sets the value which indicates whether formulas are shown in cells.
            </summary>
            <remarks>
            <p class="body">
            If this value is True, the formula string will be displayed in the cell. If the value is
            False, the result of the formula will be displayed in the cell.
            </p>
            </remarks>
            <value>The value which indicates whether formulas are shown in cells.</value>
        </member>
        <member name="P:Infragistics.Excel.DisplayOptions.ShowGridlines">
            <summary>
            Gets or sets the value which indicates whether gridlines are shown between cells.
            </summary>
            <value>The value which indicates whether gridlines are shown between cells.</value>
            <seealso cref="P:Infragistics.Excel.PrintOptions.PrintGridlines"/>
        </member>
        <member name="P:Infragistics.Excel.DisplayOptions.ShowOutlineSymbols">
            <summary>
            Gets or sets the value which indicates whether outline symbols are shown for outlined columns and rows.
            </summary>
            <remarks>
            <p class="body">
            If the outline symbols are displayed, they provide a visual representation of the outline levels or rows 
            and columns in Microsoft Excel.  In addition, the outline symbols include the expansion indicators which
            allow for the expanding and collapsing of outline groups.
            </p>
            </remarks>
            <value>The value which indicates whether outline symbols are shown for outlined columns and rows.</value>
            <seealso cref="P:Infragistics.Excel.RowColumnBase.OutlineLevel"/>
        </member>
        <member name="P:Infragistics.Excel.DisplayOptions.ShowRowAndColumnHeaders">
            <summary>
            Gets or sets the value which indicates whether to display row and column headers.
            </summary>
            <remarks>
            <p class="body">
            The row and column headers show the identifier of the row or column. They also allow the user to easily select
            all cells in a row or column by clicking them.
            </p>
            </remarks>
            <value>The value which indicates whether to display row and column headers.</value>
            <seealso cref="P:Infragistics.Excel.PrintOptions.PrintRowAndColumnHeaders"/>
        </member>
        <member name="P:Infragistics.Excel.DisplayOptions.ShowRulerInPageLayoutView">
            <summary>
            Gets or sets the value which indicates whether to show rulers in the page layout view.
            </summary>
            <remarks>
            <p class="body">
            When this value is True, one ruler will display above the column headers of the active page
            in page layout view. Another ruler will also display before the row headers of the active page.
            </p>
            <p class="note">
            <b>Note:</b> This property will only affect the worksheet view if the <see cref="P:Infragistics.Excel.DisplayOptions.View"/> is 
            PageLayout.
            </p>
            <p class="note">
            <b>Note:</b> The <see cref="T:Infragistics.Excel.WorksheetView"/> value of PageLayout is only supported in Excel 2007. 
            If a worksheet with that View is viewed in earlier versions of Microsoft Excel, the view will 
            default to Normal view.
            </p>
            </remarks>
            <value>The value which indicates whether to show rulers in the page layout view.</value>
            <seealso cref="P:Infragistics.Excel.DisplayOptions.View"/>
        </member>
        <member name="P:Infragistics.Excel.DisplayOptions.ShowZeroValues">
            <summary>
            Gets or sets the value which indicates whether zero values are shown in cells.
            </summary>
            <remarks>
            <p class="body">
            If this value is True, cells with a value of zero will display their values; otherwise,
            those cells will display as blanks.
            </p>
            </remarks>
            <value>The value which indicates whether zero values are shown in cells.</value>
        </member>
        <member name="P:Infragistics.Excel.DisplayOptions.UnfrozenPaneSettings">
            <summary>
            Gets the settings which control the unfrozen panes in the worksheet.
            </summary>
            <remarks>
            <p class="body">
            For these settings to be saved in the workbook file, <see cref="P:Infragistics.Excel.DisplayOptions.PanesAreFrozen"/> must be False.
            </p>
            <p class="note">
            <B>Note:</B> Frozen and unfrozen panes cannot be used simultaneously, so depending whether the panes are 
            frozen or unfrozen, these settings may not be used.
            </p>
            </remarks>
            <value>The settings which control the unfrozen panes in the worksheet.</value>
            <seealso cref="P:Infragistics.Excel.DisplayOptions.PanesAreFrozen"/>
            <seealso cref="P:Infragistics.Excel.DisplayOptions.FrozenPaneSettings"/>
        </member>
        <member name="P:Infragistics.Excel.DisplayOptions.View">
            <summary>
            Gets or sets the current view of the worksheet.
            </summary>
            <remarks>
            <p class="body">
            The view determines the overall display of the worksheet in Microsoft Excel.
            </p>
            <p class="note">
            <b>Note:</b> The <see cref="T:Infragistics.Excel.WorksheetView"/> value of PageLayout is only supported in Excel 2007. 
            If a worksheet with that View is viewed in earlier versions of Microsoft Excel, the view will 
            default to Normal view.
            </p>
            </remarks>
            <exception cref="T:System.ComponentModel.InvalidEnumArgumentException">
            The value assigned is not defined in the WorksheetView enumeration.
            </exception>
            <value>The current view of the worksheet.</value>
            <seealso cref="P:Infragistics.Excel.CustomViewDisplayOptions.MagnificationInCurrentView"/>
            <seealso cref="P:Infragistics.Excel.WorksheetDisplayOptions.MagnificationInNormalView"/>
            <seealso cref="P:Infragistics.Excel.WorksheetDisplayOptions.MagnificationInPageBreakView"/>
            <seealso cref="P:Infragistics.Excel.WorksheetDisplayOptions.MagnificationInPageLayoutView"/>
        </member>
        <member name="P:Infragistics.Excel.DisplayOptions.Visibility">
            <summary>
            Gets or sets the visibility of the worksheet.
            </summary>
            <remarks>
            <p class="body">
            The visibility determines whether the worksheet's tab will appear in the tab bar at the
            bottom of Microsoft Excel. 
            </p>
            </remarks>
            <exception cref="T:System.ComponentModel.InvalidEnumArgumentException">
            The value assigned is not defined in the <see cref="T:Infragistics.Excel.WorksheetVisibility"/> enumeration.
            </exception>
            <value>The visibility of the worksheet.</value>
        </member>
        <member name="M:Infragistics.Excel.CustomViewDisplayOptions.Reset">
            <summary>
            Resets the display options to their default settings.
            </summary>
            <remarks>
            <p class="body">
            The defaults used for each setting are the same defaults with which Microsoft Excel creates a blank worksheet.
            </p>
            </remarks>
        </member>
        <member name="P:Infragistics.Excel.CustomViewDisplayOptions.MagnificationInCurrentView">
            <summary>
            Gets or sets the magnification level of the worksheet in the current <see cref="P:Infragistics.Excel.DisplayOptions.View"/>.
            </summary>
            <remarks>
            <p class="body">
            Magnifications are stored as percentages of the normal viewing magnification. A value of 100 indicates normal magnification
            whereas a value of 200 indicates a zoom that is twice the normal viewing magnification.
            </p>
            </remarks>
            <exception cref="T:System.ArgumentOutOfRangeException">
            The assigned value is outside the valid range of magnification levels for a worksheet. The level must be between 10 and 400.
            </exception>
            <value>The magnification level of the worksheet in the current View.</value>
            <seealso cref="P:Infragistics.Excel.WorksheetDisplayOptions.MagnificationInNormalView"/>
            <seealso cref="P:Infragistics.Excel.WorksheetDisplayOptions.MagnificationInPageBreakView"/>
            <seealso cref="P:Infragistics.Excel.WorksheetDisplayOptions.MagnificationInPageLayoutView"/>
        </member>
        <member name="T:Infragistics.Excel.CustomViewCollection">
            <summary>
            A collection of <see cref="T:Infragistics.Excel.CustomView"/> instances in a workbook.
            </summary>
            <see cref="P:Infragistics.Excel.Workbook.CustomViews"/>
        </member>
        <member name="M:Infragistics.Excel.CustomViewCollection.Add(System.String,System.Boolean,System.Boolean)">
            <summary>
            Adds a new custom view to the collection.
            </summary>
            <param name="name">The name to give the newly created custom view.</param>
            <param name="savePrintOptions">
            True to save print options for each worksheet with the custom view; False otherwise.
            </param>
            <param name="saveHiddenRowsAndColumns">
            True to save information about hidden rows and columns for each worksheet with the custom view; False otherwise.
            </param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="name"/> is a null or empty.
            </exception>
            <exception cref="T:System.ArgumentException">
            <paramref name="name"/> is the name of another custom view in the collection (custom view names are compared 
            case-insensitively).
            </exception>
            <returns>The newly created <see cref="T:Infragistics.Excel.CustomView"/> instance.</returns>
        </member>
        <member name="M:Infragistics.Excel.CustomViewCollection.Clear">
            <summary>
            Clears all custom views from the collection.
            </summary>
        </member>
        <member name="M:Infragistics.Excel.CustomViewCollection.Contains(Infragistics.Excel.CustomView)">
            <summary>
            Determines whether a custom view is in this collection.
            </summary>
            <param name="customView">The custom view to locate in the collection.</param>
            <returns>True if the custom view is found; False otherwise.</returns>
        </member>
        <member name="M:Infragistics.Excel.CustomViewCollection.Remove(Infragistics.Excel.CustomView)">
            <summary>
            Removes the specified custom view from the collection.
            </summary>
            <param name="customView">The custom view to remove from the collection.</param>
            <returns>
            True if the custom view was successfully removed; False if the custom view was not 
            in the collection.
            </returns>
        </member>
        <member name="M:Infragistics.Excel.CustomViewCollection.RemoveAt(System.Int32)">
            <summary>
            Removes the custom view at the specified index from the collection.
            </summary>
            <param name="index">The zero-based index of the custom view in the collection.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <paramref name="index"/> is less than zero or <paramref name="index"/> is greater than or 
            equal to <see cref="P:Infragistics.Excel.CustomViewCollection.Count"/>.
            </exception>
        </member>
        <member name="P:Infragistics.Excel.CustomViewCollection.Count">
            <summary>
            Gets the number of custom views in the collection.
            </summary>
            <value>The number of custom views in the collection.</value>
        </member>
        <member name="P:Infragistics.Excel.CustomViewCollection.Item(System.Int32)">
            <summary>
            Gets the custom view at the specified index.
            </summary>
            <param name="index">The zero-based index of the custom view to get.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <paramref name="index"/> is less than zero or <paramref name="index"/> is greater than or 
            equal to <see cref="P:Infragistics.Excel.CustomViewCollection.Count"/>.
            </exception>
            <value>The custom view at the specified index.</value>
        </member>
        <member name="T:Infragistics.Excel.CustomViewWindowOptions">
            <summary>
            Represents the workbook window options which are saved with custom views.
            </summary>
            <remarks>
            <p class="body">
            The properties explicitly defined on this class and not inherited from the base class, 
            <see cref="T:Infragistics.Excel.WindowOptions"/>, are options that can be saved with a custom view, but 
            not with a workbook. Therefore, these properties will not be applied when the 
            <see cref="M:Infragistics.Excel.CustomView.Apply"/> method is called.
            </p>
            </remarks>
            <seealso cref="P:Infragistics.Excel.CustomView.WindowOptions"/>
            <seealso cref="T:Infragistics.Excel.WorkbookWindowOptions"/>
        </member>
        <member name="T:Infragistics.Excel.WindowOptions">
            <summary>
            Abstract base class which exposes the various workbook window options available which can be saved with 
            both a workbook and a custom view.
            </summary>
            <remarks>
            <p class="body">
            This class provides a way to control how a workbook is displayed when it is viewed in Microsoft Excel.
            </p>
            </remarks>
            <seealso cref="T:Infragistics.Excel.CustomViewWindowOptions"/>
            <seealso cref="T:Infragistics.Excel.WorkbookWindowOptions"/>
        </member>
        <member name="M:Infragistics.Excel.WindowOptions.Reset">
            <summary>
            Resets the window options to their default settings.
            </summary>
            <remarks>
            <p class="body">
            The defaults used for each setting are the same defaults with which Microsoft Excel creates a blank workbook.
            </p>
            </remarks>
        </member>
        <member name="P:Infragistics.Excel.WindowOptions.ObjectDisplayStyle">
            <summary>
            Gets or sets the way the objects and shapes are displayed in the workbook.
            </summary>
            <exception cref="T:System.ComponentModel.InvalidEnumArgumentException">
            The assigned value is not defined in the <see cref="P:Infragistics.Excel.WindowOptions.ObjectDisplayStyle"/> enumeration.
            </exception>
            <value>The way the objects and shapes are displayed in the workbook.</value>
            <seealso cref="T:Infragistics.Excel.WorksheetShape"/>
            <seealso cref="T:Infragistics.Excel.WorksheetImage"/>
            <seealso cref="P:Infragistics.Excel.Worksheet.Shapes"/>
        </member>
        <member name="P:Infragistics.Excel.WindowOptions.ScrollBars">
            <summary>
            Gets or sets the scroll bars shown in the workbook window.
            </summary>
            <remarks>
            <p class="body">
            The vertical scroll bar occupies the entire height of the application if it is visible.
            </p>
            <p class="body">
            The horizontal scroll bar occupies the width of the application not used by the worksheet
            tab bar, if it is visible. Otherwise, it occupies the entire width of the application.
            </p>
            </remarks>
            <exception cref="T:System.ComponentModel.InvalidEnumArgumentException">
            The assigned value is not defined in the <see cref="P:Infragistics.Excel.WindowOptions.ScrollBars"/> enumeration.
            </exception>
            <value>The scroll bars shown in the workbook window.</value>
            <seealso cref="P:Infragistics.Excel.WindowOptions.TabBarWidth"/>
            <seealso cref="P:Infragistics.Excel.WindowOptions.TabBarVisible"/>
        </member>
        <member name="P:Infragistics.Excel.WindowOptions.SelectedWorksheet">
            <summary>
            Gets or sets the selected worksheet of the workbook.
            </summary>
            <remarks>
            <p class="body">
            If this is an instance of <see cref="T:Infragistics.Excel.CustomViewWindowOptions"/> and the SelectedWorksheet value is null, the 
            workbook's selected worksheet will not be changed when the associated <see cref="T:Infragistics.Excel.CustomView"/> is applied.
            </p>
            <p class="note">
            <B>Note:</B> If the selected worksheet does not have its <see cref="P:Infragistics.Excel.DisplayOptions.Visibility"/> set to Visible
            when the workbook is saved, another worksheet will be selected.
            </p>
            </remarks>
            <exception cref="T:System.ArgumentNullException">
            The assigned value is null and this is an instance of <see cref="T:Infragistics.Excel.WorkbookWindowOptions"/> whose associated 
            <see cref="P:Infragistics.Excel.WindowOptions.Workbook"/> has at least one <see cref="T:Infragistics.Excel.Worksheet"/>.
            </exception>
            <exception cref="T:System.ArgumentException">
            The assigned value does not belong to the workbook associated with this instance of <see cref="T:Infragistics.Excel.WindowOptions"/>.
            </exception>
            <value>The selected worksheet of the workbook.</value>
        </member>
        <member name="P:Infragistics.Excel.WindowOptions.TabBarVisible">
            <summary>
            Gets or sets the value indicating whether the worksheet tab bar is visible.
            </summary>
            <remarks>
            <p class="body">
            If the value is False, the <see cref="P:Infragistics.Excel.WindowOptions.TabBarWidth"/> will not be used, but it will still 
            be serialized with the workbook.
            </p>
            </remarks>
            <value>The value indicating whether the worksheet tab bar is visible.</value>
            <seealso cref="P:Infragistics.Excel.WindowOptions.TabBarWidth"/>
            <seealso cref="P:Infragistics.Excel.WorkbookWindowOptions.FirstVisibleTabIndex"/>
        </member>
        <member name="P:Infragistics.Excel.WindowOptions.TabBarWidth">
            <summary>
            Gets or sets the width of the worksheet tab bar, expressed in 1/1000ths of the application width.
            </summary>
            <remarks>
            <p class="body">
            This value is only used if <see cref="P:Infragistics.Excel.WindowOptions.TabBarVisible"/> is True. Regardless of whether the tab bar is 
            visible, the width value is always saved with the workbook.
            </p>
            <p class="body">
            A value of 1000 indicates the worksheet tab bar occupies the entire width of the application, while
            a value of 0 indicates the worksheet tab bar has no width.
            </p>
            <p class="body">
            All space not occupied by the worksheet tab bar will be used by the horizontal scroll bar, if it is visible.
            </p>
            </remarks>
            <exception cref="T:System.ArgumentOutOfRangeException">
            The value assigned is outside the valid range of 0 and 1000.
            </exception>
            <value>The width of the worksheet tab bar, expressed in 1/1000ths of the application width.</value>
            <seealso cref="P:Infragistics.Excel.WindowOptions.TabBarVisible"/>
            <seealso cref="P:ScrollBars"/>
            <seealso cref="P:Infragistics.Excel.WorkbookWindowOptions.FirstVisibleTabIndex"/>
        </member>
        <member name="M:Infragistics.Excel.CustomViewWindowOptions.Reset">
            <summary>
            Resets the window options to their default settings.
            </summary>
            <remarks>
            <p class="body">
            The defaults used for each setting are the same defaults with which Microsoft Excel creates a blank workbook.
            </p>
            </remarks>
        </member>
        <member name="P:Infragistics.Excel.CustomViewWindowOptions.BoundsInPixels">
            <summary>
            Gets or sets the pixel bounds of the workbook's MDI child window when <see cref="T:Infragistics.Excel.CustomView"/> 
            owning these window options is applied.
            </summary>
            <remarks>
            <p class="note">
            <b>Note:</b> This property will have no affect on the workbook if <see cref="P:Infragistics.Excel.CustomViewWindowOptions.Maximized"/> is True. However, in this case,
            the value of this property will still be saved with the workbook.
            </p>
            <p class="note">
            <b>Note:</b> This setting cannot be saved with a <see cref="T:Workbook"/> in the Excel file. It can only be saved
            with a CustomView. Therefore, there is no corresponding property in <see cref="T:Infragistics.Excel.WorkbookWindowOptions"/> and
            calling <see cref="T:CustomView.Apply"/> on the associated CustomView will not apply this property. Only by 
            applying the custom view through the Microsoft Excel user interface will the setting on this property be applied.
            </p>
            </remarks>
            <exception cref="T:System.ArgumentException">
            The left or top of the value assigned is outside the bounds of -32768 and 32767.
            </exception>
            <exception cref="T:System.ArgumentException">
            The width or height of the value assigned is outside the bounds of 0 and 65535.
            </exception>
            <value>
            The pixel bounds of the workbook's MDI child window when CustomView owning these 
            window options is applied.
            </value>
            <seealso cref="M:Infragistics.Excel.CustomView.Apply"/>
        </member>
        <member name="P:Infragistics.Excel.CustomViewWindowOptions.Maximized">
            <summary>
            Gets or sets the value indicating whether the workbook's MDI child window will be maximized
            when the <see cref="T:Infragistics.Excel.CustomView"/> owning these window options is applied.
            </summary>
            <remarks>
            <p class="note">
            <b>Note:</b> This setting cannot be saved with a <see cref="T:Workbook"/> in the Excel file. It can only be saved
            with a CustomView. Therefore, there is no corresponding property in <see cref="T:Infragistics.Excel.WorkbookWindowOptions"/> and
            calling <see cref="T:CustomView.Apply"/> on the associated CustomView will not apply this property. Only by 
            applying the custom view through the Microsoft Excel user interface will the setting on this property be applied.
            </p>
            </remarks>
            <value>
            The value indicating whether the workbook's MDI child window will be maximized when the CustomView owning these 
            window options is applied.
            </value>
            <seealso cref="M:Infragistics.Excel.CustomView.Apply"/>
            <seealso cref="P:Infragistics.Excel.WorkbookWindowOptions.Minimized"/>
        </member>
        <member name="P:Infragistics.Excel.CustomViewWindowOptions.ShowFormulaBar">
            <summary>
            Gets or sets the value indicating whether Microsoft Excel will display the formula bar when
            the <see cref="T:Infragistics.Excel.CustomView"/> owning these window options is applied.
            </summary>
            <remarks>
            <p class="note">
            <b>Note:</b> This setting cannot be saved with a <see cref="T:Workbook"/> in the Excel file. It can only be saved
            with a CustomView. Therefore, there is no corresponding property in <see cref="T:Infragistics.Excel.WorkbookWindowOptions"/> and
            calling <see cref="M:Infragistics.Excel.CustomView.Apply"/> on the associated CustomView will not apply this property. Only by 
            applying the custom view through the Microsoft Excel user interface will the setting on this property be applied.
            </p>
            </remarks>
            <value>
            The value indicating whether Microsoft Excel will display the formula bar when the CustomView owning these window 
            options is applied.
            </value>
            <seealso cref="M:Infragistics.Excel.CustomView.Apply"/>
        </member>
        <member name="P:Infragistics.Excel.CustomViewWindowOptions.ShowStatusBar">
            <summary>
            Gets or sets the value indicating whether Microsoft Excel will display the status bar when
            the <see cref="T:Infragistics.Excel.CustomView"/> owning these window options is applied.
            </summary>
            <remarks>
            <p class="note">
            <b>Note:</b> This setting cannot be saved with a <see cref="T:Workbook"/> in the Excel file. It can only be saved
            with a CustomView. Therefore, there is no corresponding property in <see cref="T:Infragistics.Excel.WorkbookWindowOptions"/> and
            calling <see cref="T:CustomView.Apply"/> on the associated CustomView will not apply this property. Only by 
            applying the custom view through the Microsoft Excel user interface will the setting on this property be applied.
            </p>
            </remarks>
            <value>
            The value indicating whether Microsoft Excel will display the status bar when the CustomView owning these window 
            options is applied.
            </value>
            <seealso cref="M:Infragistics.Excel.CustomView.Apply"/>
        </member>
        <member name="T:Infragistics.Excel.ErrorValue">
            <summary>
            Represents an error value in Microsoft Excel.
            </summary>
        </member>
        <member name="M:Infragistics.Excel.ErrorValue.ToString">
            <summary>
            Gets the string representation of the error value.
            </summary>
            <returns>The string representation of the error value.</returns>
        </member>
        <member name="P:Infragistics.Excel.ErrorValue.ArgumentOrFunctionNotAvailable">
            <summary>
            Gets the ErrorValue representing the #N/A error.
            </summary>
            <remarks>
            <p class="body">
            This error occurs when a value isn't available for some part of a formula.
            </p>
            </remarks>
            <value>The ErrorValue representing the #N/A error.</value>
        </member>
        <member name="P:Infragistics.Excel.ErrorValue.DivisionByZero">
            <summary>
            Gets the ErrorValue representing the #DIV/0! error.
            </summary>
            <remarks>
            <p class="body">
            This error occurs when a number is divided by zero.
            </p>
            </remarks>
            <value>The ErrorValue representing the #DIV/0! error.</value>
        </member>
        <member name="P:Infragistics.Excel.ErrorValue.EmptyCellRangeIntersection">
            <summary>
            Gets the ErrorValue representing the #NULL! error.
            </summary>
            <remarks>
            <p class="body">
            This error occurs when there is an intersection of two references that do not contain any common cells.
            The intersection operator is a space between two references.
            </p>
            </remarks>
            <value>The ErrorValue representing the #NULL! error.</value>
        </member>
        <member name="P:Infragistics.Excel.ErrorValue.InvalidCellReference">
            <summary>
            Gets the ErrorValue representing the #REF! error.
            </summary>
            <remarks>
            <p class="body">
            This error occurs when a cell reference or cell range reference is not valid.
            </p>
            </remarks>
            <value>The ErrorValue representing the #REF! error.</value>
        </member>
        <member name="P:Infragistics.Excel.ErrorValue.ValueRangeOverflow">
            <summary>
            Gets the ErrorValue representing the #NUM! error.
            </summary>
            <remarks>
            <p class="body">
            This error occurs when there are invalid numeric values in a formula.
            </p>
            </remarks>
            <value>The ErrorValue representing the #NUM! error.</value>
        </member>
        <member name="P:Infragistics.Excel.ErrorValue.WrongFunctionName">
            <summary>
            Gets the ErrorValue representing the #NAME? error.
            </summary>
            <remarks>
            <p class="body">
            This error occurs when text in a formula is not recognized.
            </p>
            </remarks>
            <value>The ErrorValue representing the #NAME? error.</value>
        </member>
        <member name="P:Infragistics.Excel.ErrorValue.WrongOperandType">
            <summary>
            Gets the ErrorValue representing the #VALUE! error.
            </summary>
            <remarks>
            <p class="body">
            This error occurs when an incorrect argument or operand is used in a function.
            </p>
            </remarks>
            <value>The ErrorValue representing the #VALUE! error.</value>
        </member>
        <member name="T:Infragistics.Excel.FormattedString">
            <summary>
            Represents a string with mixed formatting in a cell.
            </summary>
            <remarks>
            <p class="body">
            The formatting of the string is controlled in a similar fashion as it would be in Microsoft Excel. In Excel, the user
            must select a portion of the text and set the various formatting properties of that selected text. 
            </p>
            <p class="body">
            With the FormattedString, a portion of the string is "selected" by calling either <see cref="M:Infragistics.Excel.FormattedString.GetFont(System.Int32)"/> or 
            <see cref="M:Infragistics.Excel.FormattedString.GetFont(System.Int32,System.Int32)"/>. Formatting properties are then set on the returned <see cref="T:Infragistics.Excel.FormattedStringFont"/> 
            and all characters in the font's selection range are given these properties.
            </p>
            <p class="body">
            Getting the formatting properties of a <see cref="T:Infragistics.Excel.FormattedStringFont"/> will return the formatting of the first 
            character in font's selection range. This is similar to Excel, which will update the formatting interface to 
            reflect the formatting of the first character in a selection range when a cell's text is selected.
            </p>
            </remarks>
        </member>
        <member name="M:Infragistics.Excel.FormattedString.#ctor(System.String)">
            <summary>
            Creates a new instance of the <see cref="T:Infragistics.Excel.FormattedString"/> class.
            </summary>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="unformattedString"/> is null.
            </exception>
            <param name="unformattedString">The string that will be displayed in the cell with the formatting.</param>
        </member>
        <member name="M:Infragistics.Excel.FormattedString.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:System.Object"/> is equal to this <see cref="T:Infragistics.Excel.FormattedString"/>.
            </summary>
            <param name="obj">The value to test for equality to this FormattedString.</param>
            <returns>
            True if the <paramref name="obj"/> is a FormattedString instance and it contains the same unformatted 
            string and formatting as this FormattedString; False otherwise.
            </returns>
        </member>
        <member name="M:Infragistics.Excel.FormattedString.GetHashCode">
            <summary>
            Calculates the has code for this <see cref="T:Infragistics.Excel.FormattedString"/>.
            </summary>
            <returns>A number which can be used in hashing functions.</returns>
        </member>
        <member name="M:Infragistics.Excel.FormattedString.ToString">
            <summary>
            Returns the <see cref="T:System.String"/> that represents this <see cref="T:Infragistics.Excel.FormattedString"/>.
            This is just the unformatted string.
            </summary>
            <remarks>
            <p class="body">
            This will return the same value as <see cref="P:Infragistics.Excel.FormattedString.UnformattedString"/>.
            </p>
            </remarks>
            <returns>The String that represents this FormattedString.</returns>
        </member>
        <member name="M:Infragistics.Excel.FormattedString.Clone">
            <summary>
            Creates a new <see cref="T:Infragistics.Excel.FormattedString"/> that is a copy of this one.
            </summary>
            <remarks>
            <p class="body">
            This should be used if the same formatted string needs to be used in multiple cells.
            The FormattedString class can only exist as the <see cref="P:Infragistics.Excel.WorksheetCell.Value"/>
            of one cell at a time. If the FormattedString is already the value of a cell, and needs
            to be set as the value of another cell, clone the FormattedString and set the returned
            clone as value of the cell.
            </p>
            <p class="body">
            The cloned FormattedString only takes its original configuration for this instance.
            If this instance is cloned and than changed, the clone will not be changed as well; it will
            remain as it was when it was cloned.
            </p>
            </remarks>
            <returns>A new FormattedString that is a copy of this one.</returns>
        </member>
        <member name="M:Infragistics.Excel.FormattedString.GetFont(System.Int32)">
            <summary>
            Gets the font which controls the formatting properties in the string from the specified start index to 
            the end of the string.
            </summary>
            <remarks>
            <p class="body">
            If the start index is greater than or equal to the length of the unformatted string, no exception 
            will be thrown. It will be thrown later when one of the formatting properties of the returned
            <see cref="T:Infragistics.Excel.FormattedStringFont"/> is set.
            </p>
            </remarks>
            <param name="startIndex">The index of the first character the returned font controls.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <paramref name="startIndex"/> is less than zero.
            </exception>
            <returns>
            A FormattedStringFont instance which controls the formatting of the end portion of the string.
            </returns>
        </member>
        <member name="M:Infragistics.Excel.FormattedString.GetFont(System.Int32,System.Int32)">
            <summary>
            Gets the font which controls the formatting properties in the string from the specified start index for
            the specified number of characters.
            </summary>
            <remarks>
            <p class="body">
            If the start index is greater than or equal to the length of the unformatted string, no exception 
            will be thrown. It will be thrown later when one of the formatting properties of the returned
            <see cref="T:Infragistics.Excel.FormattedStringFont"/> is set.
            </p>
            </remarks>
            <param name="startIndex">The index of the first character the returned font controls.</param>
            <param name="length">The number of characters after the start index controlled by the returned font.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <paramref name="startIndex"/> is less than zero.
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <paramref name="length"/> is less than one. A zero length string cannot be controlled by a formatting font.
            </exception>
            <returns>
            A FormattedStringFont instance which controls the formatting of a portion of the string.
            </returns>
        </member>
        <member name="P:Infragistics.Excel.FormattedString.UnformattedString">
            <summary>
            Gets or sets the unformatted string.
            </summary>
            <remarks>
            <p class="body">
            If the new unformatted string assigned is shorter than the old unformatted string, all formatting
            outside the range of the new value will be lost.
            </p>
            </remarks>
            <exception cref="T:System.ArgumentNullException">
            The value assigned is a null string.
            </exception>
            <value>The unformatted string.</value>
        </member>
        <member name="T:Infragistics.Excel.FormattedStringFont">
            <summary>
            Controls the formatting of a range of characters in a <see cref="P:Infragistics.Excel.FormattedStringFont.FormattedString"/>.
            </summary>
            <remarks>
            <p class="body">
            The formatting of the string is controlled in a similar fashion as it would be in Microsoft Excel. In Excel, the user
            must select a portion of the text and set the various formatting properties of that selected text. 
            </p>
            <p class="body">
            With the <see cref="P:Infragistics.Excel.FormattedStringFont.FormattedString"/>, a portion of the string is "selected" by calling either 
            <see cref="M:FormattedString.GetFont(int)"/> or <see cref="M:FormattedString.GetFont(int,int)"/>. Formatting properties 
            are then set on the returned FormattedStringFont and all characters in the font's selection range are given these 
            properties.
            </p>
            <p class="body">
            Getting the formatting properties of a FormattedStringFont will return the formatting of the first character in font's 
            selection range. This is similar to Excel, which will update the formatting interface to reflect the formatting of the 
            first character in a selection range when a cell's text is selected.
            </p>
            </remarks>
            <seealso cref="T:FormattedString"/>
            <seealso cref="M:FormattedString.GetFont(int)"/>
            <seealso cref="M:FormattedString.GetFont(int,int)"/>
        </member>
        <member name="T:Infragistics.Excel.IWorkbookFont">
            <summary>
            Represents a font for the cell in the related context.
            </summary>
            <remarks>
            <p class="body">
            If a property of a font has a default value, value of the previous font in resolution chain is used. The resolution priority 
            is the following: 
            <list type="number">
            <item>Cell (highest priority)</item>
            <item>Row</item>
            <item>Column</item>
            <item>Default Cell Format (lowest priority)</item>
            </list>
            For example, if a column font is set to blue and bold and a row font is set to italic and not bold, the font in the cell at 
            the intersection of the row and column would have blue, italic text in the saved workbook.
            </p>
            </remarks>
        </member>
        <member name="M:Infragistics.Excel.IWorkbookFont.SetFontFormatting(Infragistics.Excel.IWorkbookFont)">
            <summary>
            Sets all font properties to specific font formatting.
            </summary>
            <param name="source">Source font format.</param>
        </member>
        <member name="P:Infragistics.Excel.IWorkbookFont.Bold">
            <summary>
            Gets or sets the value which indicates whether the font is bold.
            </summary>
            <exception cref="T:System.ComponentModel.InvalidEnumArgumentException">
            The value assigned is not defined in the <see cref="T:Infragistics.Excel.ExcelDefaultableBoolean"/> enumeration.
            </exception>
            <value>The value which indicates whether the font is bold.</value>
        </member>
        <member name="P:Infragistics.Excel.IWorkbookFont.Color">
            <summary>
            Gets or sets the foreground color of the font.
            </summary>
            <value>The foreground color of the font.</value>
        </member>
        <member name="P:Infragistics.Excel.IWorkbookFont.Height">
            <summary>
            Gets or sets the font height in twips (1/20th of a point).
            </summary>
            <remarks>
            <p class="body">
            A negative value indicates the default font height, in which case the <see cref="P:Infragistics.Excel.Workbook.DefaultFontHeight"/> is used.
            </p>
            </remarks>
            <exception cref="T:System.ArgumentOutOfRangeException">
            The value assigned is positive and outside the valid font height range of 20 and 8180.
            </exception>
            <value>The font height in twips (1/20th of a point).</value>
        </member>
        <member name="P:Infragistics.Excel.IWorkbookFont.Italic">
            <summary>
            Gets or sets the value which indicates whether the font is italic.
            </summary>
            <exception cref="T:System.ComponentModel.InvalidEnumArgumentException">
            The value assigned is not defined in the <see cref="T:Infragistics.Excel.ExcelDefaultableBoolean"/> enumeration.
            </exception>
            <value>The value which indicates whether the font is italic.</value>
        </member>
        <member name="P:Infragistics.Excel.IWorkbookFont.Name">
            <summary>
            Gets or sets the font family name.
            </summary>
            <value>The font family name.</value>
        </member>
        <member name="P:Infragistics.Excel.IWorkbookFont.Strikeout">
            <summary>
            Gets or sets the value which indicates whether the font is struck out.
            </summary>
            <exception cref="T:System.ComponentModel.InvalidEnumArgumentException">
            The value assigned is not defined in the <see cref="T:Infragistics.Excel.ExcelDefaultableBoolean"/> enumeration.
            </exception>
            <value>The value which indicates whether the font is struck out.</value>
        </member>
        <member name="P:Infragistics.Excel.IWorkbookFont.SuperscriptSubscriptStyle">
            <summary>
            Gets or sets the value which indicates whether the font is superscript or subscript.
            </summary>
            <exception cref="T:System.ComponentModel.InvalidEnumArgumentException">
            The value assigned is not defined in the <see cref="T:Infragistics.Excel.FontSuperscriptSubscriptStyle"/> enumeration.
            </exception>
            <value>The value which indicates whether the font is superscript or subscript.</value>
        </member>
        <member name="P:Infragistics.Excel.IWorkbookFont.UnderlineStyle">
            <summary>
            Gets or sets the underline style of the font.
            </summary>
            <exception cref="T:System.ComponentModel.InvalidEnumArgumentException">
            The value assigned is not defined in the <see cref="T:Infragistics.Excel.FontUnderlineStyle"/> enumeration.
            </exception>
            <value>The underline style of the font.</value>
        </member>
        <member name="M:Infragistics.Excel.FormattedStringFont.SetFontFormatting(Infragistics.Excel.IWorkbookFont)">
            <summary>
            Sets all properties of this font to the properties of the specified font.
            </summary>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="source"/> is null.
            </exception>
            <exception cref="T:System.InvalidOperationException">
            The <see cref="T:FormattedString"/> associated with the font is not the value of a <see cref="T:Infragistics.Excel.WorksheetCell"/>.
            </exception>
            <exception cref="T:System.InvalidOperationException">
            The font's selection range is outside the valid character range of the associated FormattedString.
            </exception>
            <param name="source">The font whose properties should be copied over to this font.</param>
        </member>
        <member name="P:Infragistics.Excel.FormattedStringFont.Bold">
            <summary>
            Gets or sets the value indicating whether the font is bold.
            </summary>
            <remarks>
            <p class="body">
            All characters in the selection range of this font will be affected by setting this property.
            Getting this property will return a value which indicates the formatting of the first character
            in this font's range.
            </p>
            </remarks>
            <exception cref="T:System.ComponentModel.InvalidEnumArgumentException">
            The value assigned is not defined in the <see cref="T:Infragistics.Excel.ExcelDefaultableBoolean"/> enumeration.
            </exception>
            <exception cref="T:System.InvalidOperationException">
            The <see cref="T:FormattedString"/> associated with the font is not the value of a <see cref="T:Infragistics.Excel.WorksheetCell"/>.
            </exception>
            <exception cref="T:System.InvalidOperationException">
            This font's selection range is outside the valid character range of the associated FormattedString.
            </exception>
            <value>The value indicating whether the font is bold.</value>
        </member>
        <member name="P:Infragistics.Excel.FormattedStringFont.Color">
            <summary>
            Gets or sets the fore color of the font.
            </summary>
            <remarks>
            <p class="body">
            All characters in the selection range of this font will be affected by setting this property.
            Getting this property will return a value which indicates the formatting of the first character
            in this font's range.
            </p>
            </remarks>
            <exception cref="T:System.InvalidOperationException">
            The <see cref="T:FormattedString"/> associated with the font is not the value of a <see cref="T:Infragistics.Excel.WorksheetCell"/>.
            </exception>
            <exception cref="T:System.InvalidOperationException">
            This font's selection range is outside the valid character range of the associated FormattedString.
            </exception>
            <value>The fore color of the font.</value>
        </member>
        <member name="P:Infragistics.Excel.FormattedStringFont.FormattedString">
            <summary>
            Gets the formatted string which is controlled by this font.
            </summary>
            <value>The formatted string which is controlled by this font.</value>
        </member>
        <member name="P:Infragistics.Excel.FormattedStringFont.Height">
            <summary>
            Gets or sets the height of the font.
            </summary>
            <remarks>
            <p class="body">
            All characters in the selection range of this font will be affected by setting this property.
            Getting this property will return a value which indicates the formatting of the first character
            in this font's range.
            </p>
            </remarks>
            <exception cref="T:System.ArgumentOutOfRangeException">
            The value assigned is positive and outside the valid font height range of 20 and 8180.
            </exception>
            <exception cref="T:System.InvalidOperationException">
            The <see cref="T:FormattedString"/> associated with font is not the value of a <see cref="T:Infragistics.Excel.WorksheetCell"/>.
            </exception>
            <exception cref="T:System.InvalidOperationException">
            This font's selection range is outside the valid character range of the associated FormattedString.
            </exception>
            <value>The height of the font.</value>
        </member>
        <member name="P:Infragistics.Excel.FormattedStringFont.Italic">
            <summary>
            Gets or sets the value indicating whether the font is italic.
            </summary>
            <remarks>
            <p class="body">
            All characters in the selection range of this font will be affected by setting this property.
            Getting this property will return a value which indicates the formatting of the first character
            in this font's range.
            </p>
            </remarks>
            <exception cref="T:System.ComponentModel.InvalidEnumArgumentException">
            The value assigned is not defined in the <see cref="T:Infragistics.Excel.ExcelDefaultableBoolean"/> enumeration.
            </exception>
            <exception cref="T:System.InvalidOperationException">
            The <see cref="T:FormattedString"/> associated with the font is not the value of a <see cref="T:Infragistics.Excel.WorksheetCell"/>.
            </exception>
            <exception cref="T:System.InvalidOperationException">
            This font's selection range is outside the valid character range of the associated FormattedString.
            </exception>
            <value>The value indicating whether the font is italic.</value>
        </member>
        <member name="P:Infragistics.Excel.FormattedStringFont.Length">
            <summary>
            Gets the number of characters covered by this font. Zero indicates the font controls from 
            the <see cref="P:Infragistics.Excel.FormattedStringFont.StartIndex"/> to the end of the string.
            </summary>
            <value>
            The number of characters covered by this font. Zero indicates the font controls from the 
            StartIndex to the end of the string.
            </value>
        </member>
        <member name="P:Infragistics.Excel.FormattedStringFont.Name">
            <summary>
            Gets or sets the name of the font.
            </summary>
            <remarks>
            <p class="body">
            All characters in the selection range of this font will be affected by setting this property.
            Getting this property will return a value which indicates the formatting of the first character
            in this font's range.
            </p>
            </remarks>
            <exception cref="T:System.InvalidOperationException">
            The <see cref="T:FormattedString"/> associated with the font is not the value of a <see cref="T:Infragistics.Excel.WorksheetCell"/>.
            </exception>
            <exception cref="T:System.InvalidOperationException">
            This font's selection range is outside the valid character range of the associated FormattedString.
            </exception>
            <value>The name of the font.</value>
        </member>
        <member name="P:Infragistics.Excel.FormattedStringFont.StartIndex">
            <summary>
            Gets the index of the first character covered by this font.
            </summary>
            <value>The index of the first character covered by this font.</value>
        </member>
        <member name="P:Infragistics.Excel.FormattedStringFont.Strikeout">
            <summary>
            Gets or sets the value indicating whether the font is struck out.
            </summary>
            <remarks>
            <p class="body">
            All characters in the selection range of this font will be affected by setting this property.
            Getting this property will return a value which indicates the formatting of the first character
            in this font's range.
            </p>
            </remarks>
            <exception cref="T:System.ComponentModel.InvalidEnumArgumentException">
            The value assigned is not defined in the <see cref="T:Infragistics.Excel.ExcelDefaultableBoolean"/> enumeration.
            </exception>
            <exception cref="T:System.InvalidOperationException">
            The <see cref="T:FormattedString"/> associated with the font is not the value of a <see cref="T:Infragistics.Excel.WorksheetCell"/>.
            </exception>
            <exception cref="T:System.InvalidOperationException">
            This font's selection range is outside the valid character range of the associated FormattedString.
            </exception>
            <value>The value indicating whether the font is struck out.</value>
        </member>
        <member name="P:Infragistics.Excel.FormattedStringFont.SuperscriptSubscriptStyle">
            <summary>
            Gets or sets the value indicating whether the font is superscript or subscript.
            </summary>
            <remarks>
            <p class="body">
            All characters in the selection range of this font will be affected by setting this property.
            Getting this property will return a value which indicates the formatting of the first character
            in this font's range.
            </p>
            </remarks>
            <exception cref="T:System.ComponentModel.InvalidEnumArgumentException">
            The value assigned is not defined in the <see cref="T:Infragistics.Excel.FontSuperscriptSubscriptStyle"/> enumeration.
            </exception>
            <exception cref="T:System.InvalidOperationException">
            The <see cref="T:FormattedString"/> associated with the font is not the value of a <see cref="T:Infragistics.Excel.WorksheetCell"/>.
            </exception>
            <exception cref="T:System.InvalidOperationException">
            This font's selection range is outside the valid character range of the associated FormattedString.
            </exception>
            <value>The value indicating whether the font is superscript or subscript.</value>
        </member>
        <member name="P:Infragistics.Excel.FormattedStringFont.UnderlineStyle">
            <summary>
            Gets or sets the underline style of the font.
            </summary>
            <remarks>
            <p class="body">
            All characters in the selection range of this font will be affected by setting this property.
            Getting this property will return a value which indicates the formatting of the first character
            in this font's range.
            </p>
            </remarks>
            <exception cref="T:System.ComponentModel.InvalidEnumArgumentException">
            The value assigned is not defined in the <see cref="T:Infragistics.Excel.FontUnderlineStyle"/> enumeration.
            </exception>
            <exception cref="T:System.InvalidOperationException">
            The <see cref="T:FormattedString"/> associated with the font is not the value of a <see cref="T:Infragistics.Excel.WorksheetCell"/>.
            </exception>
            <exception cref="T:System.InvalidOperationException">
            This font's selection range is outside the valid character range of the associated FormattedString.
            </exception>
            <value>The underline style of the font.</value>
        </member>
        <member name="T:Infragistics.Excel.HiddenColumnCollection">
            <summary>
            A collection of hidden <see cref="T:Infragistics.Excel.WorksheetColumn"/> instances.
            </summary>
            <remarks>
            <p class="body">
            The columns in this collection do not necessarily have their <see cref="P:Infragistics.Excel.RowColumnBase.Hidden"/> property
            set to True. This collection applies to a <see cref="P:Infragistics.Excel.HiddenColumnCollection.Worksheet"/>, but belongs to a <see cref="T:Infragistics.Excel.CustomView"/>.
            When the CustomView which owns this collection is applied, the columns in this collection will have their
            <see cref="P:Infragistics.Excel.RowColumnBase.Hidden"/> property set to True. All other columns in the associated worksheet will
            be made visible.
            </p>
            </remarks>
            <seealso cref="M:Infragistics.Excel.CustomView.GetHiddenColumns(Infragistics.Excel.Worksheet)"/>
        </member>
        <member name="M:Infragistics.Excel.HiddenColumnCollection.Add(Infragistics.Excel.WorksheetColumn)">
            <summary>
            Adds a column to the collection.
            </summary>
            <remarks>
            <p class="body">
            This collection does not allow duplicate values. If the specified column already exists in the collection,
            nothing will happen. This collection also keeps itself sorted, so the column added will not necessarily be
            added at the end of the collection.
            </p>
            </remarks>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="column"/> is null.
            </exception>
            <exception cref="T:System.ArgumentException">
            <paramref name="column"/> does not belong to the same worksheet this collection is associated with.
            </exception>
            <param name="column">The column to be added to the hidden columns collection.</param>
        </member>
        <member name="M:Infragistics.Excel.HiddenColumnCollection.Clear">
            <summary>
            Clears all columns from the collection.
            </summary>
        </member>
        <member name="M:Infragistics.Excel.HiddenColumnCollection.Contains(Infragistics.Excel.WorksheetColumn)">
            <summary>
            Determines whether the specified column exists in the collection.
            </summary>
            <param name="column">The column to search for in the collection.</param>
            <returns>
            True if the column exists in the collection; False otherwise or if the specified column is null.
            </returns>
        </member>
        <member name="M:Infragistics.Excel.HiddenColumnCollection.Remove(Infragistics.Excel.WorksheetColumn)">
            <summary>
            Removes the specified column from the collection if it exists.
            </summary>
            <param name="column">The column to removed from the collection.</param>
            <returns>
            True if the column existed in the collection and was removed; False otherwise or if the 
            specified column is null.
            </returns>
        </member>
        <member name="M:Infragistics.Excel.HiddenColumnCollection.RemoveAt(System.Int32)">
            <summary>
            Removes the column at the specified index in the collection.
            </summary>
            <param name="index">The zero-based index of the column in the collection.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <paramref name="index"/> is less than zero or <paramref name="index"/> is greater than or 
            equal to <see cref="P:Infragistics.Excel.HiddenColumnCollection.Count"/>.
            </exception>
        </member>
        <member name="P:Infragistics.Excel.HiddenColumnCollection.Count">
            <summary>
            Gets the number of columns in the collection.
            </summary>
            <value>The number of columns in the collection.</value>
        </member>
        <member name="P:Infragistics.Excel.HiddenColumnCollection.Item(System.Int32)">
            <summary>
            Gets the column at the specified index.
            </summary>
            <param name="index">The zero-based index of the column to get.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <paramref name="index"/> is less than zero or <paramref name="index"/> is greater than or 
            equal to <see cref="P:Infragistics.Excel.HiddenColumnCollection.Count"/>.
            </exception>
            <value>The column at the specified index.</value>
        </member>
        <member name="P:Infragistics.Excel.HiddenColumnCollection.Worksheet">
            <summary>
            Gets the worksheet associated with this collection.
            </summary>
            <value>The worksheet associated with this collection.</value>
        </member>
        <member name="T:Infragistics.Excel.HiddenRowCollection">
            <summary>
            A collection of hidden <see cref="T:Infragistics.Excel.WorksheetRow"/> instances.
            </summary>
            <remarks>
            <p class="body">
            The rows in this collection do not necessarily have their <see cref="P:Infragistics.Excel.RowColumnBase.Hidden"/> property
            set to True. This collection applies to a <see cref="P:Infragistics.Excel.HiddenRowCollection.Worksheet"/>, but belongs to a <see cref="T:Infragistics.Excel.CustomView"/>.
            When the CustomView which owns this collection is applied, the rows in this collection will have their
            <see cref="P:Infragistics.Excel.RowColumnBase.Hidden"/> property set to True. All other rows in the associated worksheet will
            be made visible.
            </p>
            </remarks>
            <seealso cref="M:Infragistics.Excel.CustomView.GetHiddenRows(Infragistics.Excel.Worksheet)"/>
        </member>
        <member name="M:Infragistics.Excel.HiddenRowCollection.Add(Infragistics.Excel.WorksheetRow)">
            <summary>
            Adds a row to the collection.
            </summary>
            <remarks>
            <p class="body">
            This collection does not allow duplicate values. If the specified row already exists in the collection,
            nothing will happen. This collection also keeps itself sorted, so the row added will not necessarily be
            added at the end of the collection.
            </p>
            </remarks>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="row"/> is null.
            </exception>
            <exception cref="T:System.ArgumentException">
            <paramref name="row"/> does not belong to the same worksheet this collection is associated with.
            </exception>
            <param name="row">The row to be added to the hidden rows collection.</param>
        </member>
        <member name="M:Infragistics.Excel.HiddenRowCollection.Clear">
            <summary>
            Clears all rows from the collection.
            </summary>
        </member>
        <member name="M:Infragistics.Excel.HiddenRowCollection.Contains(Infragistics.Excel.WorksheetRow)">
            <summary>
            Determines whether the specified row exists in the collection.
            </summary>
            <param name="row">The row to search for in the collection.</param>
            <returns>
            True if the row exists in the collection; False otherwise or if the specified row is null.
            </returns>
        </member>
        <member name="M:Infragistics.Excel.HiddenRowCollection.Remove(Infragistics.Excel.WorksheetRow)">
            <summary>
            Removes the specified row from the collection if it exists.
            </summary>
            <param name="row">The row to removed from the collection.</param>
            <returns>
            True if the row existed in the collection and was removed; False otherwise or if the 
            specified row is null.
            </returns>
        </member>
        <member name="M:Infragistics.Excel.HiddenRowCollection.RemoveAt(System.Int32)">
            <summary>
            Removes the row at the specified index in the collection.
            </summary>
            <param name="index">The zero-based index of the row in the collection.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <paramref name="index"/> is less than zero or <paramref name="index"/> is greater than or 
            equal to <see cref="P:Infragistics.Excel.HiddenRowCollection.Count"/>.
            </exception>
        </member>
        <member name="P:Infragistics.Excel.HiddenRowCollection.Count">
            <summary>
            Gets the number of rows in the collection.
            </summary>
            <value>The number of rows in the collection.</value>
        </member>
        <member name="P:Infragistics.Excel.HiddenRowCollection.Item(System.Int32)">
            <summary>
            Gets the row at the specified index.
            </summary>
            <param name="index">The zero-based index of the row to get.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <paramref name="index"/> is less than zero or <paramref name="index"/> is greater than or 
            equal to <see cref="P:Infragistics.Excel.HiddenRowCollection.Count"/>.
            </exception>
            <value>The row at the specified index.</value>
        </member>
        <member name="P:Infragistics.Excel.HiddenRowCollection.Worksheet">
            <summary>
            Gets the worksheet associated with this collection.
            </summary>
            <value>The worksheet associated with this collection.</value>
        </member>
        <member name="T:Infragistics.Excel.IWorksheetCellFormat">
            <summary>
            Represents the format for the cell in the related context.
            </summary>
            <remarks>
            <p class="body">
            Cell formatting is associated with each cell, row, and column in a Worksheet. If a property of the cell format has a default 
            value, the value of the previous format in resolution chain is used. The resolution priority is the following: 
            <list type="number">
            <item>Cell (highest priority)</item>
            <item>Row</item>
            <item>Column</item>
            <item>Default Cell Format (lowest priority)</item>
            </list>
            For example, if a row format background color is blue, a column format background color is red, and a cell with the 
            default background color (Color.Empty) is at the intersection of the row and column, it will have a blue color in exported 
            file (as the row has a higher priority than the column). The Resolution process is done internally during exporting process, 
            which means that cell format background color is always default if not explicitly set.
            </p>
            </remarks>
        </member>
        <member name="M:Infragistics.Excel.IWorksheetCellFormat.SetFormatting(Infragistics.Excel.IWorksheetCellFormat)">
            <summary>
            Copies all cell format properties to from the specified cell format.
            </summary>
            <param name="source">The cell format from which to copy the properties.</param>
        </member>
        <member name="P:Infragistics.Excel.IWorksheetCellFormat.Alignment">
            <summary>
            Gets or sets the horizontal alignment of the content in a cell.
            </summary>
            <exception cref="T:System.ComponentModel.InvalidEnumArgumentException">
            The value assigned is not defined in the <see cref="T:Infragistics.Excel.HorizontalCellAlignment"/> enumeration.
            </exception>
            <value>The horizontal alignment of the content in a cell.</value>
            <seealso cref="P:Infragistics.Excel.IWorksheetCellFormat.VerticalAlignment"/>
        </member>
        <member name="P:Infragistics.Excel.IWorksheetCellFormat.BottomBorderColor">
            <summary>
            Gets or sets the bottom border color.
            </summary>
            <remarks>
            <p class="body">
            If the border color is set to a non-default value and the <see cref="P:Infragistics.Excel.IWorksheetCellFormat.BottomBorderStyle"/> is set to Default, 
            it will be resolved to Thin.
            </p>
            </remarks>
            <value>The bottom border color.</value>
            <seealso cref="P:Infragistics.Excel.IWorksheetCellFormat.BottomBorderStyle"/>
            <seealso cref="P:Infragistics.Excel.IWorksheetCellFormat.LeftBorderColor"/>
            <seealso cref="P:Infragistics.Excel.IWorksheetCellFormat.LeftBorderStyle"/>
            <seealso cref="P:Infragistics.Excel.IWorksheetCellFormat.RightBorderColor"/>
            <seealso cref="P:Infragistics.Excel.IWorksheetCellFormat.RightBorderStyle"/>
            <seealso cref="P:Infragistics.Excel.IWorksheetCellFormat.TopBorderColor"/>
            <seealso cref="P:Infragistics.Excel.IWorksheetCellFormat.TopBorderStyle"/>
        </member>
        <member name="P:Infragistics.Excel.IWorksheetCellFormat.BottomBorderStyle">
            <summary>
            Gets or sets the bottom border style.
            </summary>
            <remarks>
            <p class="body">
            If the border style is set to a non-default value and the <see cref="P:Infragistics.Excel.IWorksheetCellFormat.BottomBorderColor"/> is default (Color.Empty), 
            it will be resolved to Color.Black.
            </p>
            </remarks>
            <exception cref="T:System.ComponentModel.InvalidEnumArgumentException">
            The value assigned is not defined in the <see cref="T:Infragistics.Excel.CellBorderLineStyle"/> enumeration.
            </exception>
            <value>The bottom border style.</value>
            <seealso cref="P:Infragistics.Excel.IWorksheetCellFormat.BottomBorderColor"/>
            <seealso cref="P:Infragistics.Excel.IWorksheetCellFormat.LeftBorderColor"/>
            <seealso cref="P:Infragistics.Excel.IWorksheetCellFormat.LeftBorderStyle"/>
            <seealso cref="P:Infragistics.Excel.IWorksheetCellFormat.RightBorderColor"/>
            <seealso cref="P:Infragistics.Excel.IWorksheetCellFormat.RightBorderStyle"/>
            <seealso cref="P:Infragistics.Excel.IWorksheetCellFormat.TopBorderColor"/>
            <seealso cref="P:Infragistics.Excel.IWorksheetCellFormat.TopBorderStyle"/>
        </member>
        <member name="P:Infragistics.Excel.IWorksheetCellFormat.FillPattern">
            <summary>
            Gets or sets the fill pattern in the cell.
            </summary>
            <remarks>
            <p class="body">
            If fill pattern is set to Solid, the cell is filled using just the <see cref="P:Infragistics.Excel.IWorksheetCellFormat.FillPatternForegroundColor"/>. For all other patterns, 
            both FillPatternForegroundColor and <see cref="P:Infragistics.Excel.IWorksheetCellFormat.FillPatternBackgroundColor"/> are used.
            </p>
            </remarks>
            <exception cref="T:System.ComponentModel.InvalidEnumArgumentException">
            The value assigned is not defined in the <see cref="T:Infragistics.Excel.FillPatternStyle"/> enumeration.
            </exception>
            <value>The fill pattern in the cell.</value>
            <seealso cref="P:Infragistics.Excel.IWorksheetCellFormat.FillPatternForegroundColor"/>
            <seealso cref="P:Infragistics.Excel.IWorksheetCellFormat.FillPatternBackgroundColor"/>
        </member>
        <member name="P:Infragistics.Excel.IWorksheetCellFormat.FillPatternBackgroundColor">
            <summary>
            Gets or sets the background color of the fill pattern.
            </summary>
            <remarks>
            <p class="body">
            If the background color is set to a non-default value and <see cref="P:Infragistics.Excel.IWorksheetCellFormat.FillPattern"/> is set to Default, resolved fill pattern style is 
            Gray50percent.
            </p>
            </remarks>
            <value>The background color of the fill pattern.</value>
            <seealso cref="P:Infragistics.Excel.IWorksheetCellFormat.FillPattern"/>
            <seealso cref="P:Infragistics.Excel.IWorksheetCellFormat.FillPatternForegroundColor"/>
        </member>
        <member name="P:Infragistics.Excel.IWorksheetCellFormat.FillPatternForegroundColor">
            <summary>
            Gets or sets the foreground color of the fill pattern.
            </summary>
            <remarks>
            <p class="body">
            If the foreground color is set to a non-default value and <see cref="P:Infragistics.Excel.IWorksheetCellFormat.FillPattern"/> is set to Default, resolved fill pattern style is 
            Solid. There, a solid cell color can easily be applied by setting only the FillPatternForegroundColor.
            </p>
            </remarks>
            <value>The foreground color of the fill pattern.</value>
            <seealso cref="P:Infragistics.Excel.IWorksheetCellFormat.FillPattern"/>
            <seealso cref="P:Infragistics.Excel.IWorksheetCellFormat.FillPatternBackgroundColor"/>
        </member>
        <member name="P:Infragistics.Excel.IWorksheetCellFormat.Font">
            <summary>
            Gets or sets the default font formatting.
            </summary>
            <remarks>
            <p class="body">
            This font formatting is just the default font used in the cell. This can be overridden by strings on a character by character basis by
            using the <see cref="T:Infragistics.Excel.FormattedString"/> class.
            </p>
            </remarks>
            <value>The default font formatting.</value>
        </member>
        <member name="P:Infragistics.Excel.IWorksheetCellFormat.FormatString">
            <summary>
            Gets or sets the number format string.
            </summary>
            <remarks>
            <p class="body">For more information on excel format strings, consult Microsoft Excel help.</p>
            </remarks>
            <value>The number format string.</value>
        </member>
        <member name="P:Infragistics.Excel.IWorksheetCellFormat.Indent">
            <summary>
            Gets or sets the indent in units of average character widths.
            </summary>
            <exception cref="T:System.ArgumentOutOfRangeException">
            The assigned value is outside the valid indent level range of 0 and 15.
            </exception>
            <value>The indent in units of average character widths.</value>
        </member>
        <member name="P:Infragistics.Excel.IWorksheetCellFormat.LeftBorderColor">
            <summary>
            Gets or sets the left border color.
            </summary>
            <remarks>
            <p class="body">
            If the border color is set to a non-default value and the <see cref="P:Infragistics.Excel.IWorksheetCellFormat.LeftBorderStyle"/> is set to Default, 
            it will be resolved to Thin.
            </p>
            </remarks>
            <value>The left border color.</value>
            <seealso cref="P:Infragistics.Excel.IWorksheetCellFormat.BottomBorderColor"/>
            <seealso cref="P:Infragistics.Excel.IWorksheetCellFormat.BottomBorderStyle"/>
            <seealso cref="P:Infragistics.Excel.IWorksheetCellFormat.LeftBorderStyle"/>
            <seealso cref="P:Infragistics.Excel.IWorksheetCellFormat.RightBorderColor"/>
            <seealso cref="P:Infragistics.Excel.IWorksheetCellFormat.RightBorderStyle"/>
            <seealso cref="P:Infragistics.Excel.IWorksheetCellFormat.TopBorderColor"/>
            <seealso cref="P:Infragistics.Excel.IWorksheetCellFormat.TopBorderStyle"/>
        </member>
        <member name="P:Infragistics.Excel.IWorksheetCellFormat.LeftBorderStyle">
            <summary>
            Gets or sets the left border style.
            </summary>
            <remarks>
            <p class="body">
            If the border style is set to a non-default value and the <see cref="P:Infragistics.Excel.IWorksheetCellFormat.LeftBorderColor"/> is default (Color.Empty), 
            it will be resolved to Color.Black.
            </p>
            </remarks>
            <exception cref="T:System.ComponentModel.InvalidEnumArgumentException">
            The value assigned is not defined in the <see cref="T:Infragistics.Excel.CellBorderLineStyle"/> enumeration.
            </exception>
            <value>The left border style.</value>
            <seealso cref="P:Infragistics.Excel.IWorksheetCellFormat.BottomBorderColor"/>
            <seealso cref="P:Infragistics.Excel.IWorksheetCellFormat.BottomBorderStyle"/>
            <seealso cref="P:Infragistics.Excel.IWorksheetCellFormat.LeftBorderColor"/>
            <seealso cref="P:Infragistics.Excel.IWorksheetCellFormat.RightBorderColor"/>
            <seealso cref="P:Infragistics.Excel.IWorksheetCellFormat.RightBorderStyle"/>
            <seealso cref="P:Infragistics.Excel.IWorksheetCellFormat.TopBorderColor"/>
            <seealso cref="P:Infragistics.Excel.IWorksheetCellFormat.TopBorderStyle"/>
        </member>
        <member name="P:Infragistics.Excel.IWorksheetCellFormat.Locked">
            <summary>
            Gets or sets the valid which indicates whether the cell is locked in protected mode.
            </summary>
            <remarks>
            <p class="body">The Locked valid is used in Excel file only if the associated <see cref="T:Infragistics.Excel.Worksheet"/> or <see cref="T:Infragistics.Excel.Workbook"/> 
            is protected. Otherwise the value is ignored.
            </p>
            </remarks>
            <value>The valid which indicates whether the cell is locked in protected mode.</value>
            <seealso cref="P:Infragistics.Excel.Workbook.Protected"/>
        </member>
        <member name="P:Infragistics.Excel.IWorksheetCellFormat.RightBorderColor">
            <summary>
            Gets or sets the right border color.
            </summary>
            <remarks>
            <p class="body">
            If the border color is set to a non-default value and the <see cref="P:Infragistics.Excel.IWorksheetCellFormat.RightBorderStyle"/> is set to Default, 
            it will be resolved to Thin.
            </p>
            </remarks>
            <value>The right border color.</value>
            <seealso cref="P:Infragistics.Excel.IWorksheetCellFormat.BottomBorderColor"/>
            <seealso cref="P:Infragistics.Excel.IWorksheetCellFormat.BottomBorderStyle"/>
            <seealso cref="P:Infragistics.Excel.IWorksheetCellFormat.LeftBorderColor"/>
            <seealso cref="P:Infragistics.Excel.IWorksheetCellFormat.LeftBorderStyle"/>
            <seealso cref="P:Infragistics.Excel.IWorksheetCellFormat.RightBorderStyle"/>
            <seealso cref="P:Infragistics.Excel.IWorksheetCellFormat.TopBorderColor"/>
            <seealso cref="P:Infragistics.Excel.IWorksheetCellFormat.TopBorderStyle"/>
        </member>
        <member name="P:Infragistics.Excel.IWorksheetCellFormat.RightBorderStyle">
            <summary>
            Gets or sets the right border style.
            </summary>
            <remarks>
            <p class="body">
            If the border style is set to a non-default value and the <see cref="P:Infragistics.Excel.IWorksheetCellFormat.RightBorderColor"/> is default (Color.Empty), 
            it will be resolved to Color.Black.
            </p>
            </remarks>
            <exception cref="T:System.ComponentModel.InvalidEnumArgumentException">
            The value assigned is not defined in the <see cref="T:Infragistics.Excel.CellBorderLineStyle"/> enumeration.
            </exception>
            <value>The right border style.</value>
            <seealso cref="P:Infragistics.Excel.IWorksheetCellFormat.BottomBorderColor"/>
            <seealso cref="P:Infragistics.Excel.IWorksheetCellFormat.BottomBorderStyle"/>
            <seealso cref="P:Infragistics.Excel.IWorksheetCellFormat.LeftBorderColor"/>
            <seealso cref="P:Infragistics.Excel.IWorksheetCellFormat.LeftBorderStyle"/>
            <seealso cref="P:Infragistics.Excel.IWorksheetCellFormat.RightBorderColor"/>
            <seealso cref="P:Infragistics.Excel.IWorksheetCellFormat.TopBorderColor"/>
            <seealso cref="P:Infragistics.Excel.IWorksheetCellFormat.TopBorderStyle"/>
        </member>
        <member name="P:Infragistics.Excel.IWorksheetCellFormat.Rotation">
            <summary>
            Gets or sets the rotation of the cell content in degrees.
            </summary>
            <remarks>
            <p class="body">
            Cell text rotation, in degrees; 0 – 90 is up 0 – 90 degrees, 91 – 180 is down 1 – 90 degrees, and 255 is vertical.
            </p>
            </remarks>
            <value>The rotation of the cell content in degrees.</value>
        </member>
        <member name="P:Infragistics.Excel.IWorksheetCellFormat.ShrinkToFit">
            <summary>
            Gets or sets the value indicating whether the cell content will shrink to fit the cell.
            </summary>
            <remarks>
            <p class="body">
            If True, the size of the cell font will shrink so all data fits within the cell.
            </p>
            </remarks>
            <exception cref="T:System.ComponentModel.InvalidEnumArgumentException">
            The value assigned is not defined in the <see cref="T:Infragistics.Excel.ExcelDefaultableBoolean"/> enumeration.
            </exception>
            <value>The value indicating whether the cell content will shrink to fit the cell.</value>
        </member>
        <member name="P:Infragistics.Excel.IWorksheetCellFormat.TopBorderColor">
            <summary>
            Gets or sets the top border color.
            </summary>
            <remarks>
            <p class="body">
            If the border color is set to a non-default value and the <see cref="P:Infragistics.Excel.IWorksheetCellFormat.TopBorderStyle"/> is set to Default, 
            it will be resolved to Thin.
            </p>
            </remarks>
            <value>The top border color.</value>
            <seealso cref="P:Infragistics.Excel.IWorksheetCellFormat.BottomBorderColor"/>
            <seealso cref="P:Infragistics.Excel.IWorksheetCellFormat.BottomBorderStyle"/>
            <seealso cref="P:Infragistics.Excel.IWorksheetCellFormat.LeftBorderColor"/>
            <seealso cref="P:Infragistics.Excel.IWorksheetCellFormat.LeftBorderStyle"/>
            <seealso cref="P:Infragistics.Excel.IWorksheetCellFormat.RightBorderColor"/>
            <seealso cref="P:Infragistics.Excel.IWorksheetCellFormat.RightBorderStyle"/>
            <seealso cref="P:Infragistics.Excel.IWorksheetCellFormat.TopBorderStyle"/>
        </member>
        <member name="P:Infragistics.Excel.IWorksheetCellFormat.TopBorderStyle">
            <summary>
            Gets or sets the top border style.
            </summary>
            <remarks>
            <p class="body">
            If the border style is set to a non-default value and the <see cref="P:Infragistics.Excel.IWorksheetCellFormat.TopBorderColor"/> is default (Color.Empty), 
            it will be resolved to Color.Black.
            </p>
            </remarks>
            <exception cref="T:System.ComponentModel.InvalidEnumArgumentException">
            The value assigned is not defined in the <see cref="T:Infragistics.Excel.CellBorderLineStyle"/> enumeration.
            </exception>
            <value>The top border style.</value>
            <seealso cref="P:Infragistics.Excel.IWorksheetCellFormat.BottomBorderColor"/>
            <seealso cref="P:Infragistics.Excel.IWorksheetCellFormat.BottomBorderStyle"/>
            <seealso cref="P:Infragistics.Excel.IWorksheetCellFormat.LeftBorderColor"/>
            <seealso cref="P:Infragistics.Excel.IWorksheetCellFormat.LeftBorderStyle"/>
            <seealso cref="P:Infragistics.Excel.IWorksheetCellFormat.RightBorderColor"/>
            <seealso cref="P:Infragistics.Excel.IWorksheetCellFormat.RightBorderStyle"/>
            <seealso cref="P:Infragistics.Excel.IWorksheetCellFormat.TopBorderColor"/>
        </member>
        <member name="P:Infragistics.Excel.IWorksheetCellFormat.VerticalAlignment">
            <summary>
            Gets or sets the vertical alignment of the content in a cell.
            </summary>
            <exception cref="T:System.ComponentModel.InvalidEnumArgumentException">
            The value assigned is not defined in the <see cref="T:Infragistics.Excel.VerticalCellAlignment"/> enumeration.
            </exception>
            <value>The vertical alignment of the content in a cell.</value>
            <seealso cref="P:Infragistics.Excel.IWorksheetCellFormat.Alignment"/>
        </member>
        <member name="P:Infragistics.Excel.IWorksheetCellFormat.WrapText">
            <summary>
            Gets or sets the value which indicates whether text will wrap in a cell.
            </summary>
            <remarks>
            <p class="body">
            If True, and the row associated with the cell has a default <see cref="P:Infragistics.Excel.WorksheetRow.Height"/>, the row's
            height will automatically be increased to fit wrapped content.
            </p>
            </remarks>
            <exception cref="T:System.ComponentModel.InvalidEnumArgumentException">
            The value assigned is not defined in the <see cref="T:Infragistics.Excel.ExcelDefaultableBoolean"/> enumeration.
            </exception>
            <value>The value which indicates whether text will wrap in a cell.</value>
        </member>
        <member name="T:Infragistics.Excel.NamedReferenceCollection">
            <summary>
            A collection of <see cref="T:Infragistics.Excel.NamedReference"/> instances in a workbook.
            </summary>
            <seealso cref="T:Infragistics.Excel.NamedReference"/>
            <seealso cref="T:Workbook.NamedReferences"/>
        </member>
        <member name="M:Infragistics.Excel.NamedReferenceCollection.Add(System.String,System.String)">
            <summary>
            Adds a named reference with a scope of the collection's associated <see cref="T:Workbook"/> to the collection.
            </summary>
            <remarks>
            <p class="body">
            The <see cref="T:Infragistics.Excel.CellReferenceMode"/> of the owning <see cref="P:Infragistics.Excel.NamedReferenceCollection.Workbook"/> will be used to parse the formula.
            </p>
            </remarks>
            <param name="name">The name to give the named reference.</param>
            <param name="formula">The formula to give the named reference.</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="name"/> is null or empty.
            </exception>
            <exception cref="T:System.ArgumentException">
            <paramref name="name"/> is longer than 255 characters.
            </exception>
            <exception cref="T:System.ArgumentException">
            <paramref name="name"/> is invalid. The name must begin with a letter, underscore (_), or a backslash (\).
            All other characters in the name must be letters, numbers, periods, underscores (_), or backslashes (\).
            The name cannot be a an A1 cell reference (1 to 3 letters followed by 1 to 6 numbers). In addition, the name
            cannot be 'r', 'R', 'c', or 'C' or start with a row or column reference in R1C1 cell reference mode 
            ('R' followed by 1 to 6 numbers or 'C' followed by 1 to 6 numbers).
            </exception>
            <exception cref="T:System.InvalidOperationException">
            <paramref name="name"/> is used by another named reference which also has a scope of the workbook. 
            Named reference names are compared case-insensitively.
            </exception>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="formula"/> is null or empty.
            </exception>
            <exception cref="T:System.ArgumentException">
            <paramref name="formula"/> is not a valid formula. The inner exception will contain the <see cref="T:Infragistics.Excel.FormulaParseException"/>
            describing the reason the formula was not valid.
            </exception>
            <returns>The named reference which was added to the collection.</returns>
            <seealso cref="P:Infragistics.Excel.NamedReferenceBase.Scope"/>
        </member>
        <member name="M:Infragistics.Excel.NamedReferenceCollection.Add(System.String,System.String,Infragistics.Excel.CellReferenceMode)">
            <summary>
            Adds a named reference with a scope of the collection's associated <see cref="T:Workbook"/> to the collection.
            </summary>
            <param name="name">The name to give the named reference.</param>
            <param name="formula">The formula to give the named reference.</param>
            <param name="cellReferenceMode">The mode used to interpret cell references in the formula.</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="name"/> is null or empty.
            </exception>
            <exception cref="T:System.ArgumentException">
            <paramref name="name"/> is longer than 255 characters.
            </exception>
            <exception cref="T:System.ArgumentException">
            <paramref name="name"/> is invalid. The name must begin with a letter, underscore (_), or a backslash (\).
            All other characters in the name must be letters, numbers, periods, underscores (_), or backslashes (\).
            The name cannot be a an A1 cell reference (1 to 3 letters followed by 1 to 6 numbers). In addition, the name
            cannot be 'r', 'R', 'c', or 'C' or start with a row or column reference in R1C1 cell reference mode 
            ('R' followed by 1 to 6 numbers or 'C' followed by 1 to 6 numbers).
            </exception>
            <exception cref="T:System.InvalidOperationException">
            <paramref name="name"/> is used by another named reference which also has a scope of the workbook. 
            Named reference names are compared case-insensitively.
            </exception>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="formula"/> is null or empty.
            </exception>
            <exception cref="T:System.ArgumentException">
            <paramref name="formula"/> is not a valid formula. The inner exception will contain the <see cref="T:Infragistics.Excel.FormulaParseException"/>
            describing the reason the formula was not valid.
            </exception>
            <exception cref="T:System.ComponentModel.InvalidEnumArgumentException">
            <paramref name="cellReferenceMode"/> is not defined in the <see cref="T:Infragistics.Excel.CellReferenceMode"/> enumeration.
            </exception>
            <returns>The named reference which was added to the collection.</returns>
            <seealso cref="P:Infragistics.Excel.NamedReferenceBase.Scope"/>
        </member>
        <member name="M:Infragistics.Excel.NamedReferenceCollection.Add(System.String,System.String,Infragistics.Excel.Worksheet)">
            <summary>
            Adds a named reference with a scope of a worksheet to the collection.
            </summary>
            <remarks>
            <p class="body">
            The <see cref="T:Infragistics.Excel.CellReferenceMode"/> of the owning <see cref="P:Infragistics.Excel.NamedReferenceCollection.Workbook"/> will be used to parse the formula.
            </p>
            </remarks>
            <param name="name">The name to give the named reference.</param>
            <param name="formula">The formula to give the named reference.</param>
            <param name="worksheet">The scope of the named reference.</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="name"/> is null or empty.
            </exception>
            <exception cref="T:System.ArgumentException">
            <paramref name="name"/> is longer than 255 characters.
            </exception>
            <exception cref="T:System.ArgumentException">
            <paramref name="name"/> is invalid. The name must begin with a letter, underscore (_), or a backslash (\).
            All other characters in the name must be letters, numbers, periods, underscores (_), or backslashes (\).
            The name cannot be a an A1 cell reference (1 to 3 letters followed by 1 to 6 numbers). In addition, the name
            cannot be 'r', 'R', 'c', or 'C' or start with a row or column reference in R1C1 cell reference mode 
            ('R' followed by 1 to 6 numbers or 'C' followed by 1 to 6 numbers).
            </exception>
            <exception cref="T:System.InvalidOperationException">
            <paramref name="name"/> is used by another named reference which also has a scope of 
            the specified <paramref name="worksheet"/>. Named reference names are compared case-insensitively.
            </exception>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="formula"/> is null or empty.
            </exception>
            <exception cref="T:System.ArgumentException">
            <paramref name="formula"/> is not a valid formula. The inner exception will contain the <see cref="T:Infragistics.Excel.FormulaParseException"/>
            describing the reason the formula was not valid.
            </exception>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="worksheet"/> is null.
            </exception>
            <exception cref="T:System.ArgumentException">
            <paramref name="worksheet"/> does not belong to the workbook owning this collection.
            </exception>
            <returns>The named reference which was added to the collection.</returns>
            <seealso cref="P:Infragistics.Excel.NamedReferenceBase.Scope"/>
        </member>
        <member name="M:Infragistics.Excel.NamedReferenceCollection.Add(System.String,System.String,Infragistics.Excel.CellReferenceMode,Infragistics.Excel.Worksheet)">
            <summary>
            Adds a named reference with a scope of a worksheet to the collection.
            </summary>
            <param name="name">The name to give the named reference.</param>
            <param name="formula">The formula to give the named reference.</param>
            <param name="cellReferenceMode">The mode used to interpret cell references in the formula.</param>
            <param name="worksheet">The scope of the named reference.</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="name"/> is null or empty.
            </exception>
            <exception cref="T:System.ArgumentException">
            <paramref name="name"/> is longer than 255 characters.
            </exception>
            <exception cref="T:System.ArgumentException">
            <paramref name="name"/> is invalid. The name must begin with a letter, underscore (_), or a backslash (\).
            All other characters in the name must be letters, numbers, periods, underscores (_), or backslashes (\).
            The name cannot be a an A1 cell reference (1 to 3 letters followed by 1 to 6 numbers). In addition, the name
            cannot be 'r', 'R', 'c', or 'C' or start with a row or column reference in R1C1 cell reference mode 
            ('R' followed by 1 to 6 numbers or 'C' followed by 1 to 6 numbers).
            </exception>
            <exception cref="T:System.InvalidOperationException">
            <paramref name="name"/> is used by another named reference which also has a scope of 
            the specified <paramref name="worksheet"/>. Named reference names are compared case-insensitively.
            </exception>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="formula"/> is null or empty.
            </exception>
            <exception cref="T:System.ArgumentException">
            <paramref name="formula"/> is not a valid formula. The inner exception will contain the <see cref="T:Infragistics.Excel.FormulaParseException"/>
            describing the reason the formula was not valid.
            </exception>
            <exception cref="T:System.ComponentModel.InvalidEnumArgumentException">
            <paramref name="cellReferenceMode"/> is not defined in the <see cref="T:Infragistics.Excel.CellReferenceMode"/> enumeration.
            </exception>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="worksheet"/> is null.
            </exception>
            <exception cref="T:System.ArgumentException">
            <paramref name="worksheet"/> does not belong to the workbook owning this collection.
            </exception>
            <returns>The named reference which was added to the collection.</returns>
            <seealso cref="P:Infragistics.Excel.NamedReferenceBase.Scope"/>
        </member>
        <member name="M:Infragistics.Excel.NamedReferenceCollection.Clear">
            <summary>
            Clears all named references from the collection.
            </summary>
        </member>
        <member name="M:Infragistics.Excel.NamedReferenceCollection.Contains(Infragistics.Excel.NamedReference)">
            <summary>
            Determines whether a named reference is in the collection.
            </summary>
            <param name="namedReference">The named reference to locate in the collection.</param>
            <returns>True if the named reference is found; False otherwise.</returns>
        </member>
        <member name="M:Infragistics.Excel.NamedReferenceCollection.Find(System.String)">
            <summary>
            Finds a named reference in the collection with a scope of the collection's associated <see cref="T:Workbook"/>.
            </summary>
            <remarks>
            <p class="body">
            Named reference names are compared case-insensitively.
            </p>
            </remarks>
            <param name="name">The name of the named reference to find.</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="name"/> is null or empty.
            </exception>
            <returns>The named reference with the specified name or null if the named reference was not found.</returns>
        </member>
        <member name="M:Infragistics.Excel.NamedReferenceCollection.Find(System.String,Infragistics.Excel.Worksheet)">
            <summary>
            Finds a named reference in the collection with a scope of the specified worksheet.
            </summary>
            <remarks>
            <p class="body">
            Named reference names are compared case-insensitively.
            </p>
            </remarks>
            <param name="name">The name of the named reference to find.</param>
            <param name="worksheetScope">The worksheet that the named reference found must have a scope of.</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="name"/> is null or empty.
            </exception>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="worksheetScope"/> is null.
            </exception>
            <returns>The named reference with the specified name or null if the named reference was not found.</returns>
        </member>
        <member name="M:Infragistics.Excel.NamedReferenceCollection.FindAll(System.String)">
            <summary>
            Finds all named references in the collection with the specified name.
            </summary>
            <remarks>
            <p class="body">
            Named reference names are compared case-insensitively.
            </p>
            </remarks>
            <param name="name">The name of the named references to find.</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="name"/> is null or empty.
            </exception>
            <returns>An array of <see cref="T:Infragistics.Excel.NamedReference"/> instances with the specified name.</returns>
        </member>
        <member name="M:Infragistics.Excel.NamedReferenceCollection.Remove(Infragistics.Excel.NamedReference)">
            <summary>
            Removes the specified named reference from the collection.
            </summary>
            <param name="namedReference">The named reference to remove fro the collection.</param>
            <returns>True if the named reference existed in the collection and was removed; False otherwise.</returns>
        </member>
        <member name="M:Infragistics.Excel.NamedReferenceCollection.RemoveAt(System.Int32)">
            <summary>
            Removes the named reference at the specified index in the collection.
            </summary>
            <param name="index">The zero-based index of the named reference in the collection.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <paramref name="index"/> is less than zero or <paramref name="index"/> is greater than or 
            equal to <see cref="P:Infragistics.Excel.NamedReferenceCollection.Count"/>.
            </exception>
        </member>
        <member name="P:Infragistics.Excel.NamedReferenceCollection.Count">
            <summary>
            Gets the number of named reference in the collection.
            </summary>
            <value>The number of named reference in the collection.</value>
        </member>
        <member name="P:Infragistics.Excel.NamedReferenceCollection.Item(System.Int32)">
            <summary>
            Gets the named reference at the specified index.
            </summary>
            <param name="index">The zero-based index of the named reference to get.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <paramref name="index"/> is less than zero or <paramref name="index"/> is greater than or 
            equal to <see cref="P:Infragistics.Excel.NamedReferenceCollection.Count"/>.
            </exception>
            <value>The named reference at the specified index.</value>
        </member>
        <member name="P:Infragistics.Excel.NamedReferenceCollection.Workbook">
            <summary>
            Gets the workbook associated with this collection.
            </summary>
            <value>The workbook associated with this collection.</value>
        </member>
        <member name="T:Infragistics.Excel.PrintOptions">
            <summary>
            Class which exposes the various print options available for a worksheet which can be saved with both a 
            worksheet and a custom view.
            </summary>
            <remarks>
            <p class="body">
            This class provides a way to control how a worksheet is printed.
            </p>
            </remarks>
            <seealso cref="P:Infragistics.Excel.Worksheet.PrintOptions"/>
            <seealso cref="M:Infragistics.Excel.CustomView.GetPrintOptions(Infragistics.Excel.Worksheet)"/>
        </member>
        <member name="M:Infragistics.Excel.PrintOptions.Reset">
            <summary>
            Resets the print options to their default settings.
            </summary>
            <remarks>
            <p class="body">
            The defaults used for each setting are the same defaults with which Microsoft Excel creates a blank worksheet.
            </p>
            </remarks>
        </member>
        <member name="P:Infragistics.Excel.PrintOptions.BottomMargin">
            <summary>
            Gets or sets the margin at the bottom of each printed page of the worksheet.
            </summary>
            <exception cref="T:System.ArgumentOutOfRangeException">
            The assigned value is outside the valid margin range of 0 and 100.
            </exception>
            <value>The margin at the bottom of each printed page of the worksheet.</value>
            <seealso cref="P:Infragistics.Excel.PrintOptions.FooterMargin"/>
            <seealso cref="P:Infragistics.Excel.PrintOptions.HeaderMargin"/>
            <seealso cref="P:Infragistics.Excel.PrintOptions.LeftMargin"/>
            <seealso cref="P:Infragistics.Excel.PrintOptions.RightMargin"/>
            <seealso cref="P:Infragistics.Excel.PrintOptions.TopMargin"/>
        </member>
        <member name="P:Infragistics.Excel.PrintOptions.CenterHorizontally">
            <summary>
            Gets or sets the value indicating whether the printed pages should be centered horizontally.
            </summary>
            <value>The value indicating whether the printed pages should be centered horizontally.</value>
            <seealso cref="P:Infragistics.Excel.PrintOptions.CenterVertically"/>
        </member>
        <member name="P:Infragistics.Excel.PrintOptions.CenterVertically">
            <summary>
            Gets or sets the value indicating whether the printed pages should be centered vertically.
            </summary>
            <value>The value indicating whether the printed pages should be centered vertically.</value>
            <seealso cref="P:Infragistics.Excel.PrintOptions.CenterHorizontally"/>
        </member>
        <member name="P:Infragistics.Excel.PrintOptions.DraftQuality">
            <summary>
            Gets or sets the value indicating whether the printed pages should be printed using draft quality.
            </summary>
            <value>The value indicating whether the printed pages should be printed using draft quality.</value>
        </member>
        <member name="P:Infragistics.Excel.PrintOptions.Footer">
            <summary>
            Gets or sets the footer for each page of the printed worksheet.
            </summary>
            <remarks>
            <p class="body">
            The '&amp;' character in the header and footer is a special character. Depending on what is after it, 
            the formatting of the text can be controlled or dynamic text can be inserted. Below is a list of 
            the available commands:
            <list type="table">
            	<listheader>
            		<term>Section commands</term>
            	</listheader>
            	<item>
            		<term>&amp;L</term>
            		<description>
            			The following text will appear in the left section. The formatting of new sections is 
            			always the default formatting, regardless of the formatting of the previous section.
            		</description>
            	</item>
            	<item>
            		<term>&amp;C</term>
            		<description>
            			The following text will appear in the center section. The formatting of new sections is 
            			always the default formatting, regardless of the formatting of the previous section.
            		</description>
            	</item>
            	<item>
            		<term>&amp;R</term>
            		<description>
            			The following text will appear in the right section. The formatting of new sections is 
            			always the default formatting, regardless of the formatting of the previous section.
            		</description>
            	</item>
            </list>
            <list type="table">
            	<listheader>
            		<term>Replacement commands</term>
            	</listheader>
            	<item>
            		<term>&amp;&amp;</term>
            		<description>Insert the '&amp;' character.</description>
            	</item>
            	<item>
            		<term>&amp;A</term>
            		<description>Insert the current worksheet name.</description>
            	</item>
            	<item>
            		<term>&amp;D</term>
            		<description>Insert the current date.</description>
            	</item>
            	<item>
            		<term>&amp;F</term>
            		<description>Insert the current file name.</description>
            	</item>
            	<item>
            		<term>&amp;G</term>
            		<description>Insert an image (<b>Note:</b> This command is currently not supported).</description>
            	</item>
            	<item>
            		<term>&amp;N</term>
            		<description>Insert the  number of pages the worksheet will need to print.</description>
            	</item>
            	<item>
            		<term>&amp;P</term>
            		<description>Insert the current page number.</description>
            	</item>
            	<item>
            		<term>&amp;T</term>
            		<description>Insert the current time.</description>
            	</item>
            	<item>
            		<term>&amp;Z</term>
            		<description>Insert the current file path (without the file name).</description>
            	</item>
            </list>
            <list type="table">
            	<listheader>
            		<term>Formatting commands</term>
            	</listheader>
            	<item>
            		<term>&amp;B</term>
            		<description>Toggle bold.</description>
            	</item>
            	<item>
            		<term>&amp;E</term>
            		<description>Toggle double underlining.</description>
            	</item>
            	<item>
            		<term>&amp;I</term>
            		<description>Toggle italics.</description>
            	</item>
            	<item>
            		<term>&amp;S</term>
            		<description>Toggle strikethrough.</description>
            	</item>
            	<item>
            		<term>&amp;U</term>
            		<description>Toggle underlining.</description>
            	</item>
            	<item>
            		<term>&amp;X</term>
            		<description>Toggle superscript.</description>
            	</item>
            	<item>
            		<term>&amp;Y</term>
            		<description>Toggle subscript.</description>
            	</item>
            	<item>
            		<term>&amp;&lt;FontSize&gt;</term>
            		<description>
            			Sets a new font size for the following text. The size is expressed as a positive integer. 
            			If a number is to follow this command in the header, it must be separated by a space.
            		</description>
            	</item>
            	<item>
            		<term>&amp;"&lt;FontName&gt;"</term>
            		<description>
            			Sets a new font for the following text. If the font name is not recognized, the default 
            			font will be used.
            		</description>
            	</item>
            	<item>
            		<term>&amp;"&lt;FontName&gt;,&lt;FontStyle&gt;"</term>
            		<description>
            			Sets the new font and font style for the following text. The font style is usually "Regular", 
            			"Bold", "Italic", or "Bold Italic", but	can be other styles depending on the font. The 
            			available font styles can be seen in the font dialog when a font is selected.
            		</description>
            	</item>
            </list>
            </p>
            <p class="body">
            The header or footer string could look like this: &amp;L&amp;"Arial,Bold"&amp;D&amp;CPage &amp;P of 
            &amp;N on &amp;A&amp;R&amp;14&amp;F.
            </p>
            </remarks>
            <value>The footer for each page of the worksheet.</value>
            <seealso cref="P:Infragistics.Excel.PrintOptions.Header"/>
            <seealso cref="P:Infragistics.Excel.PrintOptions.FooterMargin"/>
        </member>
        <member name="P:Infragistics.Excel.PrintOptions.FooterMargin">
            <summary>
            Gets or sets the footer margin for each printed page of the worksheet.
            </summary>
            <exception cref="T:System.ArgumentOutOfRangeException">
            The assigned value is outside the valid margin range of 0 and 100.
            </exception>
            <value>The footer margin for each printed page of the worksheet.</value>
            <seealso cref="P:Infragistics.Excel.PrintOptions.Footer"/>
            <seealso cref="P:Infragistics.Excel.PrintOptions.BottomMargin"/>
            <seealso cref="P:Infragistics.Excel.PrintOptions.HeaderMargin"/>
            <seealso cref="P:Infragistics.Excel.PrintOptions.LeftMargin"/>
            <seealso cref="P:Infragistics.Excel.PrintOptions.RightMargin"/>
            <seealso cref="P:Infragistics.Excel.PrintOptions.TopMargin"/>
        </member>
        <member name="P:Infragistics.Excel.PrintOptions.Header">
            <summary>
            Gets or sets the header for each page of the printed worksheet.
            </summary>
            <remarks>
            <p class="body">
            The '&amp;' character in the header and footer is a special character. Depending on what is after it, 
            the formatting of the text can be controlled or dynamic text can be inserted. Below is a list of 
            the available commands:
            <list type="table">
            	<listheader>
            		<term>Section commands</term>
            	</listheader>
            	<item>
            		<term>&amp;L</term>
            		<description>
            			The following text will appear in the left section. The formatting of new sections is 
            			always the default formatting, regardless of the formatting of the previous section.
            		</description>
            	</item>
            	<item>
            		<term>&amp;C</term>
            		<description>
            			The following text will appear in the center section. The formatting of new sections is 
            			always the default formatting, regardless of the formatting of the previous section.
            		</description>
            	</item>
            	<item>
            		<term>&amp;R</term>
            		<description>
            			The following text will appear in the right section. The formatting of new sections is 
            			always the default formatting, regardless of the formatting of the previous section.
            		</description>
            	</item>
            </list>
            <list type="table">
            	<listheader>
            		<term>Replacement commands</term>
            	</listheader>
            	<item>
            		<term>&amp;&amp;</term>
            		<description>Insert the '&amp;' character.</description>
            	</item>
            	<item>
            		<term>&amp;A</term>
            		<description>Insert the current worksheet name.</description>
            	</item>
            	<item>
            		<term>&amp;D</term>
            		<description>Insert the current date.</description>
            	</item>
            	<item>
            		<term>&amp;F</term>
            		<description>Insert the current file name.</description>
            	</item>
            	<item>
            		<term>&amp;G</term>
            		<description>Insert an image (<b>Note:</b> This command is currently not supported).</description>
            	</item>
            	<item>
            		<term>&amp;N</term>
            		<description>Insert the  number of pages the worksheet will need to print.</description>
            	</item>
            	<item>
            		<term>&amp;P</term>
            		<description>Insert the current page number.</description>
            	</item>
            	<item>
            		<term>&amp;T</term>
            		<description>Insert the current time.</description>
            	</item>
            	<item>
            		<term>&amp;Z</term>
            		<description>Insert the current file path (without the file name).</description>
            	</item>
            </list>
            <list type="table">
            	<listheader>
            		<term>Formatting commands</term>
            	</listheader>
            	<item>
            		<term>&amp;B</term>
            		<description>Toggle bold.</description>
            	</item>
            	<item>
            		<term>&amp;E</term>
            		<description>Toggle double underlining.</description>
            	</item>
            	<item>
            		<term>&amp;I</term>
            		<description>Toggle italics.</description>
            	</item>
            	<item>
            		<term>&amp;S</term>
            		<description>Toggle strikethrough.</description>
            	</item>
            	<item>
            		<term>&amp;U</term>
            		<description>Toggle underlining.</description>
            	</item>
            	<item>
            		<term>&amp;X</term>
            		<description>Toggle superscript.</description>
            	</item>
            	<item>
            		<term>&amp;Y</term>
            		<description>Toggle subscript.</description>
            	</item>
            	<item>
            		<term>&amp;&lt;FontSize&gt;</term>
            		<description>
            			Sets a new font size for the following text. The size is expressed as a positive integer. 
            			If a number is to follow this command in the header, it must be separated by a space.
            		</description>
            	</item>
            	<item>
            		<term>&amp;"&lt;FontName&gt;"</term>
            		<description>
            			Sets a new font for the following text. If the font name is not recognized, the default 
            			font will be used.
            		</description>
            	</item>
            	<item>
            		<term>&amp;"&lt;FontName&gt;,&lt;FontStyle&gt;"</term>
            		<description>
            			Sets the new font and font style for the following text. The font style is usually "Regular", 
            			"Bold", "Italic", or "Bold Italic", but	can be other styles depending on the font. The 
            			available font styles can be seen in the font dialog when a font is selected.
            		</description>
            	</item>
            </list>
            </p>
            <p class="body">
            The header or footer string could look like this: &amp;L&amp;"Arial,Bold"&amp;D&amp;CPage &amp;P of 
            &amp;N on &amp;A&amp;R&amp;14&amp;F.
            </p>
            </remarks>
            <value>The header for each page of the worksheet.</value>
            <seealso cref="P:Infragistics.Excel.PrintOptions.Footer"/>
            <seealso cref="P:Infragistics.Excel.PrintOptions.HeaderMargin"/>
        </member>
        <member name="P:Infragistics.Excel.PrintOptions.HeaderMargin">
            <summary>
            Gets or sets the header margin for each printed page of the worksheet.
            </summary>
            <exception cref="T:System.ArgumentOutOfRangeException">
            The assigned value is outside the valid margin range of 0 and 100.
            </exception>
            <value>The header margin for each printed page of the worksheet.</value>
            <seealso cref="P:Infragistics.Excel.PrintOptions.Header"/>
            <seealso cref="P:Infragistics.Excel.PrintOptions.BottomMargin"/>
            <seealso cref="P:Infragistics.Excel.PrintOptions.FooterMargin"/>
            <seealso cref="P:Infragistics.Excel.PrintOptions.LeftMargin"/>
            <seealso cref="P:Infragistics.Excel.PrintOptions.RightMargin"/>
            <seealso cref="P:Infragistics.Excel.PrintOptions.TopMargin"/>
        </member>
        <member name="P:Infragistics.Excel.PrintOptions.LeftMargin">
            <summary>
            Gets or sets the margin at the left of each printed page of the worksheet.
            </summary>
            <exception cref="T:System.ArgumentOutOfRangeException">
            The assigned value is outside the valid margin range of 0 and 100.
            </exception>
            <value>The margin at the left of each printed page of the worksheet.</value>
            <seealso cref="P:Infragistics.Excel.PrintOptions.BottomMargin"/>
            <seealso cref="P:Infragistics.Excel.PrintOptions.FooterMargin"/>
            <seealso cref="P:Infragistics.Excel.PrintOptions.HeaderMargin"/>
            <seealso cref="P:Infragistics.Excel.PrintOptions.RightMargin"/>
            <seealso cref="P:Infragistics.Excel.PrintOptions.TopMargin"/>
        </member>
        <member name="P:Infragistics.Excel.PrintOptions.MaxPagesHorizontally">
            <summary>
            Gets or sets the maximum number of pages allowed in the horizontal direction to print the worksheet.
            </summary>
            <remarks>
            <p class="body">
            A value of zero indicates no maximum is used in the horizontal direction. As many pages as needed will be used.
            </p>
            <p class="note">
            <B>Note:</B> For MaxPagesHorizontally and <see cref="P:Infragistics.Excel.PrintOptions.MaxPagesVertically"/> to affect the way the worksheet is printed,
            <see cref="P:Infragistics.Excel.PrintOptions.ScalingType"/> must be set to a value of FitToPages. However, if the the ScalingType is different 
            and these values aren't used, they will still be saved with the worksheet.
            </p>
            </remarks>
            <exception cref="T:System.ArgumentOutOfRangeException">
            The value assigned is outside the valid range of 0 and 32767.
            </exception>
            <value>The maximum number of pages allowed in the horizontal direction to print the worksheet.</value>
            <seealso cref="P:Infragistics.Excel.PrintOptions.MaxPagesVertically"/>
            <seealso cref="P:Infragistics.Excel.PrintOptions.ScalingType"/>
        </member>
        <member name="P:Infragistics.Excel.PrintOptions.MaxPagesVertically">
            <summary>
            Gets or sets the maximum number of pages allowed in the vertical direction to print the worksheet.
            </summary>
            <remarks>
            <p class="body">
            A value of zero indicates no maximum is used in the vertical direction. As many pages as needed will be used.
            </p>
            <p class="note">
            <B>Note:</B> For <see cref="P:Infragistics.Excel.PrintOptions.MaxPagesHorizontally"/> and MaxPagesVertically to affect the way the worksheet is printed,
            <see cref="P:Infragistics.Excel.PrintOptions.ScalingType"/> must be set to a value of FitToPages. However, if the the ScalingType is different 
            and these values aren't used, they will still be saved with the worksheet.
            </p>
            </remarks>
            <exception cref="T:System.ArgumentOutOfRangeException">
            The value assigned is outside the valid range of 0 and 32767.
            </exception>
            <value>The maximum number of pages allowed in the vertical direction to print the worksheet.</value>
            <seealso cref="P:Infragistics.Excel.PrintOptions.MaxPagesHorizontally"/>
            <seealso cref="P:Infragistics.Excel.PrintOptions.ScalingType"/>
        </member>
        <member name="P:Infragistics.Excel.PrintOptions.NumberOfCopies">
            <summary>
            Gets or sets the number of copies to print.
            </summary>
            <exception cref="T:System.ArgumentOutOfRangeException">
            The assigned value is outside the valid range of 1 and 65535.
            </exception>
            <value>The number of copies to print.</value>
        </member>
        <member name="P:Infragistics.Excel.PrintOptions.Orientation">
            <summary>
            Gets or sets the orientation for each page of the printed worksheet.
            </summary>
            <exception cref="T:System.ComponentModel.InvalidEnumArgumentException">
            The assigned value is not defined in the <see cref="P:Infragistics.Excel.PrintOptions.Orientation"/> enumeration.
            </exception>
            <value>The orientation for each page of the printed worksheet.</value>
        </member>
        <member name="P:Infragistics.Excel.PrintOptions.PageOrder">
            <summary>
            Gets or sets the order in which to print pages for multiple page worksheets.
            </summary>
            <exception cref="T:System.ComponentModel.InvalidEnumArgumentException">
            The assigned value is not defined in the <see cref="P:Infragistics.Excel.PrintOptions.PageOrder"/> enumeration.
            </exception>
            <value>The order in which to print pages for multiple page worksheets.</value>
        </member>
        <member name="P:Infragistics.Excel.PrintOptions.PageNumbering">
            <summary>
            Gets or sets the method with which pages are numbered.
            </summary>
            <remarks>
            <p class="body">
            If this is set to a value of UseStartPageNumber, the first page is numbered using the <see cref="P:Infragistics.Excel.PrintOptions.StartPageNumber"/>.
            </p>
            </remarks>
            <exception cref="T:System.ComponentModel.InvalidEnumArgumentException">
            The assigned value is not defined in the <see cref="P:Infragistics.Excel.PrintOptions.PageNumbering"/> enumeration.
            </exception>
            <value>The method with which pages are numbered.</value>
            <seealso cref="P:Infragistics.Excel.PrintOptions.StartPageNumber"/>
        </member>
        <member name="P:Infragistics.Excel.PrintOptions.PaperSize">
            <summary>
            Gets or sets the paper size for each printed page of the worksheet.
            </summary>
            <exception cref="T:System.ComponentModel.InvalidEnumArgumentException">
            The assigned value is not defined in the <see cref="P:Infragistics.Excel.PrintOptions.PaperSize"/> enumeration.
            </exception>
            <value>The paper size for each printed page of the worksheet.</value>
        </member>
        <member name="P:Infragistics.Excel.PrintOptions.PrintErrors">
            <summary>
            Gets or sets the way error values of cells are printed.
            </summary>
            <remarks>
            <p class="body">
            A cell can have an error value if its <see cref="P:Infragistics.Excel.WorksheetCell.Value"/> is set directly to
            an <see cref="T:Infragistics.Excel.ErrorValue"/> or if it is set to a <see cref="T:Infragistics.Excel.Formula"/> that evaluates to an
            error.
            </p>
            </remarks>
            <exception cref="T:System.ComponentModel.InvalidEnumArgumentException">
            The assigned value is not defined in the <see cref="P:Infragistics.Excel.PrintOptions.PrintErrors"/> enumeration.
            </exception>
            <value>The way error values of cells are printed.</value>
            <seealso cref="T:Infragistics.Excel.ErrorValue"/>
            <seealso cref="T:Infragistics.Excel.Formula"/>
        </member>
        <member name="P:Infragistics.Excel.PrintOptions.PrintGridlines">
            <summary>
            Gets or sets the value which indicates whether to print the worksheet gridlines.
            </summary>
            <value>The value which indicates whether to print the worksheet gridlines.</value>
            <seealso cref="P:Infragistics.Excel.DisplayOptions.ShowGridlines"/>
        </member>
        <member name="P:Infragistics.Excel.PrintOptions.PrintInBlackAndWhite">
            <summary>
            Gets or sets the value indicating whether the worksheet should be printed in black and white.
            </summary>
            <value>The value indicating whether the worksheet should be printed in black and white.</value>
        </member>
        <member name="P:Infragistics.Excel.PrintOptions.PrintNotes">
            <summary>
            Gets or sets the way cell notes are printed.
            </summary>
            <remarks>
            <p class="body">
            If this is set to a value of PrintAsDisplayed, the notes will only print if they are displayed on the worksheet.
            If a notes are hidden but indicators are shown, neither the indicators nor the notes will prints.
            </p>
            </remarks>
            <exception cref="T:System.ComponentModel.InvalidEnumArgumentException">
            The assigned value is not defined in the <see cref="P:Infragistics.Excel.PrintOptions.PrintNotes"/> enumeration.
            </exception>
            <value>The way cell notes are printed.</value>
        </member>
        <member name="P:Infragistics.Excel.PrintOptions.PrintRowAndColumnHeaders">
            <summary>
            Gets or sets the value indicating whether to print row and column headers.
            </summary>
            <remarks>
            <p class="body">
            The row and column headers show the identifier of the row or column.
            </p>
            </remarks>
            <value>The value indicating whether to print row and column headers.</value>
            <seealso cref="P:Infragistics.Excel.DisplayOptions.ShowRowAndColumnHeaders"/>
        </member>
        <member name="P:Infragistics.Excel.PrintOptions.Resolution">
            <summary>
            Gets or sets the horizontal print resolution in DPI.
            </summary>
            <exception cref="T:System.ArgumentOutOfRangeException">
            The value assigned is outside the valid range of 0 and 65535.
            </exception>
            <value>The horizontal print resolution in DPI.</value>
            <seealso cref="P:Infragistics.Excel.PrintOptions.VerticalResolution"/>
        </member>
        <member name="P:Infragistics.Excel.PrintOptions.RightMargin">
            <summary>
            Gets or sets the margin at the right of each printed page of the worksheet.
            </summary>
            <exception cref="T:System.ArgumentOutOfRangeException">
            The assigned value is outside the valid margin range of 0 and 100.
            </exception>
            <value>The margin at the right of each printed page of the worksheet.</value>
            <seealso cref="P:Infragistics.Excel.PrintOptions.BottomMargin"/>
            <seealso cref="P:Infragistics.Excel.PrintOptions.FooterMargin"/>
            <seealso cref="P:Infragistics.Excel.PrintOptions.HeaderMargin"/>
            <seealso cref="P:Infragistics.Excel.PrintOptions.LeftMargin"/>
            <seealso cref="P:Infragistics.Excel.PrintOptions.TopMargin"/>
        </member>
        <member name="P:Infragistics.Excel.PrintOptions.ScalingFactor">
            <summary>
            Gets or sets the scaling factor to use when printing the worksheet.
            </summary>
            <remarks>
            <p class="body">
            The scaling factor is similar to magnifications in that is it stored as a percentage of the normal scaling. 
            A value of 100 indicates normal scaling whereas a value of 200 indicates the worksheet is scaled to twice its
            normal size.
            </p>
            <p class="note">
            <B>Note:</B> For ScalingFactor to affect the way the worksheet is printed, <see cref="P:Infragistics.Excel.PrintOptions.ScalingType"/> must be 
            set to a value of UseScalingFactor.
            </p>
            </remarks>
            <exception cref="T:System.ArgumentOutOfRangeException">
            The assigned value is outside the valid range of 10 and 400.
            </exception>
            <value>The scaling factor to use when printing the worksheet.</value>
            <seealso cref="P:Infragistics.Excel.PrintOptions.ScalingType"/>
            <seealso cref="P:Infragistics.Excel.WorksheetDisplayOptions.MagnificationInNormalView"/>
            <seealso cref="P:Infragistics.Excel.WorksheetDisplayOptions.MagnificationInPageBreakView"/>
            <seealso cref="P:Infragistics.Excel.WorksheetDisplayOptions.MagnificationInPageLayoutView"/>
            <seealso cref="P:Infragistics.Excel.CustomViewDisplayOptions.MagnificationInCurrentView"/>
        </member>
        <member name="P:Infragistics.Excel.PrintOptions.ScalingType">
            <summary>
            Gets or sets the method for scaling the worksheet when it is printed.
            </summary>
            <remarks>
            <p class="body">
            If this is set to a value of UseScalingFactor, <see cref="P:Infragistics.Excel.PrintOptions.ScalingFactor"/> is used to uniformly scale
            the worksheet on the printed pages.
            </p>
            <p class="body">
            If this is set to a value of FitToPages, <see cref="P:Infragistics.Excel.PrintOptions.MaxPagesHorizontally"/> and <see cref="P:Infragistics.Excel.PrintOptions.MaxPagesVertically"/>
            are used to set the maximum number of pages to fit the printed worksheet into in both directions.
            </p>
            </remarks>
            <exception cref="T:System.ComponentModel.InvalidEnumArgumentException">
            The assigned value is not defined in the <see cref="P:Infragistics.Excel.PrintOptions.ScalingType"/> enumeration.
            </exception>
            <value>The method for scaling the worksheet when it is printed.</value>
            <seealso cref="P:Infragistics.Excel.PrintOptions.MaxPagesHorizontally"/>
            <seealso cref="P:Infragistics.Excel.PrintOptions.MaxPagesVertically"/>
            <seealso cref="P:Infragistics.Excel.PrintOptions.ScalingFactor"/>
        </member>
        <member name="P:Infragistics.Excel.PrintOptions.StartPageNumber">
            <summary>
            Gets or sets the page number for the first printed page of the worksheet.
            </summary>
            <remarks>
            <p class="body">
            For this value to be used, <see cref="P:Infragistics.Excel.PrintOptions.PageNumbering"/> must be set to a value of UseStartPageNumber.
            </p>
            </remarks>
            <exception cref="T:System.ArgumentOutOfRangeException">
            The assigned value is outside the valid range of -32765 and 32767.
            </exception>
            <value>The page number for the first printed page of the worksheet.</value>
            <seealso cref="P:Infragistics.Excel.PrintOptions.PageNumbering"/>
        </member>
        <member name="P:Infragistics.Excel.PrintOptions.TopMargin">
            <summary>
            Gets or sets the margin at the top of each printed page of the worksheet.
            </summary>
            <exception cref="T:System.ArgumentOutOfRangeException">
            The assigned value is outside the valid margin range of 0 and 100.
            </exception>
            <value>The margin at the top of each printed page of the worksheet.</value>
            <seealso cref="P:Infragistics.Excel.PrintOptions.BottomMargin"/>
            <seealso cref="P:Infragistics.Excel.PrintOptions.FooterMargin"/>
            <seealso cref="P:Infragistics.Excel.PrintOptions.HeaderMargin"/>
            <seealso cref="P:Infragistics.Excel.PrintOptions.LeftMargin"/>
            <seealso cref="P:Infragistics.Excel.PrintOptions.RightMargin"/>
        </member>
        <member name="P:Infragistics.Excel.PrintOptions.VerticalResolution">
            <summary>
            Gets or sets the vertical print resolution in DPI.
            </summary>
            <exception cref="T:System.ArgumentOutOfRangeException">
            The value assigned is outside the valid range of 0 and 65535.
            </exception>
            <value>The vertical print resolution in DPI.</value>
            <seealso cref="P:Infragistics.Excel.PrintOptions.Resolution"/>
        </member>
        <member name="T:Infragistics.Excel.WorksheetShapeGroup">
            <summary>
            Represents a group of shapes in a worksheet.  This group is also a shape which can be 
            positioned and contained within another group or on a worksheet.
            </summary>
        </member>
        <member name="T:Infragistics.Excel.WorksheetShape">
            <summary>
            Abstract base class for all shapes (atomic or compound) in a worksheet.
            </summary>
            <remarks>
            <p class="body">
            Atomic shapes are singular shape entities, such as an image, a polygon, or text.
            Compound shapes are groupings of shapes, and are represented by <see cref="T:Infragistics.Excel.WorksheetShapeGroup"/>
            instances.
            </p>
            <p class="body">
            Currently, not all shape information is customizable (such as shape rotation).  However,
            for round-tripping purposes, when a shape is loaded from an Excel file, this 
            information in maintained with the shape.  See <see cref="M:Infragistics.Excel.WorksheetShape.ClearUnknownData"/> for more
            information about unsupported data.
            </p>
            </remarks>
        </member>
        <member name="M:Infragistics.Excel.WorksheetShape.ClearUnknownData">
            <summary>
            Clears the cached unknown shape data which was read in from a parsed excel file.
            </summary>
            <remarks>
            <p class="body">
            This method will only be needed until all shape information is supported and customizable.
            After all shape data can be controlled, this method will become obsolete. Currently, all
            unsupported data will be stored with the shape for round-tripping purposes.  For example, 
            if an Excel file with complex and unsupported shapes is loaded into a 
            <see cref="T:Infragistics.Excel.Workbook"/> instance, some cell values are changed, and it is saved to
            the same file, the complex shapes will still exist in the workbook.  However, if a
            loaded shape needs to be modified before it is saved back, this method
            allows for that unsupported data to be removed while all supported data is maintained.
            </p>
            <p class="note">
            <B>Note:</B> This method only clears unsupported data.  In future versions of the product, 
            as more shape data is supported, this method will have different effects on the shape, 
            until eventually all data is supported and this method will have no effect on the shape.
            </p>
            </remarks>
            <exception cref="T:System.InvalidOperationException">
            This method is called on an <see cref="T:Infragistics.Excel.UnknownShape"/> instance.
            </exception>
        </member>
        <member name="M:Infragistics.Excel.WorksheetShape.GetBoundsInTwips">
            <summary>
            Gets the bounds of the shape in twips (1/20th of a point).
            </summary>
            <remarks>
            <p class="body">
            The bounds returned by this method are only valid with the current configuration of the worksheet.
            If any rows or columns before or within the shape are resized, these bounds will no longer reflect the 
            position of the shape.
            </p>
            </remarks>
            <exception cref="T:System.InvalidOperationException">
            The <see cref="P:Infragistics.Excel.WorksheetShape.TopLeftCornerCell"/> or <see cref="P:Infragistics.Excel.WorksheetShape.BottomRightCornerCell"/> are null, in which case the shape has no bounds.
            </exception>
            <returns>The bounds of the shape on its worksheet.</returns>
            <seealso cref="M:Infragistics.Excel.WorksheetShape.SetBoundsInTwips(Infragistics.Excel.Worksheet,System.Drawing.Rectangle)"/>
        </member>
        <member name="M:Infragistics.Excel.WorksheetShape.SetBoundsInTwips(Infragistics.Excel.Worksheet,System.Drawing.Rectangle)">
            <summary>
            Sets the bounds of the shape in twips (1/20th of a point).
            </summary>
            <remarks>
            <p class="body">
            The shape will only be position at the specified bounds while the worksheet remains in the current configuration.
            If any rows or columns before or within the shape are resized, the shape will no longer be placed at the bounds specified.
            </p>
            </remarks>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="worksheet"/> is null.
            </exception>
            <param name="worksheet">The worksheet on which the shape should be placed.</param>
            <param name="bounds">The new bounds where the shape should be placed.</param> 
        </member>
        <member name="P:Infragistics.Excel.WorksheetShape.BottomRightCornerCell">
            <summary>
            Gets or sets the cell where the bottom-right corner of the shape resides.
            </summary>
            <remarks>
            <p class="body">
            This anchor cell, along with the <see cref="P:Infragistics.Excel.WorksheetShape.TopLeftCornerCell"/>, determines where the shape will be
            positioned on the worksheet.  In addition, the <see cref="P:Infragistics.Excel.WorksheetShape.BottomRightCornerPosition"/> and 
            <see cref="P:Infragistics.Excel.WorksheetShape.TopLeftCornerPosition"/> properties allow for finer control of the shape's position.
            </p>
            </remarks>
            <exception cref="T:System.ArgumentException">
            The value assigned is a cell whose worksheet is not the same as this shape's worksheet.
            </exception>
            <exception cref="T:System.ArgumentNullException">
            The value assigned is null and this shape already exists on a worksheet or group.
            </exception>
            <value>The cell where the bottom-right corner of the shape resides.</value>
            <seealso cref="P:Infragistics.Excel.WorksheetShape.BottomRightCornerPosition"/>
            <seealso cref="P:Infragistics.Excel.WorksheetShape.TopLeftCornerCell"/>
            <seealso cref="P:Infragistics.Excel.WorksheetShape.TopLeftCornerPosition"/>
        </member>
        <member name="P:Infragistics.Excel.WorksheetShape.BottomRightCornerPosition">
            <summary>
            Gets or sets the position in the <see cref="P:Infragistics.Excel.WorksheetShape.BottomRightCornerCell"/> of the shape's bottom-right corner,
            expressed in percentages.
            </summary>
            <remarks>
            <p class="body">
            These percentages are expressed as distance across the associated dimension of the cell, starting at the 
            top-left corner of the cell.  For example, (0.0, 0.0) represents the top-left corner of the cell, whereas
            (100.0, 100.0) represents the bottom-right corner of the cell.  (50.0, 10.0) would represent the location 
            in the cell which is centered horizontally, and a tenth of the way down from the top.
            </p>
            </remarks>
            <exception cref="T:System.ArgumentOutOfRangeException">
            Either coordinate of the value assigned is outside the range of 0.0 to 100.0.
            </exception>
            <value>The position in the bottom-right corner cell of the shape's bottom-right corner.</value>
            <seealso cref="P:Infragistics.Excel.WorksheetShape.BottomRightCornerCell"/>
            <seealso cref="P:Infragistics.Excel.WorksheetShape.TopLeftCornerCell"/>
            <seealso cref="P:Infragistics.Excel.WorksheetShape.TopLeftCornerPosition"/>
        </member>
        <member name="P:Infragistics.Excel.WorksheetShape.PositioningMode">
            <summary>
            Gets or sets the way shapes will be repositioned in excel when cells before or within the shape are resized.
            </summary>
            <remarks>
            <p class="body">
            This value will not be saved for shapes contained in a <see cref="T:Infragistics.Excel.WorksheetShapeGroup"/>, which inherit their
            positioning mode from their parent group.
            </p>
            <p class="note">
            <b>Note:</b> This property setting will only have an effect in Microsoft Excel. It has no bearing on the shape's position 
            when related rows and columns are resized though the Excel assembly. In these situations, shapes will act as though the 
            PositioningMode is set to MoveAndSizeWithCells.
            </p>
            </remarks>
            <exception cref="T:System.ComponentModel.InvalidEnumArgumentException">
            The value assigned is not defined in the <see cref="T:Infragistics.Excel.ShapePositioningMode"/> enumeration.
            </exception>
            <value>The way shapes will be repositioned in excel when cells before or within the shape are resized.</value>
        </member>
        <member name="P:Infragistics.Excel.WorksheetShape.TopLeftCornerCell">
            <summary>
            Gets or sets the cell where the top-left corner of the shape resides.
            </summary>
            <remarks>
            <p class="body">
            This anchor cell, along with the <see cref="P:Infragistics.Excel.WorksheetShape.BottomRightCornerCell"/>, determines where the shape will be
            positioned on the worksheet.  In addition, the <see cref="P:Infragistics.Excel.WorksheetShape.BottomRightCornerPosition"/> and 
            <see cref="P:Infragistics.Excel.WorksheetShape.TopLeftCornerPosition"/> properties allow for finer control of the shape's position.
            </p>
            </remarks>
            <exception cref="T:System.ArgumentException">
            The value assigned is a cell whose worksheet is not the same as this shape's worksheet.
            </exception>
            <exception cref="T:System.ArgumentNullException">
            The value assigned is null and this shape already exists on a worksheet or group.
            </exception>
            <value>The cell where the top-left corner of the shape resides.</value>
            <seealso cref="P:Infragistics.Excel.WorksheetShape.BottomRightCornerCell"/>
            <seealso cref="P:Infragistics.Excel.WorksheetShape.BottomRightCornerPosition"/>
            <seealso cref="P:Infragistics.Excel.WorksheetShape.TopLeftCornerPosition"/>
        </member>
        <member name="P:Infragistics.Excel.WorksheetShape.TopLeftCornerPosition">
            <summary>
            Gets or sets the position in the <see cref="P:Infragistics.Excel.WorksheetShape.TopLeftCornerCell"/> of the shape's top-left corner,
            expressed in percentages.
            </summary>
            <remarks>
            <p class="body">
            These percentages are expressed as distance across the associated dimension of the cell, starting at the 
            top-left corner of the cell.  For example, (0.0, 0.0) represents the top-left corner of the cell, whereas
            (100.0, 100.0) represents the bottom-right corner of the cell.  (50.0, 10.0) would represent the location 
            in the cell which is centered horizontally, and a tenth of the way down from the top.
            </p>
            </remarks>
            <exception cref="T:System.ArgumentOutOfRangeException">
            Either coordinate of the value assigned is outside the range of 0.0 to 100.0.
            </exception>
            <value>The position in the top-left corner cell of the shape's top-left corner.</value>
            <seealso cref="P:Infragistics.Excel.WorksheetShape.BottomRightCornerCell"/>
            <seealso cref="P:Infragistics.Excel.WorksheetShape.BottomRightCornerPosition"/>
            <seealso cref="P:Infragistics.Excel.WorksheetShape.TopLeftCornerCell"/>
        </member>
        <member name="P:Infragistics.Excel.WorksheetShape.Worksheet">
            <summary>
            Gets the worksheet on which the shape resides.
            </summary>
            <value>The worksheet on which the shape resides.</value>
        </member>
        <member name="M:Infragistics.Excel.WorksheetShapeGroup.#ctor">
            <summary>
            Creates a new WorksheetShapeGroup instance.
            </summary>
        </member>
        <member name="P:Infragistics.Excel.WorksheetShapeGroup.Shapes">
            <summary>
            Gets the collection of shapes contained in the group.
            </summary>
            <value>The collection of shapes contained in the group.</value>
        </member>
        <member name="M:Infragistics.Excel.Serialization.WorkbookSerializationManager.WriteWorkbookGlobals(System.Boolean,System.Collections.Generic.List{System.UInt32}@)">
            <summary>
            Writes the global records that define the workbook data (not the worksheets).
            </summary>
            <param name="hasShapes">True if any workshete in the workbookhas shapes; False otherwise</param>
            <param name="boundSheetRecordPositions">
            Out paramter which will contain the absolute stream position of the BOUNDSHEET records.
            </param>
        </member>
        <member name="T:Infragistics.Excel.DocumentProperties">
            <summary>
            Class which exposes the document level properties for a Microsoft Excel file.
            </summary>
            <remarks>
            <p class="body">
            The properties exposed by this class can be changed on a Microsoft Excel file by right-clicking it
            in Windows Explorer and editing the properties on the Summary tab.
            </p>
            </remarks>
        </member>
        <member name="P:Infragistics.Excel.DocumentProperties.Author">
            <summary>
            Gets or sets the author of the document.
            </summary>
            <remarks>
            <p class="body">
            The value of the property has no effect on the contents of the file when opened in a host application.
            It is simply extra data associated with the document.
            </p>
            </remarks>
            <value>A string specifying the author of the document.</value>
        </member>
        <member name="P:Infragistics.Excel.DocumentProperties.Category">
            <summary>
            Gets or sets the category of the document.
            </summary>
            <remarks>
            <p class="body">
            The value of the property has no effect on the contents of the file when opened in a host application.
            It is simply extra data associated with the document.
            </p>
            </remarks>
            <value>A string specifying the category of the document.</value>
        </member>
        <member name="P:Infragistics.Excel.DocumentProperties.Comments">
            <summary>
            Gets or sets the comments associated with the document.
            </summary>
            <remarks>
            <p class="body">
            The value of the property has no effect on the contents of the file when opened in a host application.
            It is simply extra data associated with the document.
            </p>
            </remarks>
            <value>A string specifying the comments associated with the document.</value>
        </member>
        <member name="P:Infragistics.Excel.DocumentProperties.Company">
            <summary>
            Gets or sets the company to which the document belongs.
            </summary>
            <remarks>
            <p class="body">
            The value of the property has no effect on the contents of the file when opened in a host application.
            It is simply extra data associated with the document.
            </p>
            </remarks>
            <value>A string specifying the company to which the document belongs.</value>
        </member>
        <member name="P:Infragistics.Excel.DocumentProperties.Keywords">
            <summary>
            Gets or sets the keywords which describe the document.
            </summary>
            <remarks>
            <p class="body">
            The value of the property has no effect on the contents of the file when opened in a host application.
            It is simply extra data associated with the document.
            </p>
            </remarks>
            <value>A string specifying the keywords which describe the document.</value>
        </member>
        <member name="P:Infragistics.Excel.DocumentProperties.Manager">
            <summary>
            Gets or sets the manager associated with the document.
            </summary>
            <remarks>
            <p class="body">
            The value of the property has no effect on the contents of the file when opened in a host application.
            It is simply extra data associated with the document.
            </p>
            </remarks>
            <value>A string specifying the manager associated with the document.</value>
        </member>
        <member name="P:Infragistics.Excel.DocumentProperties.Status">
            <summary>
            Gets or sets the current status of the document.
            </summary>
            <remarks>
            <p class="body">
            The value of the property has no effect on the contents of the file when opened in a host application.
            It is simply extra data associated with the document.
            </p>
            </remarks>
            <value>A string representing the current status of the document.</value>
        </member>
        <member name="P:Infragistics.Excel.DocumentProperties.Subject">
            <summary>
            Gets or sets the subject of the contents of the document.
            </summary>
            <remarks>
            <p class="body">
            The value of the property has no effect on the contents of the file when opened in a host application.
            It is simply extra data associated with the document.
            </p>
            </remarks>
            <value>A string specifying the subject of the contents of the document.</value>
        </member>
        <member name="P:Infragistics.Excel.DocumentProperties.Title">
            <summary>
            Gets or sets the title of the document.
            </summary>
            <remarks>
            <p class="body">
            The value of the property has no effect on the contents of the file when opened in a host application.
            It is simply extra data associated with the document.
            </p>
            </remarks>
            <value>A string specifying the title of the document.</value>
        </member>
        <member name="T:Infragistics.Excel.CalculationMode">
            <summary>
            Represents the the ways formulas are recalculated when their referenced values change.
            </summary>
            <seealso cref="P:Infragistics.Excel.Workbook.CalculationMode"/>
        </member>
        <member name="F:Infragistics.Excel.CalculationMode.Manual">
            <summary>
            Formulas must be recalculated manually, by pressing a button in the Microsoft Excel interface.
            </summary>
        </member>
        <member name="F:Infragistics.Excel.CalculationMode.Automatic">
            <summary>
            Formulas and data tables are automatically recalculated when the values in referenced cells change.
            </summary>
        </member>
        <member name="F:Infragistics.Excel.CalculationMode.AutomaticExceptForDataTables">
            <summary>
            Only formulas are automatically recalculated when the values in referenced cells change.
            Data tables must be recalculated manually.
            </summary>
        </member>
        <member name="T:Infragistics.Excel.CellBorderLineStyle">
            <summary>
            Represents the different cell border line styles.
            </summary>
        </member>
        <member name="F:Infragistics.Excel.CellBorderLineStyle.Default">
            <summary>
            Use the default border line style.
            </summary>
        </member>
        <member name="F:Infragistics.Excel.CellBorderLineStyle.None">
            <summary>
            No border.
            </summary>
        </member>
        <member name="F:Infragistics.Excel.CellBorderLineStyle.Thin">
            <summary>
            Thin border.
            </summary>
        </member>
        <member name="F:Infragistics.Excel.CellBorderLineStyle.Medium">
            <summary>
            Medium border.
            </summary>
        </member>
        <member name="F:Infragistics.Excel.CellBorderLineStyle.Dashed">
            <summary>
            Dashed border.
            </summary>
        </member>
        <member name="F:Infragistics.Excel.CellBorderLineStyle.Dotted">
            <summary>
            Dotted border.
            </summary>
        </member>
        <member name="F:Infragistics.Excel.CellBorderLineStyle.Thick">
            <summary>
            Thick border.
            </summary>
        </member>
        <member name="F:Infragistics.Excel.CellBorderLineStyle.Double">
            <summary>
            Double-line border.
            </summary>
        </member>
        <member name="F:Infragistics.Excel.CellBorderLineStyle.Hair">
            <summary>
            Dotted border with small dots.
            </summary>
        </member>
        <member name="F:Infragistics.Excel.CellBorderLineStyle.MediumDashed">
            <summary>
            Dotted border with big dots.
            </summary>
        </member>
        <member name="F:Infragistics.Excel.CellBorderLineStyle.DashDot">
            <summary>
            Dash-dot border.
            </summary>
        </member>
        <member name="F:Infragistics.Excel.CellBorderLineStyle.MediumDashDot">
            <summary>
            Medium dash-dot border.
            </summary>
        </member>
        <member name="F:Infragistics.Excel.CellBorderLineStyle.DashDotDot">
            <summary>
            Dash-dot-dot border.
            </summary>
        </member>
        <member name="F:Infragistics.Excel.CellBorderLineStyle.MediumDashDotDot">
            <summary>
            Medium dash-dot-dot border.
            </summary>
        </member>
        <member name="F:Infragistics.Excel.CellBorderLineStyle.SlantedDashDot">
            <summary>
            Slanted dash-dot border.
            </summary>
        </member>
        <member name="T:Infragistics.Excel.CellReferenceMode">
            <summary>
            Represents the various ways cells can be referenced in a formula.
            </summary>
            <remarks>
            <p class="body">
            Setting this on the <see cref="P:Infragistics.Excel.Workbook.CellReferenceMode"/> will also affect the row and column labels.
            </p>
            </remarks>
        </member>
        <member name="F:Infragistics.Excel.CellReferenceMode.A1">
            <summary>
            Cells are referenced by first specifying characters representing the column and a one-based number 
            specifying the row (R54 or CA56). The dollar sign ($) can preface one or both identifiers to make them 
            absolute references ($A$7). Without the dollar sign, references still use absolute row and column addresses,
            although shifting a formula to a new cell will perform a similar shift on all relative references.
            </summary>
        </member>
        <member name="F:Infragistics.Excel.CellReferenceMode.R1C1">
            <summary>
            Cells are referenced in the following format R&lt;RowIndex&gt;C&lt;ColumnIndex&gt; (R34C5 or R2C345). 
            These indices are one-based and represent absolute references. To create a relative reference in R1C1 mode, a relative
            index must be placed inside square brackets following the R and/or C ( R[-1]C[5] or R9C[-3] ).  An R by itself 
            also represents a relative reference and is equivalent to R[0]. Similarly, C is equivalent to C[0], which means a 
            formula of =RC always references the cell which contains the formula.
            </summary>
        </member>
        <member name="T:Infragistics.Excel.DateSystem">
            <summary>
            Represents the various ways a date can be stored internally.
            </summary>
        </member>
        <member name="F:Infragistics.Excel.DateSystem.From1900">
            <summary>
            Dates are stored as time elapsed since 1900.
            </summary>
        </member>
        <member name="F:Infragistics.Excel.DateSystem.From1904">
            <summary>
            Dates are stored as time elapsed since 1904 (used mainly on Apple computers).
            </summary>
        </member>
        <member name="T:Infragistics.Excel.ExcelDefaultableBoolean">
            <summary>
            Enumeration for a boolean type property that allows for a
            default setting. This is used in property override situations.
            </summary>
        </member>
        <member name="F:Infragistics.Excel.ExcelDefaultableBoolean.Default">
            <summary>
            Use the current default.
            </summary>
        </member>
        <member name="F:Infragistics.Excel.ExcelDefaultableBoolean.True">
            <summary>
            True.
            </summary>
        </member>
        <member name="F:Infragistics.Excel.ExcelDefaultableBoolean.False">
            <summary>
            False.
            </summary>
        </member>
        <member name="T:Infragistics.Excel.FillPatternStyle">
            <summary>
            Enumeration for fill pattern styles. Default value is used in property override situations.
            </summary>
        </member>
        <member name="F:Infragistics.Excel.FillPatternStyle.Default">
            <summary>
            Use the current default.
            </summary>
        </member>
        <member name="F:Infragistics.Excel.FillPatternStyle.None">
            <summary>
            No fill pattern.
            </summary>
        </member>
        <member name="F:Infragistics.Excel.FillPatternStyle.Solid">
            <summary>
            Solid fill pattern with fill pattern foreground color. 
            </summary>
        </member>
        <member name="F:Infragistics.Excel.FillPatternStyle.Gray50percent">
            <summary>
            "50% gray" fill pattern.
            </summary>
        </member>
        <member name="F:Infragistics.Excel.FillPatternStyle.Gray75percent">
            <summary>
            "75% gray" fill pattern.
            </summary>
        </member>
        <member name="F:Infragistics.Excel.FillPatternStyle.Gray25percent">
            <summary>
            "25% gray" fill pattern.
            </summary>
        </member>
        <member name="F:Infragistics.Excel.FillPatternStyle.HorizontalStripe">
            <summary>
            Horizontal stripe fill pattern.
            </summary>
        </member>
        <member name="F:Infragistics.Excel.FillPatternStyle.VerticalStripe">
            <summary>
            Vertical stripe fill pattern.
            </summary>
        </member>
        <member name="F:Infragistics.Excel.FillPatternStyle.ReverseDiagonalStripe">
            <summary>
            Reverse diagonal stripe fill pattern.
            </summary>
        </member>
        <member name="F:Infragistics.Excel.FillPatternStyle.DiagonalStripe">
            <summary>
            Diagonal stripe fill pattern.
            </summary>
        </member>
        <member name="F:Infragistics.Excel.FillPatternStyle.DiagonalCrosshatch">
            <summary>
            Diagonal crosshatch fill pattern.
            </summary>
        </member>
        <member name="F:Infragistics.Excel.FillPatternStyle.ThickDiagonalCrosshatch">
            <summary>
            Thick diagonal crosshatch fill pattern.
            </summary>
        </member>
        <member name="F:Infragistics.Excel.FillPatternStyle.ThinHorizontalStripe">
            <summary>
            Thin horizontal stripe fill pattern.
            </summary>
        </member>
        <member name="F:Infragistics.Excel.FillPatternStyle.ThinVerticalStripe">
            <summary>
            Thin vertical stripe fill pattern.
            </summary>
        </member>
        <member name="F:Infragistics.Excel.FillPatternStyle.ThinReverseDiagonalStripe">
            <summary>
            Thin reverse diagonal stripe fill pattern.
            </summary>
        </member>
        <member name="F:Infragistics.Excel.FillPatternStyle.ThinDiagonalStripe">
            <summary>
            Thin diagonal stripe fill pattern.
            </summary>
        </member>
        <member name="F:Infragistics.Excel.FillPatternStyle.ThinHorizontalCrosshatch">
            <summary>
            Thin horizontal crosshatch fill pattern.
            </summary>
        </member>
        <member name="F:Infragistics.Excel.FillPatternStyle.ThinDiagonalCrosshatch">
            <summary>
            Thin diagonal crosshatch fill pattern.
            </summary>
        </member>
        <member name="F:Infragistics.Excel.FillPatternStyle.Gray12percent">
            <summary>
            "12.5% gray" fill pattern.
            </summary>
        </member>
        <member name="F:Infragistics.Excel.FillPatternStyle.Gray6percent">
            <summary>
            "6.25% gray" fill pattern.
            </summary>
        </member>
        <member name="T:Infragistics.Excel.FontSuperscriptSubscriptStyle">
            <summary>
            Enumeration for font superscript or subscript style. Default value is used in property override situations.
            </summary>
        </member>
        <member name="F:Infragistics.Excel.FontSuperscriptSubscriptStyle.Default">
            <summary>
            Use the current default.
            </summary>
        </member>
        <member name="F:Infragistics.Excel.FontSuperscriptSubscriptStyle.None">
            <summary>
            No superscript or subscript style.
            </summary>
        </member>
        <member name="F:Infragistics.Excel.FontSuperscriptSubscriptStyle.Superscript">
            <summary>
            Superscript style.
            </summary>
        </member>
        <member name="F:Infragistics.Excel.FontSuperscriptSubscriptStyle.Subscript">
            <summary>
            Subscript style.
            </summary>
        </member>
        <member name="T:Infragistics.Excel.FontUnderlineStyle">
            <summary>
            Enumeration for font underline styles. Default value is used in property override situations.
            </summary>
        </member>
        <member name="F:Infragistics.Excel.FontUnderlineStyle.Default">
            <summary>
            Use the current default.
            </summary>
        </member>
        <member name="F:Infragistics.Excel.FontUnderlineStyle.None">
            <summary>
            No underline style.
            </summary>
        </member>
        <member name="F:Infragistics.Excel.FontUnderlineStyle.Single">
            <summary>
            Single underline style.
            </summary>
        </member>
        <member name="F:Infragistics.Excel.FontUnderlineStyle.Double">
            <summary>
            Double underline style.
            </summary>
        </member>
        <member name="F:Infragistics.Excel.FontUnderlineStyle.SingleAccounting">
            <summary>
            Single accounting underline style.
            </summary>
        </member>
        <member name="F:Infragistics.Excel.FontUnderlineStyle.DoubleAccounting">
            <summary>
            Double accounting underline style.
            </summary>
        </member>
        <member name="T:Infragistics.Excel.HorizontalCellAlignment">
            <summary>
            Enumeration for horizontal alignment styles. Default value is used in property override situations.
            </summary>
        </member>
        <member name="F:Infragistics.Excel.HorizontalCellAlignment.Default">
            <summary>
            Use the current default.
            </summary>
        </member>
        <member name="F:Infragistics.Excel.HorizontalCellAlignment.General">
            <summary>
            Alignment depends on underlying data type.
            </summary>
        </member>
        <member name="F:Infragistics.Excel.HorizontalCellAlignment.Left">
            <summary>
            Left alignment.
            </summary>
        </member>
        <member name="F:Infragistics.Excel.HorizontalCellAlignment.Center">
            <summary>
            Centered alignment.
            </summary>
        </member>
        <member name="F:Infragistics.Excel.HorizontalCellAlignment.Right">
            <summary>
            Right alignment.
            </summary>
        </member>
        <member name="F:Infragistics.Excel.HorizontalCellAlignment.Fill">
            <summary>
            Repeat cell value to fill whole cell.
            </summary>
        </member>
        <member name="F:Infragistics.Excel.HorizontalCellAlignment.Justify">
            <summary>
            Justify alignment.
            </summary>
        </member>
        <member name="F:Infragistics.Excel.HorizontalCellAlignment.CenterAcrossSelection">
            <summary>
            Centers the contents of the left-most cell in a center across selection group. All other cells in the center across selection group must be empty. The cells are not merged, and the data may appear to be in a cell other than the left-most cell.
            </summary>
        </member>
        <member name="T:Infragistics.Excel.ObjectDisplayStyle">
            <summary>
            Represents the various way objects and shapes are displayed in the workbook.
            </summary>
        </member>
        <member name="F:Infragistics.Excel.ObjectDisplayStyle.ShowAll">
            <summary>
            All object are be shown.
            </summary>
        </member>
        <member name="F:Infragistics.Excel.ObjectDisplayStyle.ShowPlaceholders">
            <summary>
            Placeholders are shown in place of objects.
            </summary>
        </member>
        <member name="F:Infragistics.Excel.ObjectDisplayStyle.HideAll">
            <summary>
            No objects or shapes are shown.
            </summary>
        </member>
        <member name="T:Infragistics.Excel.Orientation">
            <summary>
            Represents the page orientations available when a worksheet is printed.
            </summary>
        </member>
        <member name="F:Infragistics.Excel.Orientation.Landscape">
            <summary>
            The page is printed with the larger dimension horizontal.
            </summary>
        </member>
        <member name="F:Infragistics.Excel.Orientation.Portrait">
            <summary>
            The page is printed with the larger dimension vertical.
            </summary>
        </member>
        <member name="T:Infragistics.Excel.PageOrder">
            <summary>
            Represents the ways to order the pages of multiple page worksheets.
            </summary>
        </member>
        <member name="F:Infragistics.Excel.PageOrder.DownThenOver">
            <summary>
            The first page to print is the top-left page. The next pages printed are below the first page.  
            When there are no more pages below, the page to the right of the top-left page is printed, then the pages 
            below it, and so on.
            </summary>
        </member>
        <member name="F:Infragistics.Excel.PageOrder.OverThenDown">
            <summary>
            The first page to print is the top-left page. The next pages printed are right of the first page.  
            When there are no more pages to the right, the page below the top-left page is printed, then the pages 
            to the right of it, and so on.
            </summary>
        </member>
        <member name="T:Infragistics.Excel.PageNumbering">
            <summary>
            Represents the way pages are numbered when printed.
            </summary>
        </member>
        <member name="F:Infragistics.Excel.PageNumbering.Automatic">
            <summary>
            Pages are automatically numbered based on the style of the worksheet.
            </summary>
        </member>
        <member name="F:Infragistics.Excel.PageNumbering.UseStartPageNumber">
            <summary>
            The starting page number specified is used for the first page, additional
            pages receive a page number that it one greater than the previous page.
            </summary>
        </member>
        <member name="T:Infragistics.Excel.PaneLocation">
            <summary>
            Represents the locations of the various panes which could exist in a multi-pane
            view of a worksheet.
            </summary>
        </member>
        <member name="F:Infragistics.Excel.PaneLocation.BottomRight">
            <summary>
            The bottom-right pane of the worksheet. This location is only valid if the worksheet
            is split both horizontally and veritcally.
            </summary>
        </member>
        <member name="F:Infragistics.Excel.PaneLocation.TopRight">
            <summary>
            The top-right pane of the worksheet. This location is only valid if the worksheet
            is split vertically. If the worksheet is only has left and right panes, this is the 
            location of the right pane.
            </summary>
        </member>
        <member name="F:Infragistics.Excel.PaneLocation.BottomLeft">
            <summary>
            The bottom-left pane of the worksheet. This location is only valid is the worksheet
            is split horizontally. If the worksheet only has top and bottom panes, this is the 
            location of the bottom pane.
            </summary>
        </member>
        <member name="F:Infragistics.Excel.PaneLocation.TopLeft">
            <summary>
            This top-left pane of the worksheet. This location is always valid. If the worksheet
            does not have any pane splits, this is the only pane. If the worksheet only has top
            and bottom panes, this is the location of the top pane. If the worksheet only has
            left and right panes, this is the location of the left pane.
            </summary>
        </member>
        <member name="T:Infragistics.Excel.PaperSize">
            <summary>
            Represents the various paper sizes available for printing.
            </summary>
        </member>
        <member name="F:Infragistics.Excel.PaperSize.Undefined">
            <summary>
            Undefined
            </summary>
        </member>
        <member name="F:Infragistics.Excel.PaperSize.Letter">
            <summary>
            Letter 8 1/2\" x 11\"
            </summary>
        </member>
        <member name="F:Infragistics.Excel.PaperSize.LetterSmall">
            <summary>
            Letter small 8 1/2\" x 11\"
            </summary>
        </member>
        <member name="F:Infragistics.Excel.PaperSize.Tabloid">
            <summary>
            Tabloid 11\" x 17\"
            </summary>
        </member>
        <member name="F:Infragistics.Excel.PaperSize.Ledger">
            <summary>
            Ledger 17\" x 11\"
            </summary>
        </member>
        <member name="F:Infragistics.Excel.PaperSize.Legal">
            <summary>
            Legal 8 1/2\" x 14\"
            </summary>
        </member>
        <member name="F:Infragistics.Excel.PaperSize.Statement">
            <summary>
            Statement 5 1/2\" x 8 1/2\"
            </summary>
        </member>
        <member name="F:Infragistics.Excel.PaperSize.Executive">
            <summary>
            Executive 7 1/4\" x 10 1/2\"
            </summary>
        </member>
        <member name="F:Infragistics.Excel.PaperSize.A3">
            <summary>
            A3 297mm x 420mm
            </summary>
        </member>
        <member name="F:Infragistics.Excel.PaperSize.A4">
            <summary>
            A4 210mm x 297mm
            </summary>
        </member>
        <member name="F:Infragistics.Excel.PaperSize.A4Small">
            <summary>
            A4 small 210mm x 297mm
            </summary>
        </member>
        <member name="F:Infragistics.Excel.PaperSize.A5">
            <summary>
            A5 148mm x 210mm
            </summary>
        </member>
        <member name="F:Infragistics.Excel.PaperSize.B4JIS">
            <summary>
            B4 (JIS) 257mm x 364mm
            </summary>
        </member>
        <member name="F:Infragistics.Excel.PaperSize.B5JIS">
            <summary>
            B5 (JIS) 182mm x 257mm
            </summary>
        </member>
        <member name="F:Infragistics.Excel.PaperSize.Folio">
            <summary>
            Folio 8 1/2\" x 13\"
            </summary>
        </member>
        <member name="F:Infragistics.Excel.PaperSize.Quarto">
            <summary>
            Quarto 215mm x 275mm
            </summary>
        </member>
        <member name="F:Infragistics.Excel.PaperSize.Size10x14">
            <summary>
            10x14 10\" x 14\"
            </summary>
        </member>
        <member name="F:Infragistics.Excel.PaperSize.Size11x17">
            <summary>
            11x17 11\" x 17\"
            </summary>
        </member>
        <member name="F:Infragistics.Excel.PaperSize.Note">
            <summary>
            Note 8 1/2\" x 11\"
            </summary>
        </member>
        <member name="F:Infragistics.Excel.PaperSize.Envelope9">
            <summary>
            Envelope #9 3 7/8\" x 8 7/8\"
            </summary>
        </member>
        <member name="F:Infragistics.Excel.PaperSize.Envelope10">
            <summary>
            Envelope #10 4 1/8\" x 9 1/2\"
            </summary>
        </member>
        <member name="F:Infragistics.Excel.PaperSize.Envelope11">
            <summary>
            Envelope #11 4 1/2\" x 10 3/8\"
            </summary>
        </member>
        <member name="F:Infragistics.Excel.PaperSize.Envelope12">
            <summary>
            Envelope #12 4 3/4\" x 11\"
            </summary>
        </member>
        <member name="F:Infragistics.Excel.PaperSize.Envelope14">
            <summary>
            Envelope #14 5\" x 11 1/2\"
            </summary>
        </member>
        <member name="F:Infragistics.Excel.PaperSize.C">
            <summary>
            C 17\" x 22\"
            </summary>
        </member>
        <member name="F:Infragistics.Excel.PaperSize.D">
            <summary>
            D 22\" x 34\"
            </summary>
        </member>
        <member name="F:Infragistics.Excel.PaperSize.E">
            <summary>
            E 34\" x 44\"
            </summary>
        </member>
        <member name="F:Infragistics.Excel.PaperSize.EnvelopeDL">
            <summary>
            Envelope DL 110mm x 220mm
            </summary>
        </member>
        <member name="F:Infragistics.Excel.PaperSize.EnvelopeC5">
            <summary>
            Envelope C5 162mm x 229mm
            </summary>
        </member>
        <member name="F:Infragistics.Excel.PaperSize.EnvelopeC3">
            <summary>
            Envelope C3 324mm x 458mm
            </summary>
        </member>
        <member name="F:Infragistics.Excel.PaperSize.EnvelopeC4">
            <summary>
            Envelope C4 229mm x 324mm
            </summary>
        </member>
        <member name="F:Infragistics.Excel.PaperSize.EnvelopeC6">
            <summary>
            Envelope C6 114mm x 162mm
            </summary>
        </member>
        <member name="F:Infragistics.Excel.PaperSize.EnvelopeC6C5">
            <summary>
            Envelope C6/C5 114mm x 229mm
            </summary>
        </member>
        <member name="F:Infragistics.Excel.PaperSize.B4ISO_1">
            <summary>
            B4 (ISO) 250mm x 353mm
            </summary>
        </member>
        <member name="F:Infragistics.Excel.PaperSize.B5ISO">
            <summary>
            B5 (ISO) 176mm x 250mm
            </summary>
        </member>
        <member name="F:Infragistics.Excel.PaperSize.B6ISO">
            <summary>
            B6 (ISO) 125mm x 176mm
            </summary>
        </member>
        <member name="F:Infragistics.Excel.PaperSize.EnvelopeItaly">
            <summary>
            Envelope Italy 110mm x 230mm
            </summary>
        </member>
        <member name="F:Infragistics.Excel.PaperSize.EnvelopeMonarch">
            <summary>
            Envelope Monarch 3 7/8\" x 7 1/2\"
            </summary>
        </member>
        <member name="F:Infragistics.Excel.PaperSize.Size634Envelope">
            <summary>
            6 3/4 Envelope 3 5/8\" x 6 1/2\"
            </summary>
        </member>
        <member name="F:Infragistics.Excel.PaperSize.USStandardFanfold">
            <summary>
            US Standard Fanfold 14 7/8\" x 11\"
            </summary>
        </member>
        <member name="F:Infragistics.Excel.PaperSize.GermanStandardFanfold">
            <summary>
            German Std. Fanfold 8 1/2\" x 12\"
            </summary>
        </member>
        <member name="F:Infragistics.Excel.PaperSize.GermanLegalFanfold">
            <summary>
            German Legal Fanfold 8 1/2\" x 13\"
            </summary>
        </member>
        <member name="F:Infragistics.Excel.PaperSize.B4ISO_2">
            <summary>
            B4 (ISO) 250mm x 353mm
            </summary>
        </member>
        <member name="F:Infragistics.Excel.PaperSize.JapanesePostcard">
            <summary>
            Japanese Postcard 100mm x 148mm
            </summary>
        </member>
        <member name="F:Infragistics.Excel.PaperSize.Size9x11">
            <summary>
            9x11 9\" x 11\"
            </summary>
        </member>
        <member name="F:Infragistics.Excel.PaperSize.Size10x11">
            <summary>
            10x11 10\" x 11\"
            </summary>
        </member>
        <member name="F:Infragistics.Excel.PaperSize.Size15x11">
            <summary>
            15x11 15\" x 11\"
            </summary>
        </member>
        <member name="F:Infragistics.Excel.PaperSize.EnvelopeInvite">
            <summary>
            Envelope Invite 220mm x 220mm
            </summary>
        </member>
        <member name="F:Infragistics.Excel.PaperSize.LetterExtra">
            <summary>
            Letter Extra 9 1/2\" x 12\"
            </summary>
        </member>
        <member name="F:Infragistics.Excel.PaperSize.LegalExtra">
            <summary>
            Legal Extra 9 1/2\" x 15\"
            </summary>
        </member>
        <member name="F:Infragistics.Excel.PaperSize.TabloidExtra">
            <summary>
            Tabloid Extra 11 11/16\" x 18\"
            </summary>
        </member>
        <member name="F:Infragistics.Excel.PaperSize.A4Extra">
            <summary>
            A4 Extra 235mm x 322mm
            </summary>
        </member>
        <member name="F:Infragistics.Excel.PaperSize.LetterTransverse">
            <summary>
            Letter Transverse 8 1/2\" x 11\"
            </summary>
        </member>
        <member name="F:Infragistics.Excel.PaperSize.A4Transverse">
            <summary>
            A4 Transverse 210mm x 297mm
            </summary>
        </member>
        <member name="F:Infragistics.Excel.PaperSize.LetterExtraTransverse">
            <summary>
            Letter Extra Transv. 9 1/2\" x 12\"
            </summary>
        </member>
        <member name="F:Infragistics.Excel.PaperSize.SuperAA4">
            <summary>
            Super A/A4 227mm x 356mm
            </summary>
        </member>
        <member name="F:Infragistics.Excel.PaperSize.SuperBA3">
            <summary>
            Super B/A3 305mm x 487mm
            </summary>
        </member>
        <member name="F:Infragistics.Excel.PaperSize.LetterPlus">
            <summary>
            Letter Plus 8 1/2\" x 12 11/16\"
            </summary>
        </member>
        <member name="F:Infragistics.Excel.PaperSize.A4Plus">
            <summary>
            A4 Plus 210mm x 330mm
            </summary>
        </member>
        <member name="F:Infragistics.Excel.PaperSize.A5Transverse">
            <summary>
            A5 Transverse 148mm x 210mm
            </summary>
        </member>
        <member name="F:Infragistics.Excel.PaperSize.B5JISTransverse">
            <summary>
            B5 (JIS) Transverse 182mm x 257mm
            </summary>
        </member>
        <member name="F:Infragistics.Excel.PaperSize.A3Extra">
            <summary>
            A3 Extra 322mm x 445mm
            </summary>
        </member>
        <member name="F:Infragistics.Excel.PaperSize.A5Extra">
            <summary>
            A5 Extra 174mm x 235mm
            </summary>
        </member>
        <member name="F:Infragistics.Excel.PaperSize.B5ISOExtra">
            <summary>
            B5 (ISO) Extra 201mm x 276mm
            </summary>
        </member>
        <member name="F:Infragistics.Excel.PaperSize.A2">
            <summary>
            A2 420mm x 594mm
            </summary>
        </member>
        <member name="F:Infragistics.Excel.PaperSize.A3Transverse">
            <summary>
            A3 Transverse 297mm x 420mm
            </summary>
        </member>
        <member name="F:Infragistics.Excel.PaperSize.A3ExtraTransverse">
            <summary>
            A3 Extra Transverse 322mm x 445mm
            </summary>
        </member>
        <member name="F:Infragistics.Excel.PaperSize.DblJapanesePostcard">
            <summary>
            Dbl. Japanese Postcard 200mm x 148mm
            </summary>
        </member>
        <member name="F:Infragistics.Excel.PaperSize.A6">
            <summary>
            A6 105mm x 148mm
            </summary>
        </member>
        <member name="F:Infragistics.Excel.PaperSize.LetterRotated">
            <summary>
            Letter Rotated 11\" x 8 1/2\"
            </summary>
        </member>
        <member name="F:Infragistics.Excel.PaperSize.A3Rotated">
            <summary>
            A3 Rotated 420mm x 297mm
            </summary>
        </member>
        <member name="F:Infragistics.Excel.PaperSize.A4Rotated">
            <summary>
            A4 Rotated 297mm x 210mm
            </summary>
        </member>
        <member name="F:Infragistics.Excel.PaperSize.A5Rotated">
            <summary>
            A5 Rotated 210mm x 148mm
            </summary>
        </member>
        <member name="F:Infragistics.Excel.PaperSize.B4JISRotated">
            <summary>
            B4 (JIS) Rotated 364mm x 257mm
            </summary>
        </member>
        <member name="F:Infragistics.Excel.PaperSize.B5JISRotated">
            <summary>
            B5 (JIS) Rotated 257mm x 182mm
            </summary>
        </member>
        <member name="F:Infragistics.Excel.PaperSize.JapanesePostcardRotated">
            <summary>
            Japanese Postcard Rot. 148mm x 100mm
            </summary>
        </member>
        <member name="F:Infragistics.Excel.PaperSize.DblJapanesePostcardRotated">
            <summary>
            Dbl. Jap. Postcard Rot. 148mm x 200mm
            </summary>
        </member>
        <member name="F:Infragistics.Excel.PaperSize.A6Rotated">
            <summary>
            A6 Rotated 148mm x 105mm
            </summary>
        </member>
        <member name="F:Infragistics.Excel.PaperSize.B6JIS">
            <summary>
            B6 (JIS) 128mm x 182mm
            </summary>
        </member>
        <member name="F:Infragistics.Excel.PaperSize.B6JISRotated">
            <summary>
            B6 (JIS) Rotated 182mm x 128mm
            </summary>
        </member>
        <member name="F:Infragistics.Excel.PaperSize.Size12x11">
            <summary>
            12x11 12\" x 11\"
            </summary>
        </member>
        <member name="T:Infragistics.Excel.Precision">
            <summary>
            Represents the types of precision which can be used when obtaining the value of a cell.
            </summary>
        </member>
        <member name="F:Infragistics.Excel.Precision.UseDisplayValues">
            <summary>
            The display value of the cell is used. If the cell's actual value is 10.005, but it is using currency formatting,
            it will display as $10.01.  When this cell is used in calculations, its displayed value of 10.01 will be used.
            </summary>
        </member>
        <member name="F:Infragistics.Excel.Precision.UseRealCellValues">
            <summary>
            The actual value of the cell is used. If the cell's actual value is 10.005, but it is using currency formatting,
            it will display as $10.01.  When this cell is used in calculations, its stored value of 10.005 will be used, 
            even though the display shows a slightly different value.
            </summary>
        </member>
        <member name="T:Infragistics.Excel.PrintErrors">
            <summary>
            Represents the various ways to print cell errors in a worksheet.
            </summary>
        </member>
        <member name="F:Infragistics.Excel.PrintErrors.PrintAsDisplayed">
            <summary>
            Errors are printed just as they are displayed on the worksheet.
            </summary>
        </member>
        <member name="F:Infragistics.Excel.PrintErrors.DontPrint">
            <summary>
            Errors are not prints, as though the cells containing them have no value.
            </summary>
        </member>
        <member name="F:Infragistics.Excel.PrintErrors.PrintAsDashes">
            <summary>
            Errors are printed as two dashes "--".
            </summary>
        </member>
        <member name="F:Infragistics.Excel.PrintErrors.PrintAsNA">
            <summary>
            Errors are prints as "#N/A".
            </summary>
        </member>
        <member name="T:Infragistics.Excel.PrintNotes">
            <summary>
            Represents the various ways to print cell notes.
            </summary>
        </member>
        <member name="F:Infragistics.Excel.PrintNotes.DontPrint">
            <summary>
            Cell notes are not printed.
            </summary>
        </member>
        <member name="F:Infragistics.Excel.PrintNotes.PrintAsDisplayed">
            <summary>
            Cell notes are printed as they are shown on the worksheet. With this option, cell
            notes will only appear in the printed worksheet if they are displayed on the worksheet
            in Microsoft Excel. If the notes just show indicators in Excel, the indicators and notes 
            will not be printed. 
            </summary>
        </member>
        <member name="F:Infragistics.Excel.PrintNotes.PrintAtEndOfSheet">
            <summary>
            Cell notes are printed on the last page, after the entire worksheet has printed.
            </summary>
        </member>
        <member name="T:Infragistics.Excel.ScalingType">
            <summary>
            Represents the ways to scale a worksheet when it is printed.
            </summary>
        </member>
        <member name="F:Infragistics.Excel.ScalingType.UseScalingFactor">
            <summary>
            The scaling factor is used to scale the worksheet when printing.
            </summary>
        </member>
        <member name="F:Infragistics.Excel.ScalingType.FitToPages">
            <summary>
            The page maximums are used to determine how many pages the worksheet can be printed on.
            Less pages can be used if there is not enough printable content in the worksheet.
            </summary>
        </member>
        <member name="T:Infragistics.Excel.ScrollBars">
            <summary>
            Represents the various scroll bar configurations available for the workbook.
            </summary>
        </member>
        <member name="F:Infragistics.Excel.ScrollBars.None">
            <summary>
            No scroll bars are shown in Microsoft Excel.
            </summary>
        </member>
        <member name="F:Infragistics.Excel.ScrollBars.Horizontal">
            <summary>
            Only the horizontal scroll bar is shown in Microsoft Excel.
            </summary>
        </member>
        <member name="F:Infragistics.Excel.ScrollBars.Vertical">
            <summary>
            Only the vertical scroll bar is shown in Microsoft Excel.
            </summary>
        </member>
        <member name="F:Infragistics.Excel.ScrollBars.Both">
            <summary>
            Both scroll bars are shown in Microsoft Excel.
            </summary>
        </member>
        <member name="T:Infragistics.Excel.ShapePositioningMode">
            <summary>
            Represents the ways shapes will be repositioned when rows and columns are resized.
            </summary>
        </member>
        <member name="F:Infragistics.Excel.ShapePositioningMode.MoveAndSizeWithCells">
            <summary>
            Shapes will move and size with the cells. If columns before (or rows above) the shape are expanded,
            the shape will shift left. If columns within a shape are expanded, the shape will be widened.
            </summary>
        </member>
        <member name="F:Infragistics.Excel.ShapePositioningMode.MoveWithCells">
            <summary>
            Shapes will move but not size with the cells. If columns before (or rows above) the shape are
            expanded, the shape will shift left. If columns within a shape are expanded, the shape will not
            be widened.
            </summary>
        </member>
        <member name="F:Infragistics.Excel.ShapePositioningMode.DontMoveOrSizeWithCells">
            <summary>
            Shapes will not move or size with the cells. The shape will remain in its absolute pixel position of
            the worksheet, regardless the rows and columns resized before or inside it.
            </summary>
        </member>
        <member name="T:Infragistics.Excel.VerticalCellAlignment">
            <summary>
            Enumeration for vertical alignment styles. Default value is used in property override situations.
            </summary>
        </member>
        <member name="F:Infragistics.Excel.VerticalCellAlignment.Default">
            <summary>
            Use the current default.
            </summary>
        </member>
        <member name="F:Infragistics.Excel.VerticalCellAlignment.Top">
            <summary>
            Top alignment.
            </summary>
        </member>
        <member name="F:Infragistics.Excel.VerticalCellAlignment.Center">
            <summary>
            Center alignment.
            </summary>
        </member>
        <member name="F:Infragistics.Excel.VerticalCellAlignment.Bottom">
            <summary>
            Bottom alignment.
            </summary>
        </member>
        <member name="F:Infragistics.Excel.VerticalCellAlignment.Justify">
            <summary>
            Justify alignment.
            </summary>
        </member>
        <member name="T:Infragistics.Excel.WorkbookPaletteMode">
            <summary>
            Enum specifying what palette to use when exporting. 
            </summary>
            <remarks>
            <p class="body">Determines whether a custom palette will be created or whether to use the standard Excel palette of colors when exporting.</p>
            <p class="body">A custom palette will make the exported Excel Workbook appear with exactly the same colors as the object on the screen. However, using a custom palette can cause problems when copying and pasting from one Excel Workbook to another. Since the two workbooks are unlikely to share exactly the same palette, colors may change.</p>
            <p class="body">Using the standard Excel palette means that the colors in the Excel Workbook will not exactly match those on the screen. For each color used by the item on-screen, the closest matching color in the standard palette will be used in Excel. Copy and Paste using a Workbook creating using the Standard palette will not result in any color changes - unless the pasting is done onto a Workbook with a custom palette.</p>
            </remarks>
        </member>
        <member name="F:Infragistics.Excel.WorkbookPaletteMode.CustomPalette">
            <summary>
            Use a custom palette based on the actual colors.
            </summary>
        </member>
        <member name="F:Infragistics.Excel.WorkbookPaletteMode.StandardPalette">
            <summary>
            Use the standard Excel palette by matching the nearest color. 
            </summary>
        </member>
        <member name="T:Infragistics.Excel.WorksheetView">
            <summary>
            Represents the various views for a worksheet.
            </summary>
        </member>
        <member name="F:Infragistics.Excel.WorksheetView.Normal">
            <summary>
            The worksheet is displayed in the normal view.
            </summary>
        </member>
        <member name="F:Infragistics.Excel.WorksheetView.PageLayout">
            <summary>
            The worksheet is displayed as it will appear when printed. This view displays where
            printed pages will begin and end as well as any headers or footers for the workbook.
            This value is only supported in Excel 2007 and defaults to Normal in earlier version.
            </summary>
        </member>
        <member name="F:Infragistics.Excel.WorksheetView.PageBreakPreview">
            <summary>
            This view shows a preview of where pages will break when the worksheet is printed.
            </summary>
        </member>
        <member name="T:Infragistics.Excel.WorksheetVisibility">
            <summary>
            Represents the various visibilities of a worksheet.
            </summary>
            <remarks>
            <p class="body">
            The worksheet visibility indicates how the worksheet will be displayed in the tab bar at 
            the bottom of the workbook window in Microsoft Excel.
            </p>
            </remarks>
        </member>
        <member name="F:Infragistics.Excel.WorksheetVisibility.Visible">
            <summary>
            The worksheet tab is present in the tab bar.
            </summary>
        </member>
        <member name="F:Infragistics.Excel.WorksheetVisibility.Hidden">
            <summary>
            The worksheet tab is not present in the tab bar. The worksheet can be made visible
            from the Unhide dialog in Microsoft Excel.
            </summary>
        </member>
        <member name="F:Infragistics.Excel.WorksheetVisibility.StrongHidden">
            <summary>
            The worksheet tab is not present in the tab bar. The worksheet can only be made visible
            again through a Visual Basic procedure in Microsoft Excel. The worksheet can not be made 
            visible through the user interface.
            </summary>
        </member>
        <member name="T:Infragistics.Excel.WorkbookStyle">
            <summary>
            Represents a complex format which can be easily applied to a cell in Microsoft Excel.
            </summary>
        </member>
        <member name="P:Infragistics.Excel.WorkbookStyle.Name">
            <summary>
            Gets the name of the workbook style.
            </summary>
            <value>The name of the workbook style.</value>
        </member>
        <member name="P:Infragistics.Excel.WorkbookStyle.StyleFormat">
            <summary>
            Gets the cell format which applies to the workbook style.
            </summary>
            <value>The cell format which applies to the workbook style.</value>
        </member>
        <member name="T:Infragistics.Excel.FormulaParseException">
            <summary>
            The exception thrown when a formula parse error occurs.
            </summary>
        </member>
        <member name="M:Infragistics.Excel.FormulaParseException.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Infragistics.Excel.FormulaParseException"/> class.
            </summary>
        </member>
        <member name="M:Infragistics.Excel.FormulaParseException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Infragistics.Excel.FormulaParseException"/> class with a specified error message.
            </summary>
            <param name="message">The message that describes the error.</param>
        </member>
        <member name="M:Infragistics.Excel.FormulaParseException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:Infragistics.Excel.FormulaParseException"/> class with a specified error message.
            </summary>
            <param name="message">The message that describes the error.</param>
            <param name="innerException">The exception that is the cause of this exception.</param>
        </member>
        <member name="M:Infragistics.Excel.FormulaParseException.#ctor(System.Int32,System.String,System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Infragistics.Excel.FormulaParseException"/> class with a specified error message 
            and information which helps determine the location of the parse error in the formula.
            </summary>
            <param name="charIndexOfError">The character index in the <paramref name="formulaValue"/> parameter where the parse error occurred.</param>
            <param name="formulaValue">The formula which had the error being parsed.</param>
            <param name="message">The message that describes the error.</param>
            <param name="portionWithError">The portion of the formula which had the error being parsed.</param>
        </member>
        <member name="M:Infragistics.Excel.FormulaParseException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the <see cref="T:Infragistics.Excel.FormulaParseException"/> class with the serialized data.
            </summary>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="info"/> is null.
            </exception>
            <param name="info">The serialized object data.</param>
            <param name="context">The context information about the source serialized stream.</param>
        </member>
        <member name="M:Infragistics.Excel.FormulaParseException.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Populates the specified <see cref="T:System.Runtime.Serialization.SerializationInfo"/> instance with this object's data.
            </summary>
            <param name="info">The serialized object data.</param>
            <param name="context">The context information about the destination serialized stream.</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="info"/> is null.
            </exception>
        </member>
        <member name="P:Infragistics.Excel.FormulaParseException.CharIndexOfError">
            <summary>
            Gets the character index in the <see cref="P:Infragistics.Excel.FormulaParseException.FormulaValue"/> at which the parse error occurred.
            </summary>
            <value>The character index in the FormulaValue at which the parse error occurred.</value>
        </member>
        <member name="P:Infragistics.Excel.FormulaParseException.FormulaValue">
            <summary>
            Gets the formula string which had the error being parsed.
            </summary>
            <value>The formula string which had the error being parsed.</value>
        </member>
        <member name="P:Infragistics.Excel.FormulaParseException.Message">
            <summary>
            Gets the error message and the portion of the formula with the error.
            </summary>
        </member>
        <member name="P:Infragistics.Excel.FormulaParseException.PortionWithError">
            <summary>
            Gets the portion of the formula which contains the error.
            </summary>
        </member>
        <member name="T:Infragistics.Excel.FrozenPaneSettings">
            <summary>
            Class which controls the way frozen panes are arranged and used for a worksheet.
            </summary>
            <remarks>
            <p class="note">
            <B>Note:</B> Frozen and unfrozen panes cannot be used simultaneously, so depending whether the panes are 
            frozen or unfrozen, these settings may not be used or saved.
            </p>
            </remarks>
            <seealso cref="P:Infragistics.Excel.DisplayOptions.PanesAreFrozen"/>
            <seealso cref="T:Infragistics.Excel.UnfrozenPaneSettings"/>
        </member>
        <member name="T:Infragistics.Excel.PaneSettingsBase">
            <summary>
            Abstract base class for classes which control pane settings.
            </summary>
        </member>
        <member name="M:Infragistics.Excel.PaneSettingsBase.Reset">
            <summary>
            Resets the pane settings to their defaults.
            </summary>
            <remarks>
            <p class="body">
            The defaults used for each setting are the same defaults with which Microsoft Excel creates a blank worksheet.
            </p>
            </remarks>
        </member>
        <member name="P:Infragistics.Excel.PaneSettingsBase.FirstColumnInRightPane">
            <summary>
            Gets or sets the first visible column in the right pane(s) of the worksheet. 
            </summary>
            <remarks>
            <p class="body">
            This affects the scroll position for the right pane(s) of the worksheet and 
            is only used if the worksheet is split vertically.
            </p>
            </remarks>
            <exception cref="T:System.ArgumentOutOfRangeException">
            The assigned value is outside the valid column range (0 to one less than <see cref="F:Infragistics.Excel.Workbook.MaxExcelColumnCount"/>).
            </exception>
            <value>The zero-based index of the first visible column in the right pane(s).</value>
        </member>
        <member name="P:Infragistics.Excel.PaneSettingsBase.FirstRowInBottomPane">
            <summary>
            Gets or sets the first visible row in the bottom pane(s) of the worksheet. 
            </summary>
            <remarks>
            <p class="body">
            This affects the scroll position for the bottom pane(s) of the worksheet and 
            is only used if the worksheet is split horizontally.
            </p>
            </remarks>
            <exception cref="T:System.ArgumentOutOfRangeException">
            The assigned value is outside the valid row range (0 to one less than <see cref="F:Infragistics.Excel.Workbook.MaxExcelRowCount"/>).
            </exception>
            <value>The zero-based index of the first visible row in the bottom pane(s).</value>
        </member>
        <member name="M:Infragistics.Excel.FrozenPaneSettings.Reset">
            <summary>
            Resets the frozen pane settings to their defaults.
            </summary>
            <remarks>
            <p class="body">
            The defaults used for each setting are the same defaults with which Microsoft Excel creates a blank worksheet.
            </p>
            </remarks>
        </member>
        <member name="P:Infragistics.Excel.FrozenPaneSettings.FrozenColumns">
            <summary>
            Gets or sets the number of columns frozen at the left of the worksheet.
            </summary>
            <remarks>
            <p class="body">
            The frozen columns will always remain in view, regardless of the horizontal scroll position of 
            the worksheet.
            </p>
            <p class="note">
            <B>Note:</B> If the number of frozen columns specified is more than the amount of visible columns 
            in the worksheet, the worksheet may not scroll correctly.
            </p>
            </remarks>
            <exception cref="T:System.ArgumentOutOfRangeException">
            The assigned value is not a valid column count (0 to <see cref="F:Infragistics.Excel.Workbook.MaxExcelColumnCount"/>).
            </exception>
            <value>The number of columns frozen at the left of the worksheet.</value>
        </member>
        <member name="P:Infragistics.Excel.FrozenPaneSettings.FrozenRows">
            <summary>
            Gets or sets the number of rows frozen at the top of the worksheet.
            </summary>
            <remarks>
            <p class="body">
            The frozen rows will always remain in view, regardless of the vertical scroll position of 
            the worksheet.
            </p>
            <p class="note">
            <B>Note:</B> If the number of frozen rows specified is more than the amount of visible rows 
            in the worksheet, the worksheet may not scroll correctly.
            </p>
            </remarks>
            <exception cref="T:System.ArgumentOutOfRangeException">
            The assigned value is not a valid row count (0 to <see cref="F:Infragistics.Excel.Workbook.MaxExcelRowCount"/>).
            </exception>
            <value>The number of rows frozen at the top of the worksheet.</value>
        </member>
        <member name="T:Infragistics.Excel.NamedReference">
            <summary>
            Represents a named reference defined in the workbook.
            </summary>
            <remarks>
            <p class="body">
            Named references allow for names to be used in formulas instead of complex formulas or cell references.
            For example, instead of using the formula =SUM(E1:E20), a named reference with a name of 'Sales' can be 
            defined to point to the range of E1:E20 (the named reference's formula would be defined like this: 
            =Sheet1!$E$1:$E$20). Then the original formula could be expressed as =SUM(Sales).
            </p>
            <p class="body">
            Each named reference has an associated scope, which can either be the <see cref="P:Infragistics.Excel.NamedReference.Workbook"/> to which the
            named reference belongs or one of the <see cref="T:Infragistics.Excel.Worksheet"/> instances in the Workbook.  The scope 
            determines how the name must be referenced in formulas for different cells. A scope of the workbook means
            the named reference must be accessed by a formula in any cell of the workbook by specifying only the name.
            A scope of the worksheet means formulas used in other worksheets must reference the name by first 
            specifying the worksheet scope, such as =SUM( Sheet2!Sales ). If the formula is in the same worksheet as 
            the scope of the named reference, the formula can reference the name with or without the worksheet name.
            </p>
            <p class="body">
            Named references from external workbooks must always be referenced with the scope first. If the named 
            reference's scope is the external workbook, the name is accessed by specifying the workbook file name
            followed by the name, such as in the following formula: ='C:\ExternalWorkbook.xls'!SalesTax. If the named
            reference has a scope of a worksheet in the workbook, it is referenced by specifying the file name, 
            worksheet, and name: ='C:\[ExternalWorkbook.xls]Sheet1'!SalesTax.
            </p>
            <p class="body">
            Named references with different scopes can have the same names, but if two named references have the same
            scope, they must have case-insensitively unique names.
            </p>
            </remarks>
        </member>
        <member name="M:Infragistics.Excel.NamedReference.ToString">
            <summary>
            Gets the string representation of the named reference.
            </summary>
            <returns>The string representation of the named reference.</returns>
        </member>
        <member name="M:Infragistics.Excel.NamedReference.SetFormula(System.String)">
            <summary>
            Sets the formula for a named reference.
            </summary>
            <remarks>
            <p class="body">
            The formula will be parsed using the <see cref="T:Infragistics.Excel.CellReferenceMode"/> of the <see cref="P:Infragistics.Excel.NamedReference.Workbook"/> wo which the
            NamedReference applied. If the NamedReference has been removed from its collection, the A1 reference mode will
            be used to parse the formula.
            </p>
            </remarks>
            <param name="formula">The string containing the formula value.</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="formula"/> is null or empty.
            </exception>
            <exception cref="T:System.ArgumentException">
            <paramref name="formula"/> is not a valid formula. The inner exception will contain the <see cref="T:Infragistics.Excel.FormulaParseException"/>
            describing the reason the formula was not valid.
            </exception>
            <seealso cref="P:Infragistics.Excel.NamedReference.Formula"/>
        </member>
        <member name="M:Infragistics.Excel.NamedReference.SetFormula(System.String,Infragistics.Excel.CellReferenceMode)">
            <summary>
            Sets the formula for a named reference.
            </summary>
            <param name="formula">The string containing the formula value.</param>
            <param name="cellReferenceMode">The mode used to interpret cell references in the formula.</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="formula"/> is null or empty.
            </exception>
            <exception cref="T:System.ComponentModel.InvalidEnumArgumentException">
            <paramref name="cellReferenceMode"/> is not defined in the <see cref="T:Infragistics.Excel.CellReferenceMode"/> enumeration.
            </exception>
            <exception cref="T:System.ArgumentException">
            <paramref name="formula"/> is not a valid formula. The inner exception will contain the <see cref="T:Infragistics.Excel.FormulaParseException"/>
            describing the reason the formula was not valid.
            </exception>
            <seealso cref="P:Infragistics.Excel.NamedReference.Formula"/>
        </member>
        <member name="P:Infragistics.Excel.NamedReference.Comment">
            <summary>
            Gets or sets the comment associated with the named reference.
            </summary>
            <exception cref="T:System.ArgumentException">
            The value assigned is greater than 255 characters in length.
            </exception>
            <value>The comment associated with the named reference.</value>
        </member>
        <member name="P:Infragistics.Excel.NamedReference.Formula">
            <summary>
            Gets the formula which defines the named reference.
            </summary>
            <value>The formula which defines the named reference.</value>
            <seealso cref="M:Infragistics.Excel.NamedReference.SetFormula(System.String)"/>
            <seealso cref="M:Infragistics.Excel.NamedReference.SetFormula(System.String,Infragistics.Excel.CellReferenceMode)"/>
        </member>
        <member name="T:Infragistics.Excel.ExcelResourceCustomizer">
            <summary>
            Class used to provide the ability to customize resource strings.
            </summary>
            <remarks>
            </remarks>
        </member>
        <member name="M:Infragistics.Excel.ExcelResourceCustomizer.GetCustomizedString(System.String)">
            <summary>
            Gets the customized string identified by the specified string resource name.
            </summary>
            <param name="name">Name of the string resource that was customized.</param>
            <returns>The customized string or null if the resource wasn't customized.</returns>
            <seealso cref="M:Infragistics.Excel.ExcelResourceCustomizer.ResetAllCustomizedStrings"/>
            <seealso cref="M:Infragistics.Excel.ExcelResourceCustomizer.ResetCustomizedString(System.String)"/>
            <seealso cref="M:Infragistics.Excel.ExcelResourceCustomizer.SetCustomizedString(System.String,System.String)"/>
        </member>
        <member name="M:Infragistics.Excel.ExcelResourceCustomizer.ResetAllCustomizedStrings">
            <summary>
            Clears all strings customized by calls to <see cref="M:Infragistics.Excel.ExcelResourceCustomizer.SetCustomizedString(System.String,System.String)"/> method.
            </summary>
            <seealso cref="M:Infragistics.Excel.ExcelResourceCustomizer.SetCustomizedString(System.String,System.String)"/>
            <seealso cref="M:Infragistics.Excel.ExcelResourceCustomizer.ResetCustomizedString(System.String)"/>
        </member>
        <member name="M:Infragistics.Excel.ExcelResourceCustomizer.ResetCustomizedString(System.String)">
            <summary>
            Resets a customized string identified by the specified string resource name so that it will load from the resource file.
            </summary>
            <param name="name">Name of the string resource to customize.</param>
            <seealso cref="M:Infragistics.Excel.ExcelResourceCustomizer.SetCustomizedString(System.String,System.String)"/>
        </member>
        <member name="M:Infragistics.Excel.ExcelResourceCustomizer.SetCustomizedString(System.String,System.String)">
            <summary>
            Sets a customized string identified by the specified string resource name.
            </summary>
            <param name="name">Name of the string resource to customize.</param>
            <param name="customizedText">The customized string. If null this has the same effect as calling <see cref="M:Infragistics.Excel.ExcelResourceCustomizer.ResetCustomizedString(System.String)"/>.</param>
            <seealso cref="M:Infragistics.Excel.ExcelResourceCustomizer.ResetAllCustomizedStrings"/>
            <seealso cref="M:Infragistics.Excel.ExcelResourceCustomizer.ResetCustomizedString(System.String)"/>
        </member>
        <member name="T:Infragistics.Excel.Resources">
            <summary>
            Exposes a <see cref="T:Infragistics.Excel.ExcelResourceCustomizer"/> instance for this assembly. 
            </summary>
            <seealso cref="P:Infragistics.Excel.Resources.Customizer"/> 
            <seealso cref="T:Infragistics.Excel.ExcelResourceCustomizer"/> 
        </member>
        <member name="M:Infragistics.Excel.Resources.GetString(System.String,System.Object[])">
            <summary>
            Returns the resource string using the specified name and default culture.
            </summary>
            <param name="name">Name of the string resource to return.</param>
            <param name="args">Arguments supplied to the string.Format method when formatting the string.</param>
            <returns>The resource string using the specified resource name and default culture.</returns>
        </member>
        <member name="M:Infragistics.Excel.Resources.GetString(System.String)">
            <summary>
            Returns the resource string using the specified resource name and default culture. The string is then formatted using the arguments specified.
            </summary>
            <param name="name">Name of the string resource to return.</param>
            <returns>The resource string using the specified resource name and default culture.</returns>
        </member>
        <member name="M:Infragistics.Excel.Resources.GetObject(System.String)">
            <summary>
            Returns the resource object using the specified name.
            </summary>
            <param name="name">Name of the resource item.</param>
            <returns>An object containing the specified resource.</returns>
        </member>
        <member name="P:Infragistics.Excel.Resources.Customizer">
            <summary>
            Returns the <see cref="T:Infragistics.Excel.ExcelResourceCustomizer"/> for this assembly.
            </summary>
            <seealso cref="T:Infragistics.Excel.ExcelResourceCustomizer"/> 
        </member>
        <member name="T:Infragistics.Excel.RowColumnBase">
            <summary>
            Abstract base class for worksheet row and worksheet column.
            </summary>
            <seealso cref="T:Infragistics.Excel.WorksheetColumn"/>
            <seealso cref="T:Infragistics.Excel.WorksheetRow"/>
        </member>
        <member name="P:Infragistics.Excel.RowColumnBase.CellFormat">
            <summary>
            Gets the default cell format for cells in this row or column.
            </summary>
            <remarks>
            <p class="body">
            Any default properties of the cell's format will take their value from this format when getting a resolved format.
            </p>
            </remarks>
            <value>The default cell format for cells in this row or column.</value>
        </member>
        <member name="P:Infragistics.Excel.RowColumnBase.Expanded">
            <summary>
            Gets or sets the expanded state of the row or column.
            </summary>
            <remarks>
            <p class="body">This property is deprecated. Use <see cref="P:Infragistics.Excel.RowColumnBase.Hidden"/> instead.</p>
            <p class="note"><B>Note:</B> Hidden and Expanded are opposites (setting Expanded to True is equivalent to setting Hidden to False).</p>
            </remarks>
        </member>
        <member name="P:Infragistics.Excel.RowColumnBase.Hidden">
            <summary>
            Gets or sets the value indicating whether the row or column is hidden.
            </summary>
            <remarks>
            The Hidden state also controls the expanded state of rows or columns in outline groups. Basically, an outline group
            simply provides an easy way to hide and unhide all rows or columns in the group at the same time, via the expansion 
            indicator.
            </remarks>
            <value>The value indicating whether the row or column is hidden.</value>
            <seealso cref="P:Infragistics.Excel.RowColumnBase.OutlineLevel"/>
            <seealso cref="M:Infragistics.Excel.CustomView.GetHiddenColumns(Infragistics.Excel.Worksheet)"/>
            <seealso cref="M:Infragistics.Excel.CustomView.GetHiddenRows(Infragistics.Excel.Worksheet)"/>
        </member>
        <member name="P:Infragistics.Excel.RowColumnBase.Index">
            <summary>
            Gets the index of the row or column in the worksheet.
            </summary>
            <value>The index of the row or column in the worksheet.</value>
        </member>
        <member name="P:Infragistics.Excel.RowColumnBase.OutlineLevel">
            <summary>
            Gets or sets the outline level for the row or column.
            </summary>
            <remarks>
            <p class="body">
            Microsoft Excel supports hierarchical grouping of rows and columns with a maximum of seven levels of hierarchy. 
            To create a group, set adjacent rows or columns to same outline level. When rows or columns are grouped, an
            outline indicator will provide a visual representation of the outline level.  In addition, an outline group has
            an expansion indicator at one end of the group, which allows the user to easily hide and unhide all rows or column
            in the group with a single click.
            </p>
            </remarks>
            <exception cref="T:System.ArgumentOutOfRangeException">
            The value assigned is outside the valid outline level range of 0 and 7.
            </exception>
            <value>The outline level for the row or column.</value>
            <seealso cref="P:Infragistics.Excel.RowColumnBase.Hidden"/>
        </member>
        <member name="P:Infragistics.Excel.RowColumnBase.Worksheet">
            <summary>
            Gets the worksheet to which the row or column belongs.
            </summary>
            <value>The worksheet to which the row or column belongs.</value>
        </member>
        <member name="T:Infragistics.Excel.RowColumnCollectionBase`1">
            <summary>
            Base class for row collection and column collection.
            </summary>
            <typeparam name="T">The type of item contained in the collection.</typeparam>
        </member>
        <member name="T:Infragistics.Excel.WorksheetItemCollection`1">
            <summary>
            Abstract base class for collections of the main worksheet elements (rows, columns, and cells).
            </summary>
            <remarks>
            <p class="body">
            Because of the large number of elements on a worksheet, this collection internally creates elements
            when they are requested. Iterating this collection will only iterate the elements which have already
            been created.
            </p>
            </remarks>
            <typeparam name="T">The type of item contained in the collection.</typeparam>
        </member>
        <member name="T:Infragistics.Excel.UnfrozenPaneSettings">
            <summary>
            Class which controls the way unfrozen panes are arranged and used for a worksheet.
            </summary>
            <remarks>
            <p class="note">
            <B>Note:</B> Frozen and unfrozen panes cannot be used simultaneously, so depending whether the panes are 
            frozen or unfrozen, these settings may not be used or saved.
            </p>
            </remarks>
            <seealso cref="P:Infragistics.Excel.DisplayOptions.PanesAreFrozen"/>
            <seealso cref="T:Infragistics.Excel.FrozenPaneSettings"/>
        </member>
        <member name="M:Infragistics.Excel.UnfrozenPaneSettings.Reset">
            <summary>
            Resets the unfrozen pane settings to their defaults.
            </summary>
            <remarks>
            <p class="body">
            The defaults used for each setting are the same defaults with which Microsoft Excel creates a blank worksheet.
            </p>
            </remarks>
        </member>
        <member name="P:Infragistics.Excel.UnfrozenPaneSettings.FirstColumnInLeftPane">
            <summary>
            Gets or sets the first visible column in the left pane(s) of the worksheet. 
            </summary>
            <remarks>
            <p class="body">
            This affects the scroll position for the left pane(s) of the worksheet and is used regardless of whether or not the 
            worksheet is split vertically.
            </p>
            </remarks>
            <exception cref="T:System.ArgumentOutOfRangeException">
            The assigned value is outside the valid column range (0 to one less than <see cref="F:Infragistics.Excel.Workbook.MaxExcelColumnCount"/>).
            </exception>
            <value>The zero-based index of the first visible column in the left pane(s).</value>
        </member>
        <member name="P:Infragistics.Excel.UnfrozenPaneSettings.FirstRowInTopPane">
            <summary>
            Gets or sets the first visible row in the top pane(s) of the worksheet. 
            </summary>
            <remarks>
            <p class="body">
            This affects the scroll position for the top pane(s) of the worksheet and is used regardless of whether or not 
            the worksheet is split horizontally.
            </p>
            </remarks>
            <exception cref="T:System.ArgumentOutOfRangeException">
            The assigned value is outside the valid row range (0 to one less than <see cref="F:Infragistics.Excel.Workbook.MaxExcelRowCount"/>).
            </exception>
            <value>The zero-based index of the first visible row in the top pane(s).</value>
        </member>
        <member name="P:Infragistics.Excel.UnfrozenPaneSettings.LeftPaneWidth">
            <summary>
            Gets or sets the width of the left pane in twips (1/20th of a point).
            </summary>
            <remarks>
            <p class="body">
            If this value is zero, the left pane occupies the entire visible area of the worksheet.
            Otherwise, the left pane occupies the specified width and the right pane occupies
            the remaining area of the worksheet.
            </p>
            </remarks>
            <exception cref="T:System.ArgumentOutOfRangeException">
            Thrown when the width specified is outside the valid width range (0 to 65535).
            </exception>
            <value>The width of the left pane, or zero if there is no horizontal pane split.</value>
        </member>
        <member name="P:Infragistics.Excel.UnfrozenPaneSettings.TopPaneHeight">
            <summary>
            Gets or sets the height of the top pane in twips (1/20th of a point).
            </summary>
            <remarks>
            <p class="body">
            If this value is zero, the top pane occupies the entire visible area of the worksheet.
            Otherwise, the top pane occupies the specified height and the bottom pane occupies
            the remaining area of the worksheet.
            </p>
            </remarks>
            <exception cref="T:System.ArgumentOutOfRangeException">
            Thrown when the height specified is outside the valid height range (0 to 65535).
            </exception>
            <value>The height of the top pane, or zero if there is no vertical pane split.</value>
        </member>
        <member name="T:Infragistics.Excel.UnknownShape">
            <summary>
            Represents an unsupported shape which has been loaded from a workbook file.
            </summary>
            <remarks>
            <p class="body">
            This class is used for round-tripping purposes, so unsupported shapes which have been
            loaded can be saved back out with the workbook.  The class allows the unsupported shapes 
            to be identified in shape collections so they can be removed. This shape will become 
            obsolete in future versions when all shape types are supported.
            </p>
            </remarks>
        </member>
        <member name="M:Infragistics.Excel.UnknownShape.ClearUnknownData">
            <summary>
            Throws an exception because all data in an unknown shape is unknown, and clearing that data would leave 
            no data with the shape.
            </summary>
            <exception cref="T:System.InvalidOperationException">
            This method is called on an <see cref="T:Infragistics.Excel.UnknownShape"/> instance.
            </exception>
        </member>
        <member name="T:Infragistics.Excel.Workbook">
            <summary>
            Represents a Microsoft Excel workbook.
            </summary>
            <remarks>
            <p class="body">Every workbook consists of one or more worksheets (<see cref="T:Infragistics.Excel.Worksheet"/>). The default constructor creates an empty workbook.</p>
            </remarks>
        </member>
        <member name="F:Infragistics.Excel.Workbook.MaxExcelRowCount">
            <summary>
            Maximum number of rows in the worksheet allowed by Excel.
            </summary>
        </member>
        <member name="F:Infragistics.Excel.Workbook.MaxExcelColumnCount">
            <summary>
            Maximum number of columns in the worksheet allowed by Excel.
            </summary>
        </member>
        <member name="F:Infragistics.Excel.Workbook.MaxExcelColorCount">
            <summary>
            Maximum number of colors in the workbook allowed by Excel.
            </summary>
        </member>
        <member name="F:Infragistics.Excel.Workbook.MaxExcelCellFormatCount">
            <summary>
            Maximum number of distinct cell formats in the workbook allowed by Excel.
            </summary>
        </member>
        <member name="M:Infragistics.Excel.Workbook.#ctor">
            <summary>
            Creates a new instance of the <see cref="T:Infragistics.Excel.Workbook"/> class.
            </summary>
            <remarks>
            <p class="body">
            The new workbook created is empty. At least one <see cref="T:Infragistics.Excel.Worksheet"/> must be added to it before 
            it can be saved.
            </p>
            </remarks>
            <seealso cref="P:Infragistics.Excel.Workbook.Worksheets"/>
        </member>
        <member name="M:Infragistics.Excel.Workbook.#ctor(Infragistics.Excel.WorkbookPaletteMode)">
            <summary>
            Creates a new instance of the <see cref="T:Infragistics.Excel.Workbook"/> class.
            </summary>
            <param name="paletteMode">Determines which palette to use when exporting.</param>
            <remarks>
            <p class="body">
            The new workbook created is empty. At least one <see cref="T:Infragistics.Excel.Worksheet"/> must be added to it before 
            it can be saved.
            </p>
            </remarks>
            <exception cref="T:System.ComponentModel.InvalidEnumArgumentException">
            <paramref name="paletteMode"/> is not defined in the <see cref="T:Infragistics.Excel.WorkbookPaletteMode"/> enumeration.
            </exception>
            <seealso cref="P:Infragistics.Excel.Workbook.Worksheets"/>
        </member>
        <member name="M:Infragistics.Excel.Workbook.CreateNewWorkbookFont">
            <summary>
            Factory method which creates new workbook font.
            </summary>
            <remarks>
            <p class="body"><see cref="T:Infragistics.Excel.IWorkbookFont"/> describes font used in excel workbook.
            If many parts of excel workbook have same and complex (more than one property in common) font formatting, use this method in following manner: 
            <ol>
            <li class="taskitem"><span class="taskitemtext">Create new font format with <see cref="M:Infragistics.Excel.Workbook.CreateNewWorkbookFont"/>,</span></li>
            <li class="taskitem"><span class="taskitemtext">Set all necessary properties on given font format,</span></li>
            <li class="taskitem"><span class="taskitemtext">Apply font format to all excel objects which use it with <see cref="M:Infragistics.Excel.IWorkbookFont.SetFontFormatting(Infragistics.Excel.IWorkbookFont)"/> method.</span></li>
            </ol></p>
            <p class="body">Use of this procedure will simplify you code for complex font formats and increase speed of resulting program. It will not reduce total number of font formats in a workbook as font formats are internally cached no mather which method is used.</p>
            </remarks>
            <returns>The created excel font object.</returns>
        </member>
        <member name="M:Infragistics.Excel.Workbook.CreateNewWorksheetCellFormat">
            <summary>
            Creates new worksheet cell format.
            </summary>
            <returns>The cell format which was created.</returns>
            <remarks>
            <p class="body"><see cref="T:Infragistics.Excel.IWorksheetCellFormat"/> describes cell specific formatting (font, number format, appearance etc.). Total number of different cell formats in excel workbook is limited to <see cref="F:Infragistics.Excel.Workbook.MaxExcelCellFormatCount"/>. 
            If many parts of excel workbook have same and complex (more than one property in common) cell formatting, use this method in following manner: 
            <ol>
            <li class="taskitem"><span class="taskitemtext">Create new cell format with <see cref="M:Infragistics.Excel.Workbook.CreateNewWorksheetCellFormat"/>,</span></li>
            <li class="taskitem"><span class="taskitemtext">Set all necessary properties on given cell format,</span></li>
            <li class="taskitem"><span class="taskitemtext">Apply cell format to all excel objects which use it with <see cref="M:Infragistics.Excel.IWorksheetCellFormat.SetFormatting(Infragistics.Excel.IWorksheetCellFormat)"/> method.</span></li>
            </ol></p>
            <p class="body">Use of this procedure will simplify you code for complex cell formats and increase speed of resulting program. It will not reduce total number of cell formats in a workbook as cell formats are internally cached no mather which method is used.</p>
            </remarks>
        </member>
        <member name="M:Infragistics.Excel.Workbook.Save(System.String)">
            <summary>
            Writes the workbook to a file.
            </summary>
            <remarks>
            <p class="body">
            The workbook will be written in the BIFF8 format.
            </p>
            <p class="body">
            The <paramref name="fileName"/> specified should have an .xls extension so it can be opened in Microsoft Excel 
            by default (if it is installed).
            </p>
            <p class="note">
            <B>Note:</B> This method creates a <see cref="T:System.IO.FileStream"/> using the 
            <a href="http://msdn2.microsoft.com/en-us/library/tyhc0kft.aspx">FileStream(string, FileMode, FileAccess)</a> overload of the constructor.
            See the remarks section of this overload to for the exceptions that could be thrown.
            </p>
            </remarks>
            <param name="fileName">The file to write the workbook to.</param>
            <exception cref="T:System.InvalidOperationException">
            The workbook has no worksheets in its <see cref="P:Infragistics.Excel.Workbook.Worksheets"/> collection.
            </exception>
            <exception cref="T:System.InvalidOperationException">
            No worksheet in this workbook's Worksheets collection has its <see cref="P:Infragistics.Excel.DisplayOptions.Visibility"/> 
            set to Visible. At least one worksheet in the workbook must be visible.
            </exception>
            <exception cref="T:System.InvalidOperationException">
            A <see cref="T:Infragistics.Excel.CustomView"/> in the workbook's <see cref="P:Infragistics.Excel.Workbook.CustomViews"/> collection has all worksheets hidden.
            At least one worksheet must be visible in all custom views.
            </exception>
        </member>
        <member name="M:Infragistics.Excel.Workbook.Save(System.IO.Stream)">
            <summary>
            Writes the workbook to a stream.
            </summary>
            <remarks>
            <p class="body">
            The workbook will be written in the BIFF8 format.
            </p>
            </remarks>
            <param name="stream">The stream to write the workbook to.</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="stream"/> is null.
            </exception>
            <exception cref="T:System.InvalidOperationException">
            The workbook has no worksheets in its <see cref="P:Infragistics.Excel.Workbook.Worksheets"/> collection.
            </exception>
            <exception cref="T:System.InvalidOperationException">
            No worksheet in this workbook's Worksheets collection has its <see cref="P:Infragistics.Excel.DisplayOptions.Visibility"/> 
            set to Visible.
            </exception>
            <exception cref="T:System.InvalidOperationException">
            A <see cref="T:Infragistics.Excel.CustomView"/> in the workbook's <see cref="P:Infragistics.Excel.Workbook.CustomViews"/> collection has all worksheets hidden.
            At least one worksheet must be visible in all custom views.
            </exception>
        </member>
        <member name="M:Infragistics.Excel.Workbook.Load(System.String)">
            <summary>
            Reads a workbook from a file.
            </summary>
            <remarks>
            <p class="note">
            <B>Note:</B> This method creates a <see cref="T:System.IO.FileStream"/> using the 
            <a href="http://msdn2.microsoft.com/en-us/library/47ek66wy.aspx">FileStream(string, FileMode)</a> overload of the constructor.  
            See the remarks section of this overload for the exceptions that could be thrown.
            </p>
            </remarks>
            <param name="fileName">The file from which to read the workbook.</param>
            <exception cref="T:System.ArgumentException">
            <paramref name="fileName"/> is a path to an invalid Microsoft Excel file.
            </exception>
            <exception cref="T:System.InvalidOperationException">
            The format of the workbook data is in an unsupported format.
            </exception>
            <returns>The workbook loaded from the file.</returns>
        </member>
        <member name="M:Infragistics.Excel.Workbook.Load(System.IO.Stream)">
            <summary>
            Reads a workbook from a stream.
            </summary>
            <param name="stream">The stream to read the workbook from.</param>
            <exception cref="T:System.ArgumentException">
            <paramref name="stream"/> does not contain valid Microsoft Excel file contents.
            </exception>
            <exception cref="T:System.InvalidOperationException">
            The format of the workbook data is in an unsupported format.
            </exception>
            <returns>The workbook loaded from the stream.</returns>
        </member>
        <member name="P:Infragistics.Excel.Workbook.ActiveWorksheet">
            <summary>
            Gets or sets the active worksheet.
            </summary>
            <remarks>
            <p class="body">This property is deprecated. Use <see cref="P:Infragistics.Excel.WindowOptions.SelectedWorksheet"/> instead.</p>
            </remarks>
        </member>
        <member name="P:Infragistics.Excel.Workbook.CalculationMode">
            <summary>
            Gets or sets the value which indicates how a formula will be recalculated when a referenced value changes.
            </summary>
            <remarks>
            <p class="body">
            If this is set to a value of Manual, the <see cref="P:Infragistics.Excel.Workbook.RecalculateBeforeSave"/> property will determine
            if formulas are recalculated just before saving the file.  Otherwise, that property is ignored.
            </p>
            </remarks>
            <exception cref="T:System.ComponentModel.InvalidEnumArgumentException">
            The assigned value is not defined in the <see cref="T:CalculationMode"/> enumeration.
            </exception>
            <value>The value which indicates how a formula will be recalculated when a referenced value changes.</value>
            <seealso cref="P:Infragistics.Excel.Workbook.RecalculateBeforeSave"/>
        </member>
        <member name="P:Infragistics.Excel.Workbook.CellReferenceMode">
            <summary>
            Gets or sets the value which indicates the way cells in the workbook are referenced.
            </summary>
            <remarks>
            <p class="body">
            The value of this property will affect the row and columns labels of the workbook when opened in Microsoft Excel.
            In addition, it will affect the display of formulas referencing different cells.
            </p>
            </remarks>
            <exception cref="T:System.ComponentModel.InvalidEnumArgumentException">
            The assigned value is not defined in the <see cref="T:CellReferenceMode"/> enumeration.
            </exception>
            <value>The value which indicates the way cells in the workbook are referenced.</value>
        </member>
        <member name="P:Infragistics.Excel.Workbook.CustomViews">
            <summary>
            Gets the collection of custom views for the workbook.
            </summary>
            <remarks>
            <p class="body">
            Each custom view stores display settings and optionally print settings, which can later be applied to the workbook
            and its worksheets as one operation, through both the Microsoft Excel UI and the Excel assembly by calling the 
            <see cref="M:Infragistics.Excel.CustomView.Apply"/> method.
            </p>
            </remarks>
            <value>The collection of custom views for the workbook.</value>
            <seealso cref="T:Infragistics.Excel.CustomView"/>
        </member>
        <member name="P:Infragistics.Excel.Workbook.DateSystem">
            <summary>
            Gets or sets the date system used internally by Microsoft Excel.
            </summary>
            <exception cref="T:System.ComponentModel.InvalidEnumArgumentException">
            The assigned value is not defined in the <see cref="T:DateSystem"/> enumeration.
            </exception>
            <value>The date system used internally by Microsoft Excel.</value>
        </member>
        <member name="P:Infragistics.Excel.Workbook.DefaultFontHeight">
            <summary>
            Gets or sets the default font height in twips (1/20th of a point).
            </summary>
            <exception cref="T:System.ArgumentOutOfRangeException">
            The assigned value is outside the valid font height range of 20 and 8180.
            </exception>
            <value>The default font height in twips (1/20th of a point).</value>
            <seealso cref="P:Infragistics.Excel.IWorkbookFont.Height"/>
        </member>
        <member name="P:Infragistics.Excel.Workbook.DocumentProperties">
            <summary>
            Gets the properties associated with the workbook document.
            </summary>
            <remarks>
            <p class="body">
            The document properties are pieces of information which provide details on the content of the workbook,
            such as the author, title, and subject of the workbook.
            </p>
            </remarks>
            <value>The properties associated with the workbook document.</value>
        </member>
        <member name="P:Infragistics.Excel.Workbook.IterativeCalculationsEnabled">
            <summary>
            Gets or sets the value which indicates whether iterations are allowed while calculating 
            recursive formulas.
            </summary>
            <remarks>
            <p class="body">
            When iterative calculations are enabled, a formula is allowed to use circular references, 
            or directly or indirectly reference the cell to which it belongs. Microsoft Excel stops iteratively
            calculating formulas after iterating <see cref="P:Infragistics.Excel.Workbook.MaxRecursionIterations"/> times or when all formula
            values change by less than <see cref="P:Infragistics.Excel.Workbook.MaxChangeInIteration"/> between two iterations.
            </p>
            <p class="body">
            When iterative calculations are disabled, circular references are not allowed, and a formula which 
            references the cell to which it belongs, directly or indirectly, will cause Excel to show an error.
            </p>
            </remarks>
            <value>
            The value which indicates whether iterations are allowed while calculating recursive formulas.
            </value>
            <seealso cref="P:Infragistics.Excel.Workbook.MaxChangeInIteration"/>
            <seealso cref="P:Infragistics.Excel.Workbook.MaxRecursionIterations"/>
        </member>
        <member name="P:Infragistics.Excel.Workbook.MaxChangeInIteration">
            <summary>
            Gets or sets the maximum change of the values in a formula between iterations which will exit from iteration.
            </summary>
            <remarks>
            <p class="body">
            This property is only valid when <see cref="P:Infragistics.Excel.Workbook.IterativeCalculationsEnabled"/> is True. Otherwise it is ignored.
            </p>
            <p class="body">
            When iterative calculations, or circular references, are enabled, this property determines the maximum change in 
            all values of a formula between two iterations that will cause the formula to exit iterative calculations. Iterative
            calculations will also be stopped if the formula iterates <see cref="P:Infragistics.Excel.Workbook.MaxRecursionIterations"/> times.
            </p>
            </remarks>
            <value>The maximum change of the values in a formula between iterations which will exit from iteration.</value>
            <seealso cref="P:Infragistics.Excel.Workbook.IterativeCalculationsEnabled"/>
            <seealso cref="P:Infragistics.Excel.Workbook.MaxRecursionIterations"/>
        </member>
        <member name="P:Infragistics.Excel.Workbook.MaxRecursionIterations">
            <summary>
            Gets or sets the maximum number of times formulas should be iteratively calculated.
            </summary>
            <remarks>
            <p class="body">
            This property is only valid when <see cref="P:Infragistics.Excel.Workbook.IterativeCalculationsEnabled"/> is True. Otherwise it is ignored.
            </p>
            <p class="body">
            When iterative calculations, or circular references, are enabled, this property determines the number of iterations
            allowed when calculating iteratively.
            </p>
            </remarks>
            <exception cref="T:System.ArgumentOutOfRangeException">
            The assigned value is outside the valid range of 1 and 32767.
            </exception>
            <value>The maximum number of times formulas should be iteratively calculated.</value>
            <seealso cref="P:Infragistics.Excel.Workbook.IterativeCalculationsEnabled"/>
            <seealso cref="P:Infragistics.Excel.Workbook.MaxChangeInIteration"/>
        </member>
        <member name="P:Infragistics.Excel.Workbook.NamedReferences">
            <summary>
            Gets the collection of named references in the workbook.
            </summary>
            <remarks>
            <p class="body">
            Named references are typically used to refer to cells or ranges of cells by name.
            The named reference names are used by formulas instead of explicitly naming the 
            cells or cell ranges.
            </p>
            </remarks>
            <value>The collection of named references in the workbook.</value>
            <seealso cref="T:Infragistics.Excel.NamedReference"/>
        </member>
        <member name="P:Infragistics.Excel.Workbook.Precision">
            <summary>
            Gets or sets the precision to use when obtaining a cell's value.
            </summary>
            <remarks>
            <p class="body">
            The precision determines whether to use the actual value of the cell or the display value of the cell.
            These are typically the same, but the format of a cell could cause a loss of precision in the displayed
            value.  For example, if a cell's value is 18.975, and a currency format is used for the cell, the display 
            value will be 18.98.
            </p>
            </remarks>
            <exception cref="T:System.ComponentModel.InvalidEnumArgumentException">
            The assigned value is not defined in the <see cref="T:Precision"/> enumeration.
            </exception>
            <value>The precision to use when obtaining a cell's value.</value>
        </member>
        <member name="P:Infragistics.Excel.Workbook.Protected">
            <summary>
            Gets or sets the value which indicates whether the workbook is protected.
            </summary>
            <remarks>
            <p class="body">If True, prevents changes to worksheet and to locked cells.</p>
            </remarks>
            <value>The value which indicates whether the workbook is protected.</value>
        </member>
        <member name="P:Infragistics.Excel.Workbook.RecalculateBeforeSave">
            <summary>
            Gets or sets the value which indicates whether the workbook should recalculate all formulas before saving.
            </summary>
            <remarks>
            <p class="body">
            This property only applies if the <see cref="P:Infragistics.Excel.Workbook.CalculationMode"/> is set to Manual.  Otherwise, it is ignored.
            </p>
            </remarks>
            <value>The value which indicates whether the workbook should recalculate all formulas before saving.</value>
            <seealso cref="P:Infragistics.Excel.Workbook.CalculationMode"/>
        </member>
        <member name="P:Infragistics.Excel.Workbook.SaveExternalLinkedValues">
            <summary>
            Gets or sets the value which indicates whether to save values linked from external workbooks.
            </summary>
            <remarks>
            <p class="body">
            This value will only be used when the workbook is opened in Microsoft Excel. When referencing external values
            and saving a workbook through the Excel assembly, external linked values will never be saved.
            </p>
            </remarks>
            <value>The value which indicates whether to save values linked from external workbooks.</value>
        </member>
        <member name="P:Infragistics.Excel.Workbook.ShouldRemoveCarriageReturnsOnSave">
            <summary>
            Gets or sets the value which indicates whether carriage return characters should be removed from string values in cells
            when the workbook is saved to an Excel file.
            </summary>
            <remarks>
            <p class="body">
            In Microsfot Excel 2003, carriage return characters are displayed as boxes. Most of the time, this should not be seen
            and removing the carriage return characters has no adverse effect on the layout of the text within a cell. Therefore,
            this property is True by default.
            </p>
            </remarks>
            <value>
            True if the saved workbook file should not contain the carraige return characters from cell values; False to export the 
            string values as they have been set on the cells.
            </value>
        </member>
        <member name="P:Infragistics.Excel.Workbook.Styles">
            <summary>
            Gets the collection of custom styles in the workbook.
            </summary>
            <remarks>
            <p class="body">
            Use this collection to add custom styles to excel workbook. The user can apply those styles to different 
            parts of excel workbook and thereby set complex formatting with ease.
            </p>
            </remarks>
            <value>The collection of custom style in the workbook.</value>
            <seealso cref="T:Infragistics.Excel.WorkbookStyle"/>
        </member>
        <member name="P:Infragistics.Excel.Workbook.WindowOptions">
            <summary>
            Gets the options which control various workbook level display properties.
            </summary>
            <remarks>
            <p class="body">
            The window options control properties of the child MDI window showing the workbook in Microsoft Excel.
            They also control display options of the workbook which do not change based on the selected worksheet.
            </p>
            </remarks>
            <value>The options which control various workbook level display properties.</value>
            <seealso cref="P:Infragistics.Excel.CustomView.WindowOptions"/>
        </member>
        <member name="P:Infragistics.Excel.Workbook.Worksheets">
            <summary>
            Gets the collection of worksheets in the workbook.
            </summary>
            <remarks>
            <p class="body">
            Use <see cref="T:WindowOptions.SelectedWorksheet"/> to set the selected worksheet. The selected worksheet is the 
            worksheet seen when the workbook is opened in Microsoft Excel.
            </p>
            </remarks>
            <value>The collection of worksheets in the workbook.</value>
        </member>
        <member name="T:Infragistics.Excel.WorkbookStyleCollection">
            <summary>
            A collection of workbook styles, or complex formats which can be easily applied to cells in Microsoft Excel.
            </summary>
            <seealso cref="T:Infragistics.Excel.WorkbookStyle"/>
        </member>
        <member name="M:Infragistics.Excel.WorkbookStyleCollection.AddUserDefinedStyle(Infragistics.Excel.IWorksheetCellFormat,System.String)">
            <summary>
            Adds new user defined style to the workbook.
            </summary>
            <param name="styleFormat">A cell format of the style.</param>
            <param name="name">The name which will identify the style in Microsoft Excel.</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="name"/> is null or empty.
            </exception>
            <exception cref="T:System.ArgumentException">
            A style already exists with the a name of <paramref name="name"/>. Names are compared case-insensitively.
            </exception>
            <returns>The added user defined style as a <see cref="T:Infragistics.Excel.WorkbookStyle"/> instance.</returns>
        </member>
        <member name="M:Infragistics.Excel.WorkbookStyleCollection.Clear">
            <summary>
            Clears all styles from the collection.
            </summary>
        </member>
        <member name="M:Infragistics.Excel.WorkbookStyleCollection.Contains(Infragistics.Excel.WorkbookStyle)">
            <summary>
            Determines whether a style is in the collection.
            </summary>
            <param name="style">The style to locate in the collection.</param>
            <returns>True if the style is found; False otherwise.</returns>
        </member>
        <member name="M:Infragistics.Excel.WorkbookStyleCollection.Remove(Infragistics.Excel.WorkbookStyle)">
            <summary>
            Removes the specified style from the collection.
            </summary>
            <param name="style">The style to remove from the collection.</param>
            <returns>
            True if the style was successfully removed; False if the custom view was not 
            in the collection.
            </returns>
        </member>
        <member name="M:Infragistics.Excel.WorkbookStyleCollection.RemoveAt(System.Int32)">
            <summary>
            Removes the style at the specified index from the collection.
            </summary>
            <param name="index">The zero-based index of the style in the collection.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <paramref name="index"/> is less than zero or <paramref name="index"/> is greater than or equal to <see cref="P:Infragistics.Excel.WorkbookStyleCollection.Count"/>.
            </exception>
        </member>
        <member name="P:Infragistics.Excel.WorkbookStyleCollection.Count">
            <summary>
            Gets the number of styles in the collection.
            </summary>
            <value>The number of styles in the collection.</value>
        </member>
        <member name="P:Infragistics.Excel.WorkbookStyleCollection.Item(System.Int32)">
            <summary>
            Gets the style at the specified index.
            </summary>
            <param name="index">The zero-based index of the style to get.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <paramref name="index"/> is less than zero or <paramref name="index"/> is greater than or equal to <see cref="P:Infragistics.Excel.WorkbookStyleCollection.Count"/>.
            </exception>
            <value>The style at the specified index.</value>
        </member>
        <member name="T:Infragistics.Excel.WorkbookWindowOptions">
            <summary>
            Represents the window options which are saved with the workbook.
            </summary>
            <remarks>
            <p class="body">
            The properties explicitly defined on this class and not inherited from the base class, 
            <see cref="T:Infragistics.Excel.WindowOptions"/>, are options that can be saved with a workbook, but 
            not with a custom view.
            </p>
            </remarks>
            <seealso cref="P:Infragistics.Excel.Workbook.WindowOptions"/>
            <seealso cref="T:Infragistics.Excel.CustomViewWindowOptions"/>
        </member>
        <member name="M:Infragistics.Excel.WorkbookWindowOptions.Reset">
            <summary>
            Resets the window options to their default settings.
            </summary>
            <remarks>
            <p class="body">
            The defaults used for each setting are the same defaults with which Microsoft Excel creates a blank workbook.
            </p>
            </remarks>
        </member>
        <member name="P:Infragistics.Excel.WorkbookWindowOptions.BoundsInTwips">
            <summary>
            Gets or sets the bounds of the workbook's MDI child window in twips (1/20th of a point).
            </summary>
            <remarks>
            <p class="note">
            <b>Note:</b> This setting cannot be saved with a <see cref="T:CustomView"/> in the Excel file. It can only be saved
            with a <see cref="T:Workbook"/>. Therefore, there is no corresponding property in <see cref="T:Infragistics.Excel.CustomViewWindowOptions"/> and
            a newly created CustomView will not be initialized with the setting from this property.
            </p>
            </remarks>
            <exception cref="T:System.ArgumentException">
            The left or top of the value assigned is outside the bounds of -32768 and 32767.
            </exception>
            <exception cref="T:System.ArgumentException">
            The width or height of the value assigned is outside the bounds of 0 and 65535.
            </exception>
            <value>The bounds of the workbook's MDI child window in twips (1/20th of a point).</value>
        </member>
        <member name="P:Infragistics.Excel.WorkbookWindowOptions.FirstVisibleTabIndex">
            <summary>
            Gets or sets the index of the first visible tab in the worksheet tab bar.
            </summary>
            <remarks>
            <p class="body">
            If the worksheet tab bar is not visible, this value will not be used, but it is still saved with the workbook.
            </p>
            <p class="note">
            <b>Note:</b> This setting cannot be saved with a <see cref="T:CustomView"/> in the Excel file. It can only be saved
            with a <see cref="T:Workbook"/>. Therefore, there is no corresponding property in <see cref="T:Infragistics.Excel.CustomViewWindowOptions"/> and
            a newly created CustomView will not be initialized with the setting from this property.
            </p>
            </remarks>
            <exception cref="T:System.ArgumentOutOfRangeException">
            The value assigned is less than zero.
            </exception>
            <value>The index of the first visible tab in the worksheet tab bar.</value>
            <seealso cref="P:Infragistics.Excel.WindowOptions.TabBarVisible"/>
            <seealso cref="P:Infragistics.Excel.WindowOptions.TabBarWidth"/>
        </member>
        <member name="P:Infragistics.Excel.WorkbookWindowOptions.Minimized">
            <summary>
            Gets or sets the value indicating whether the workbook's MDI child window is minimized in Microsoft Excel.
            </summary>
            <remarks>
            <p class="note">
            <b>Note:</b> This setting cannot be saved with a <see cref="T:CustomView"/> in the Excel file. It can only be saved
            with a <see cref="T:Workbook"/>. Therefore, there is no corresponding property in <see cref="T:Infragistics.Excel.CustomViewWindowOptions"/> and
            a newly created CustomView will not be initialized with the setting from this property.
            </p>
            </remarks>
            <value>The value indicating whether the workbook's MDI child window is minimized in Microsoft Excel.</value>
            <seealso cref="P:Infragistics.Excel.CustomViewWindowOptions.Maximized"/>
        </member>
        <member name="T:Infragistics.Excel.Worksheet">
            <summary>
            Represents one worksheet in Microsoft Excel Workbook.
            </summary>
            <remarks>
            <p class="body">
            Excel worksheet is essentially a table with a limited number of rows and columns. To create new worksheet, use 
            <see cref="M:Infragistics.Excel.WorksheetCollection.Add(System.String)"/> method of <see cref="P:Infragistics.Excel.Workbook.Worksheets"/>.
            </p>
            </remarks>
        </member>
        <member name="P:Infragistics.Excel.Worksheet.Columns">
            <summary>
            Gets the collection of columns in the worksheet.
            </summary>
            <remarks>
            <p class="body">
            The collection of columns is a fixed length collection, with the maximum number of columns in the collection being 
            <see cref="C:Workbook.MaxExcelColumnCount"/>.  Internally, the columns are only created and added to the collection
            when they are requested.
            </p>
            <p class="note">
            <b>Note:</b> Iterating the collection will not create all columns. It will only iterate the columns which have already 
            been used.  To create and iterate all columns in the worksheet use a For loop, iterating from 0 to one less than 
            MaxExcelColumnCount, and pass in each index to the collection's indexer.
            </p>
            </remarks>
            <value>The collection of columns in the worksheet.</value>
            <seealso cref="T:Infragistics.Excel.WorksheetColumn"/>
        </member>
        <member name="P:Infragistics.Excel.Worksheet.DataTables">
            <summary>
            Gets the collection of data tables in the worksheet.
            </summary>
            <value>The collection of data tables in the worksheet.</value>
            <seealso cref="T:Infragistics.Excel.WorksheetDataTable"/>
        </member>
        <member name="P:Infragistics.Excel.Worksheet.DefaultColumnWidth">
            <summary>
            Gets or sets the default column width, in 1/256s of average character width.
            </summary>
            <remarks>
            <p class="body">
            The default column width is the width of all columns which do not have their width explicitly set 
            to a positive number.
            </p>
            <p class="body">
            The value assigned must be between 0 and 65535. Invalid values will be automatically adjusted to valid values.
            </p>
            </remarks>
            <value>The default column width, in 1/256s of average character width.</value>
            <seealso cref="P:Infragistics.Excel.WorksheetColumn.Width"/>
        </member>
        <member name="P:Infragistics.Excel.Worksheet.DefaultRowHeight">
            <summary>
            Gets or sets the default row height in twips (1/20th of a point).
            </summary>
            <remarks>
            <p class="body">
            The default row height is the height of all rows which do not have their height explicitly set 
            to a positive number.
            </p>
            <p class="body">
            If the assigned value is -1, the default row height will then be calculated based on the default font 
            for the workbook, and subsequently getting this property will return the font-based default row height.
            </p>
            </remarks>
            <exception cref="T:System.ArgumentOutOfRangeException">
            The value assigned is outside the value range of -1 and 8192.
            </exception>
            <value>The default row height in twips (1/20th of a point).</value>
        </member>
        <member name="P:Infragistics.Excel.Worksheet.DisplayOptions">
            <summary>
            Gets the object which controls the display of the worksheet.
            </summary>
            <remarks>
            <p class="body">
            The display options include any settings which affect the display of the worksheet when viewed in Microsoft Excel.
            These settings will not affect the printed worksheet or the data stored in the worksheet.
            </p>
            </remarks>
            <value>The object which controls the display of the worksheet.</value>
            <seealso cref="M:Infragistics.Excel.CustomView.GetDisplayOptions(Infragistics.Excel.Worksheet)"/>
        </member>
        <member name="P:Infragistics.Excel.Worksheet.ImageBackground">
            <summary>
            Gets or sets the background image for the worksheet.
            </summary>
            <remarks>
            <p class="body">
            This image is tiled across the background of the worksheet.  If null, the worksheet will have no background.
            </p>
            </remarks>
            <value>The background image for the worksheet.</value>
        </member>
        <member name="P:Infragistics.Excel.Worksheet.Index">
            <summary>
            Gets the zero-based index of this worksheet in its parent <see cref="P:Infragistics.Excel.Workbook.Worksheets"/> collection.
            </summary>
            <remarks>
            <p class="body">
            Negative one indicates the worksheet has been removed from its parent collection.
            </p>
            </remarks>
            <value>The zero-based index of this worksheet in its parent Worksheets collection.</value>
            <seealso cref="M:Infragistics.Excel.WorksheetCollection.IndexOf(Infragistics.Excel.Worksheet)"/>
        </member>
        <member name="P:Infragistics.Excel.Worksheet.MergedCellsRegions">
            <summary>
            Gets the collection of merged cell ranges in this worksheet.
            </summary>
            <remarks>
            <p class="body">Use <see cref="M:Infragistics.Excel.WorksheetMergedCellsRegionCollection.Add(System.Int32,System.Int32,System.Int32,System.Int32)"/> method to add new merged cell ranges to the worksheet.</p>
            </remarks>
            <value>The collection of merged cell ranges in this worksheet.</value>
            <seealso cref="T:Infragistics.Excel.WorksheetMergedCellsRegion"/>
        </member>
        <member name="P:Infragistics.Excel.Worksheet.Name">
            <summary>
            Gets or sets the worksheet name.
            </summary>
            <remarks>
            <p class="body">The worksheet name is case-insensitively unique in the workbook.</p>
            <p class="body">
            The worksheet name is shown in the tab for the worksheet. In addition, the worksheet name can be used by formulas 
            from other worksheets to refer to cell in this worksheet.
            </p>
            </remarks>
            <exception cref="T:System.ArgumentNullException">
            The value assigned is null or empty.
            </exception>
            <exception cref="T:System.ArgumentException">
            The value assigned is being used as the name of another worksheet (worksheet names are case-insensitively compared).
            </exception>
            <value>The worksheet name.</value>
        </member>
        <member name="P:Infragistics.Excel.Worksheet.PrintOptions">
            <summary>
            Gets the object which controls how the worksheet prints.
            </summary>
            <remarks>
            <p class="body">
            The print options include any settings which affect the printed appearance of the worksheet.  These settings will
            not affect the data in the worksheet.  Although these are not display settings, some worksheet display styles will
            display all or some of the print options, so these settings may affect the display of the worksheet when viewed in 
            Microsoft Excel.
            </p>
            </remarks>
            <value>The object which controls how the worksheet prints.</value>
            <seealso cref="M:Infragistics.Excel.CustomView.GetPrintOptions(Infragistics.Excel.Worksheet)"/>
        </member>
        <member name="P:Infragistics.Excel.Worksheet.Protected">
            <summary>
            Gets or sets the protection state of Excel worksheet.
            </summary>
            <remarks>
            <p class="body">In protected worksheet cells which are locked can not be modified.</p>
            </remarks>
            <value>The protection state of Excel worksheet.</value>
        </member>
        <member name="P:Infragistics.Excel.Worksheet.Rows">
            <summary>
            Gets the collection of rows in the worksheet.
            </summary>
            <remarks>
            <p class="body">
            The collection of rows is a fixed length collection, with the maximum number of rows in the collection being 
            <see cref="C:Workbook.MaxExcelRowCount"/>.  Internally, the rows are only created and added to the collection
            when they are requested.
            </p>
            <p class="note">
            <b>Note:</b> Iterating the collection will not create all rows. It will only iterate the rows which have already 
            been used.  To create and iterate all rows in the worksheet use a For loop, iterating from 0 to one less than 
            MaxExcelRowCount, and pass in each index to the collection's indexer.
            </p>
            </remarks>
            <value>The collection of rows in the worksheet.</value>
            <seealso cref="T:Infragistics.Excel.WorksheetRow"/>
        </member>
        <member name="P:Infragistics.Excel.Worksheet.Selected">
            <summary>
            Gets the value which indicates whether this worksheet is selected.
            </summary>
            <remarks>
            <p class="body">
            If the worksheet has been removed from its parent <see cref="T:Workbook.Worksheets"/> collection, this will always return False.
            </p>
            </remarks>
            <value>The value which indicates whether this worksheet is selected.</value>
            <seealso cref="T:Infragistics.Excel.WindowOptions"/>
            <seealso cref="T:WindowOptions.SelectedWorksheet"/>
        </member>
        <member name="P:Infragistics.Excel.Worksheet.Shapes">
            <summary>
            Gets the collection of shapes on the worksheet.
            </summary>
            <value>The collection of shapes on the worksheet.</value>
            <seealso cref="T:Infragistics.Excel.WorksheetShape"/>
        </member>
        <member name="P:Infragistics.Excel.Worksheet.Workbook">
            <summary>
            Gets the <see cref="P:Infragistics.Excel.Worksheet.Workbook"/> that owns the worksheet.
            </summary>
            <value>The Workbook that owns the worksheet.</value>
        </member>
        <member name="T:Infragistics.Excel.WorksheetCell">
            <summary>
            Represents a row in a Microsoft Excel worksheet.
            </summary>
        </member>
        <member name="M:Infragistics.Excel.WorksheetCell.ToString">
            <summary>
            Gets the string representation of the address of the cell.
            </summary>
            <returns>The string representation of the address of the cell.</returns>
        </member>
        <member name="M:Infragistics.Excel.WorksheetCell.ApplyFormula(System.String)">
            <summary>
            Applies a formula to the cell.
            </summary>
            <remarks>
            <p class="body">
            <paramref name="value"/> is parsed based on the <see cref="T:Infragistics.Excel.CellReferenceMode"/> of the <see cref="T:Infragistics.Excel.Workbook"/>
            to which the cell belongs. If the cell's <see cref="P:Infragistics.Excel.WorksheetCell.Worksheet"/> has been removed from its parent collection,
            the A1 CellReferenceMode will be used to parse the formula.
            </p>
            </remarks>
            <param name="value">The formula to parse and apply to the cell.</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="value"/> is null or empty.
            </exception>
            <exception cref="T:Infragistics.Excel.FormulaParseException">
            <paramref name="value"/> is not a valid formula.
            </exception>
            <exception cref="T:System.InvalidOperationException">
            The cell is part of an array formula or data table which is not confined to just the cell.
            </exception>
            <seealso cref="T:Infragistics.Excel.Formula"/>
        </member>
        <member name="M:Infragistics.Excel.WorksheetCell.ClearComment">
            <summary>
            Removes the comment associated with the cell.
            </summary>
            <seealso cref="P:Infragistics.Excel.WorksheetCell.HasComment"/>
        </member>
        <member name="M:Infragistics.Excel.WorksheetCell.GetBoundsInTwips">
            <summary>
            Gets the bounds of the cell in twips (1/20th of a point).
            </summary>
            <remarks>
            <p class="body">
            The bounds returned by this method are only valid with the current configuration of the worksheet.
            If any rows or columns before the cell are resized, these bounds will no longer reflect the 
            position of the cell.
            </p>
            </remarks>
            <returns>The bounds of the cell on its worksheet.</returns>
        </member>
        <member name="M:Infragistics.Excel.WorksheetCell.IsCellTypeSupported(System.Type)">
            <summary>
            Returns True if a particular type can be exported to excel.
            </summary>
            <param name="cellType">The type to test.</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="cellType"/> is null.
            </exception>
            <returns>True if the type is supported as a cell value, False otherwise.</returns>
        </member>
        <member name="M:Infragistics.Excel.WorksheetCell.ToString(Infragistics.Excel.CellReferenceMode,System.Boolean)">
            <summary>
            Gets the string representation of the address of the cell.
            </summary>
            <param name="cellReferenceMode">The mode used to generate cell references.</param>
            <param name="includeWorksheetName">The value indicating whether to include the worksheet name in the cell address.</param>
            <returns>The string representation of the address of the cell.</returns>
        </member>
        <member name="P:Infragistics.Excel.WorksheetCell.AssociatedMergedCellsRegion">
            <summary>
            Gets the merged cells region which contains the cell, or null if the cell is not merged.
            </summary>
            <remarks>
            <p class="body">
            If the cell is part of a merged cell region, getting or setting the <see cref="P:Infragistics.Excel.WorksheetCell.Value"/> and <see cref="P:Infragistics.Excel.WorksheetCell.CellFormat"/>
            of the cell will get or set the <see cref="P:Infragistics.Excel.WorksheetMergedCellsRegion.Value"/> and 
            <see cref="P:Infragistics.Excel.WorksheetMergedCellsRegion.CellFormat"/> of the AssociatedMergedCellsRegion, respectively.
            </p>
            </remarks>
            <value>The merged cells region which contains the cell, or null if the cell is not merged.</value>
        </member>
        <member name="P:Infragistics.Excel.WorksheetCell.CellFormat">
            <summary>
            Gets the cell formatting for this cell.
            </summary>
            <remarks>
            <p class="body">
            Use this property to set cell formatting specific to the cell. If you will be appling the format to numerous cells, 
            see the <see cref="M:Infragistics.Excel.Workbook.CreateNewWorksheetCellFormat"/> method for performance considerations.
            </p>
            <p class="body">
            If this cell belongs to a merged cell region, getting the CellFormat will get the CellFormat of the associated merged 
            cell region.
            </p>
            </remarks>
            <value>The cell formatting for this cell.</value>
        </member>
        <member name="P:Infragistics.Excel.WorksheetCell.ColumnIndex">
            <summary>
            Gets the column index of the cell.
            </summary>
            <value>The column index of the cell.</value>
        </member>
        <member name="P:Infragistics.Excel.WorksheetCell.HasComment">
            <summary>
            Get the value indicating whether the cell has an associated comment.
            </summary>
            <remarks>True if the cell has an associated comment; False otherwise.</remarks>
            <seealso cref="M:Infragistics.Excel.WorksheetCell.ClearComment"/>
        </member>
        <member name="P:Infragistics.Excel.WorksheetCell.RowIndex">
            <summary>
            Gets the row index of the cell.
            </summary>
            <value>The row index of the cell.</value>
        </member>
        <member name="P:Infragistics.Excel.WorksheetCell.Value">
            <summary>
            Gets or sets the value of the cell.
            </summary>
            <remarks>
            <p class="body">
            If this cell belongs to a merged cell region, getting and setting the Value will get and set the 
            Value of the associated merged cell region.
            </p>
            <p class="body">
            The types supported for the value are:
            <BR/>
            <ul>
            <li class="taskitem"><span class="taskitemtext">System.Byte</span></li>
            <li class="taskitem"><span class="taskitemtext">System.SByte</span></li>
            <li class="taskitem"><span class="taskitemtext">System.Int16</span></li>
            <li class="taskitem"><span class="taskitemtext">System.Int64</span></li>
            <li class="taskitem"><span class="taskitemtext">System.UInt16</span></li>
            <li class="taskitem"><span class="taskitemtext">System.UInt64</span></li>
            <li class="taskitem"><span class="taskitemtext">System.UInt32</span></li>
            <li class="taskitem"><span class="taskitemtext">System.Int32</span></li>
            <li class="taskitem"><span class="taskitemtext">System.Single</span></li>
            <li class="taskitem"><span class="taskitemtext">System.Double</span></li>
            <li class="taskitem"><span class="taskitemtext">System.Boolean</span></li>
            <li class="taskitem"><span class="taskitemtext">System.Char</span></li>
            <li class="taskitem"><span class="taskitemtext">System.Enum</span></li>
            <li class="taskitem"><span class="taskitemtext">System.Decimal</span></li>
            <li class="taskitem"><span class="taskitemtext">System.DateTime</span></li>
            <li class="taskitem"><span class="taskitemtext">System.String</span></li>
            <li class="taskitem"><span class="taskitemtext">System.Text.StringBuilder</span></li>
            <li class="taskitem"><span class="taskitemtext">System.DBNull</span></li>
            <li class="taskitem"><span class="taskitemtext"><see cref="T:Infragistics.Excel.ErrorValue"/></span></li>
            <li class="taskitem"><span class="taskitemtext"><see cref="T:Infragistics.Excel.FormattedString"/></span></li>
            </ul>
            </p>
            </remarks>
            <exception cref="T:System.NotSupportedException">
            The assigned value's type is not supported and can't be exported to Excel.
            </exception>
            <exception cref="T:System.InvalidOperationException">
            The value assigned is a <see cref="T:Infragistics.Excel.Formula"/>. Instead, <see cref="M:Infragistics.Excel.Formula.ApplyTo(Infragistics.Excel.WorksheetCell)"/> should be called on 
            the Formula, passing in the cell.
            </exception>
            <exception cref="T:System.InvalidOperationException">
            The value assigned is a <see cref="T:Infragistics.Excel.WorksheetDataTable"/>. Instead, the <see cref="P:Infragistics.Excel.WorksheetDataTable.CellsInTable"/>
            should be set to a region containing the cell.
            </exception>
            <exception cref="T:System.InvalidOperationException">
            The value assigned is a FormattedString which is the value another cell or merged cell region.
            </exception>
            <exception cref="T:System.InvalidOperationException">
            The value is assigned and this cell is part of an <see cref="T:Infragistics.Excel.ArrayFormula"/> or WorksheetDataTable.
            </exception>
            <value>The value of the cell.</value>
            <seealso cref="P:Infragistics.Excel.WorksheetCell.AssociatedMergedCellsRegion"/>
            <seealso cref="M:Infragistics.Excel.WorksheetCell.IsCellTypeSupported(System.Type)"/>
            <seealso cref="P:Infragistics.Excel.WorksheetMergedCellsRegion.Value"/>
        </member>
        <member name="P:Infragistics.Excel.WorksheetCell.Worksheet">
            <summary>
            Gets the worksheet to which the cell belongs.
            </summary>
            <value>The worksheet to which the cell belongs.</value>
        </member>
        <member name="T:Infragistics.Excel.WorksheetCellCollection">
            <summary>
            A collection of cells in a row.
            </summary>
            <remarks>
            <p class="body">
            Cells in this collection are lazily created (they are only created and added to the collection when they are accessed).
            If this collection is enumerated, it only enumerates the cells which were already accessed.
            </p>
            </remarks>
            <seealso cref="T:Infragistics.Excel.WorksheetCell"/>
            <seealso cref="P:Infragistics.Excel.WorksheetRow.Cells"/>
        </member>
        <member name="P:Infragistics.Excel.WorksheetCellCollection.Item(System.Int32)">
            <summary>
            Gets the cell at the specified column index in the owning row.
            </summary>
            <remarks>
            <p class="note">
            <b>Note:</b> Iterating the collection will not create all cells. It will only iterate the cells which have already 
            been used.  To create and iterate all cells in the worksheet use a For loop, iterating from 0 to one less than 
            <see cref="C:Workbook.MaxExcelColumnCount"/>, and pass in each index to the collection's indexer.
            </p>
            </remarks>
            <param name="index">The zero-based column index of the cell to get.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <paramref name="index"/> is less than zero.
            </exception>
            <exception cref="T:System.InvalidOperationException">
            <paramref name="index"/> is greater than or equal to <see cref="F:Infragistics.Excel.Workbook.MaxExcelColumnCount"/>.
            </exception>
            <value>The cell at the specified column index in the owning row.</value>
        </member>
        <member name="T:Infragistics.Excel.WorksheetColumn">
            <summary>
            Represents a column in a Microsoft Excel worksheet.
            </summary>
        </member>
        <member name="P:Infragistics.Excel.WorksheetColumn.Width">
            <summary>
            Gets or sets the column width, in 1/256s of average character width.
            </summary>
            <remarks>
            <p class="body">
            If the width of the column is less than zero, the <see cref="P:Infragistics.Excel.Worksheet.DefaultColumnWidth"/> of the
            owning worksheet will be used as the column's width.
            </p>
            <p class="body">
            The value assigned must be between 0 and 65535. Invalid values will be automatically adjusted to valid values.
            </p>
            </remarks>
            <value>The column width, in 1/256s of average character width.</value>
        </member>
        <member name="T:Infragistics.Excel.WorksheetColumnCollection">
            <summary>
            A collection of columns in a worksheet.
            </summary>
            <remarks>
            <p class="body">
            Columns in this collection are lazily created (they are only created and added to the collection when they are accessed).
            Therefore, if this collection is enumerated, it only enumerates the columns which were already accessed.
            </p>
            </remarks>
            <seealso cref="T:Infragistics.Excel.WorksheetColumn"/>
            <seealso cref="P:Infragistics.Excel.Worksheet.Columns"/>
        </member>
        <member name="P:Infragistics.Excel.WorksheetColumnCollection.Item(System.Int32)">
            <summary>
            Gets the column at the specified index.
            </summary>
            <remarks>
            <p class="note">
            <b>Note:</b> Iterating the collection will not create all columns. It will only iterate the columns which have already 
            been used.  To create and iterate all columns in the worksheet use a For loop, iterating from 0 to one less than 
            <see cref="C:Workbook.MaxExcelColumnCount"/>, and pass in each index to the collection's indexer.
            </p>
            </remarks>
            <param name="index">The zero-based index of the column to get.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <paramref name="index"/> is less than zero.
            </exception>
            <exception cref="T:System.InvalidOperationException">
            <paramref name="index"/> is greater than or equal to <see cref="F:Infragistics.Excel.Workbook.MaxExcelColumnCount"/>.
            </exception>
            <value>The column at the specified index.</value>
        </member>
        <member name="T:Infragistics.Excel.WorksheetDataTable">
            <summary>
            Represents a data table for a range of cells.
            </summary>
            <remarks>
            <p class="body">
            Data tables are a way to show the results of one or more formulas by trying many different values in the variables
            of the formulas at the same time, and showing the different results in a table.  An excellent example of a data table
            application would be for a multiplication table.  A multiplication table shows results for the formula =X*Y.  However, 
            it shows many different results for the formula, where each result is determined by using different values for X and Y.
            These results are displayed in a table, where each cell in the table shows the formula's result for specific values of 
            X and Y, which are labeled in the row and column headers, respectively.  Therefore, each cell in a row will use the 
            same X value, and each cell in a column will use the same Y value.  
            </p>
            <p class="body">
            The multiplication table is known as a two-variable data table. Two-variable data tables are characterized by having a 
            single formula and values in the row and column headers of the table.  The formula is entered into the top-left cell of 
            the data table and usually references at least two cells outside the data table, known as the column-input and row-input 
            cells.  When the formula is evaluated for a specific cell in the data table, the reference to the column-input cell in the
            formula is replaced with the value in the cell's row header (this may seem backwards, but the values in the row headers 
            run down the left column of the data table, which is why they are used for the column-input cell), and the reference to 
            the row-input cell is replaced with the value in the cell's column header.
            </p>
            <p class="body">
            Another type of data table is the one-variable data table.  A one-variable data table can be a column-oriented or 
            a row-oriented data table.  A column-oriented data table has data in the cells of the left column and formulas in the 
            cells of the top row (anything in the top-left cell of the data table is ignored in this type of data table).  Usually, 
            the formulas in the top row all reference the same cell outside the data table, known as the column-input cell.  When a 
            cell in the table is evaluated, the formula in its column header is used, with the reference to the column-input cell
            replaced by the value in cell's row header.
            </p>
            <p class="body">
            A row-oriented one-variable data table is formed like a column-oriented data table, except the values run along the top 
            row, the formulas run down the left column, and the cell referenced by all formulas is known as the row-input cell.
            </p>
            </remarks>
        </member>
        <member name="P:Infragistics.Excel.WorksheetDataTable.CellsInTable">
            <summary>
            Gets or sets the region of cells in the data table.
            </summary>
            <remarks>
            <p class="body">
            Any interior cells (cells not in the left-most column or top row) in this region will have their values removed 
            when this is set. If any interior cells have array formulas with a region that crosses outside the data
            table, an error will occur. However, if the array formula's region is confined to cells in the 
            interior of the data table, the array formula will have <see cref="M:Infragistics.Excel.ArrayFormula.ClearCellRange"/>
            called on it, which will remove it from all its cells. Similarly, if an existing data table's interior cells
            contain some of the interior cells in this region as well as some external cells, an error will occur.
            However, if all interior cells of the existing data table are contained in the interior cells of the new
            region specified here, the existing data table will be removed from the worksheet.
            </p>
            <p class="body">
            After the cells in the table have been specified, the interior cells' values cannot be modified.
            </p>
            <p class="note">
            <B>Note:</B> The <see cref="P:Infragistics.Excel.WorksheetDataTable.RowInputCell"/> and <see cref="P:Infragistics.Excel.WorksheetDataTable.ColumnInputCell"/> cannot be with the region.
            </p>
            </remarks>
            <exception cref="T:System.ArgumentNullException">
            The value assigned is null.
            </exception>
            <exception cref="T:System.InvalidOperationException">
            The value is assigned after the data table has been removed from the worksheet.
            </exception>
            <exception cref="T:System.ArgumentException">
            The value assigned is a region from a worksheet other than the data table's worksheet.
            </exception>
            <exception cref="T:System.InvalidOperationException">
            The region specified contains the RowInputCell or the ColumnInputCell.
            </exception>
            <exception cref="T:System.InvalidOperationException">
            One or more of the interior cells of the value assigned (all cells except the left-most column and top row) is an 
            interior cell of another data table or is a cell in an array formula, and the entire range of that other 
            entity extends outside the interior cells of the value assigned.
            </exception>
            <exception cref="T:System.ArgumentException">
            The assigned value is only one row tall or one column wide. The cells in the table must be at least two rows by two columns.
            </exception>
            <exception cref="T:System.InvalidOperationException">
            The assigned value contains merged regions which are not confined to the left-most column or top row. No merged regions
            can exist in the interior cells of the data table and no merged regions can exist in the left-most column or top row
            and extend outside the data table region.
            </exception>
            <value>The region of cells in the data table.</value>
            <seealso cref="T:Infragistics.Excel.ArrayFormula"/>
            <seealso cref="P:Infragistics.Excel.WorksheetDataTable.ColumnInputCell"/>
            <seealso cref="P:Infragistics.Excel.WorksheetDataTable.RowInputCell"/>
        </member>
        <member name="P:Infragistics.Excel.WorksheetDataTable.ColumnInputCell">
            <summary>
            Gets or sets the cell used as the column-input cell in the data table.
            </summary>
            <remarks>
            <p class="body">
            This represents the cell reference in all formulas of the data table to replace with row header values.
            If this and the <see cref="P:Infragistics.Excel.WorksheetDataTable.RowInputCell"/> are non-null, the data table is a two-variable data table.
            Otherwise, if only one is non-null, this is a one-variable data table.
            </p>
            <p class="note">
            <B>Note:</B> The RowInputCell and ColumnInputCell cannot be within the <see cref="P:Infragistics.Excel.WorksheetDataTable.CellsInTable"/> region.
            </p>
            </remarks>
            <exception cref="T:System.ArgumentException">
            The assigned value does not belong to the same worksheet as the data table.
            </exception>
            <exception cref="T:System.InvalidOperationException">
            The value is assigned after the data table has been removed from the worksheet.
            </exception>
            <exception cref="T:System.InvalidOperationException">
            The value assigned is within the CellsInTable region.
            </exception>
            <exception cref="T:System.InvalidOperationException">
            The assigned value is null and RowInputCell is null. At least one input cell must be non-null.
            </exception>
            <exception cref="T:System.InvalidOperationException">
            The assigned value is the same as RowInputCell. The input cells cannot be the same cell.
            </exception>
            <value>The cell used as the column-input cell in the data table.</value>
            <seealso cref="P:Infragistics.Excel.WorksheetDataTable.CellsInTable"/>
            <seealso cref="P:Infragistics.Excel.WorksheetDataTable.RowInputCell"/>
        </member>
        <member name="P:Infragistics.Excel.WorksheetDataTable.RowInputCell">
            <summary>
            Gets or sets the cell used as the row-input cell in the data table.
            </summary>
            <remarks>
            <p class="body">
            This represents the cell reference in all formulas of the data table to replace with column header values.
            If this and the <see cref="P:Infragistics.Excel.WorksheetDataTable.ColumnInputCell"/> are non-null, the data table is a two-variable data table.
            Otherwise, if only one is non-null, this is a one-variable data table.
            </p>
            <p class="note">
            <B>Note:</B> The RowInputCell and ColumnInputCell cannot be within the <see cref="P:Infragistics.Excel.WorksheetDataTable.CellsInTable"/> region.
            </p>
            </remarks>
            <exception cref="T:System.ArgumentException">
            The assigned value does not belong to the same worksheet as the data table.
            </exception>
            <exception cref="T:System.InvalidOperationException">
            The value is assigned after the data table has been removed from the worksheet.
            </exception>
            <exception cref="T:System.InvalidOperationException">
            The value assigned is within the CellsInTable region.
            </exception>
            <exception cref="T:System.InvalidOperationException">
            The assigned value is null and ColumnInputCell is null. At least one input cell must be non-null.
            </exception>
            <exception cref="T:System.InvalidOperationException">
            The assigned value is the same as ColumnInputCell. The input cells cannot be the same cell.
            </exception>
            <value>The cell used as the row-input cell in the data table.</value>
            <seealso cref="P:Infragistics.Excel.WorksheetDataTable.CellsInTable"/>
            <seealso cref="P:Infragistics.Excel.WorksheetDataTable.ColumnInputCell"/>
        </member>
        <member name="P:Infragistics.Excel.WorksheetDataTable.Worksheet">
            <summary>
            Gets the worksheet on which this data table resides.
            </summary>
        </member>
        <member name="T:Infragistics.Excel.WorksheetDataTableCollection">
            <summary>
            A collection of <see cref="T:Infragistics.Excel.WorksheetDataTable"/> instances on a worksheet.
            </summary>
        </member>
        <member name="M:Infragistics.Excel.WorksheetDataTableCollection.Add(Infragistics.Excel.WorksheetRegion,Infragistics.Excel.WorksheetCell,Infragistics.Excel.WorksheetCell)">
            <summary>
            Creates a new data table and adds it to the collection.
            </summary>
            <remarks>
            <p class="body">
            The input cells specified must be different cell references and at least one must be non-null.
            See the <see cref="T:Infragistics.Excel.WorksheetDataTable"/> overview for more information on data tables.
            </p>
            </remarks>
            <param name="cellsInTable">The region of cells in the data table.</param>
            <param name="columnInputCell">The cell used as the column-input cell in the data table.</param>
            <param name="rowInputCell">The cell used as the row-input cell in the data table.</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="cellsInTable"/> is null.
            </exception>
            <exception cref="T:System.ArgumentException">
            <paramref name="cellsInTable"/> is a region which does not belongs to the worksheet which owns this collection.
            </exception>
            <exception cref="T:System.ArgumentException">
            <paramref name="columnInputCell"/> is not null but does not belong to the worksheet which owns this collection.
            </exception>
            <exception cref="T:System.ArgumentException">
            <paramref name="rowInputCell"/> is not null but does not belong to the worksheet which owns this collection.
            </exception>
            <exception cref="T:System.InvalidOperationException">
            Both <paramref name="columnInputCell"/> and <paramref name="rowInputCell"/> are null.
            </exception>
            <exception cref="T:System.InvalidOperationException">
            <paramref name="columnInputCell"/> and <paramref name="rowInputCell"/> are the same cell.
            </exception>
            <exception cref="T:System.InvalidOperationException">
            <paramref name="columnInputCell"/> or <paramref name="rowInputCell"/> are contained in the 
            <paramref name="cellsInTable"/> region.
            </exception>
            <exception cref="T:System.InvalidOperationException">
            One or more of the interior cells of the <paramref name="cellsInTable"/> region (all cells except the left-most column 
            and top row) is an interior cell of another data table or is a cell in an array formula, and the entire 
            range of that other entity extends outside the interior cells of <paramref name="cellsInTable"/>.
            </exception>
            <returns>The newly created data table.</returns>
        </member>
        <member name="M:Infragistics.Excel.WorksheetDataTableCollection.Clear">
            <summary>
            Clears all data tables from the collection.
            </summary>
            <remarks>
            <p class="body">
            Once a data table is removed from the collection, it can no longer be used.
            </p>
            </remarks>
        </member>
        <member name="M:Infragistics.Excel.WorksheetDataTableCollection.Remove(Infragistics.Excel.WorksheetDataTable)">
            <summary>
            Removes the specified data table from the collection.
            </summary>
            <remarks>
            <p class="body">
            Once a data table is removed from the collection, it can no longer be used.
            </p>
            </remarks>
            <param name="dataTable">The data table to remove from the collection.</param>
            <returns>
            True if the dataTable was successfully removed; False if the dataTable was not in the collection.
            </returns>
        </member>
        <member name="M:Infragistics.Excel.WorksheetDataTableCollection.RemoveAt(System.Int32)">
            <summary>
            Removes the data table at the specified index from the collection.
            </summary>
            <remarks>
            <p class="body">
            Once a data table is removed from the collection, it can no longer be used.
            </p>
            </remarks>
            <param name="index">The zero-based index of the data table to remove from the collection.</param>
        </member>
        <member name="P:Infragistics.Excel.WorksheetDataTableCollection.Count">
            <summary>
            Gets the number of data tables in the collection.
            </summary>
            <value>The number of data tables in the collection.</value>
        </member>
        <member name="P:Infragistics.Excel.WorksheetDataTableCollection.Item(System.Int32)">
            <summary>
            Gets the data table at the specified index in the collection.
            </summary>
            <param name="index">The zero-based index of the data table to get.</param>
            <value>The data table at the specified index.</value>
        </member>
        <member name="T:Infragistics.Excel.WorksheetDisplayOptions">
            <summary>
            Class which exposes the display options which can only be controlled through the worksheet.
            </summary>
            <seealso cref="P:Infragistics.Excel.Worksheet.DisplayOptions"/>
            <seealso cref="T:Infragistics.Excel.CustomViewDisplayOptions"/>
        </member>
        <member name="M:Infragistics.Excel.WorksheetDisplayOptions.Reset">
            <summary>
            Resets the display options to their default settings.
            </summary>
            <remarks>
            <p class="body">
            The defaults used for each setting are the same defaults with which Microsoft Excel creates a blank worksheet.
            </p>
            </remarks>
        </member>
        <member name="P:Infragistics.Excel.WorksheetDisplayOptions.MagnificationInNormalView">
            <summary>
            Gets or sets the magnification level of the worksheet when it is displayed in normal view.
            </summary>
            <remarks>
            <p class="body">
            Magnifications are stored as percentages of the normal viewing magnification. A value of 100 indicates normal magnification
            whereas a value of 200 indicates a zoom that is twice the normal viewing magnification.
            </p>
            </remarks>
            <exception cref="T:System.ArgumentOutOfRangeException">
            The assigned value is outside the valid range of magnification levels for a worksheet. The level must be between 10 and 400.
            </exception>
            <value>The magnification level of the worksheet when it is displayed in normal view.</value>
            <seealso cref="P:Infragistics.Excel.WorksheetDisplayOptions.MagnificationInPageBreakView"/>
            <seealso cref="P:Infragistics.Excel.WorksheetDisplayOptions.MagnificationInPageLayoutView"/>
            <seealso cref="P:Infragistics.Excel.DisplayOptions.View"/>
            <seealso cref="P:Infragistics.Excel.CustomViewDisplayOptions.MagnificationInCurrentView"/>
        </member>
        <member name="P:Infragistics.Excel.WorksheetDisplayOptions.MagnificationInPageBreakView">
            <summary>
            Gets or sets the magnification level of the worksheet when it is displayed in the page break preview.
            </summary>
            <remarks>
            <p class="body">
            Magnifications are stored as percentages of the normal viewing magnification. A value of 100 indicates normal magnification
            whereas a value of 200 indicates a zoom that is twice the normal viewing magnification.
            </p>
            </remarks>
            <exception cref="T:System.ArgumentOutOfRangeException">
            The assigned value is outside the valid range of magnification levels for a worksheet. The level must be between 10 and 400.
            </exception>
            <value>The magnification level of the worksheet when it is displayed in the page break preview.</value>
            <seealso cref="P:Infragistics.Excel.WorksheetDisplayOptions.MagnificationInNormalView"/>
            <seealso cref="P:Infragistics.Excel.WorksheetDisplayOptions.MagnificationInPageLayoutView"/>
            <seealso cref="P:Infragistics.Excel.DisplayOptions.View"/>
            <seealso cref="P:Infragistics.Excel.CustomViewDisplayOptions.MagnificationInCurrentView"/>
        </member>
        <member name="P:Infragistics.Excel.WorksheetDisplayOptions.MagnificationInPageLayoutView">
            <summary>
            Gets or sets the magnification level of the worksheet when it is displayed in page layout view.
            </summary>
            <remarks>
            <p class="body">
            Magnifications are stored as percentages of the normal viewing magnification. A value of 100 indicates normal magnification
            whereas a value of 200 indicates a zoom that is twice the normal viewing magnification.
            </p>
            </remarks>
            <exception cref="T:System.ArgumentOutOfRangeException">
            The assigned value is outside the valid range of magnification levels for a worksheet. The level must be between 10 and 400.
            </exception>
            <value>The magnification level of the worksheet when it is displayed in page layout view.</value>
            <seealso cref="P:Infragistics.Excel.WorksheetDisplayOptions.MagnificationInNormalView"/>
            <seealso cref="P:Infragistics.Excel.WorksheetDisplayOptions.MagnificationInPageBreakView"/>
            <seealso cref="P:Infragistics.Excel.DisplayOptions.View"/>
            <seealso cref="P:Infragistics.Excel.CustomViewDisplayOptions.MagnificationInCurrentView"/>
        </member>
        <member name="P:Infragistics.Excel.WorksheetDisplayOptions.OrderColumnsRightToLeft">
            <summary>
            Gets or sets the value indicating whether the columns are ordered right to left.
            </summary>
            <remarks>
            <p class="body">
            If the columns are ordered right to left, other aspects of the worksheet display differently. The vertical scrollbar
            will display on the left side of the worksheet and the worksheet tab bar, usually displayed on the left side of the
            worksheet, will display on the right side.
            </p>
            </remarks>
            <value>The value indicating whether the columns are ordered right to left.</value>
        </member>
        <member name="P:Infragistics.Excel.WorksheetDisplayOptions.ShowWhitespaceInPageLayoutView">
            <summary>
            Gets or sets the value which indicates whether to show whitespace between worksheet pages in page layout view.
            </summary>
            <remarks>
            <p class="note">
            <B>Note:</B> For this value to affect the display of the worksheet, the <see cref="P:Infragistics.Excel.DisplayOptions.View"/> must 
            be set to PageLayout. However, if a different view is used, this is still saved with the workbook.
            </p>
            <p class="note">
            <b>Note:</b> The <see cref="T:Infragistics.Excel.WorksheetView"/> value of PageLayout is only supported in Excel 2007. 
            If a worksheet with that View is viewed in earlier versions of Microsoft Excel, the view will default to Normal view.
            </p>
            </remarks>
            <value>The value which indicates whether to show white page between worksheet pages in page layout view.</value>
            <seealso cref="P:Infragistics.Excel.DisplayOptions.View"/>
        </member>
        <member name="P:Infragistics.Excel.WorksheetDisplayOptions.TabColor">
            <summary>
            Gets or sets the color to use for the associated worksheet's tab in the tab bar of Microsoft Excel.
            </summary>
            <remarks>
            <p class="body">
            If the tab bar is not visible, this color will not be seen.
            </p>
            </remarks>
            <exception cref="T:System.InvalidOperationException">
            The workbook is using a custom palette and setting this color would cause the custom palette to use 
            too many colors.
            </exception>
            <value>The color to use for the associated worksheet's tab in the tab bar of Microsoft Excel.</value>
            <seealso cref="P:Infragistics.Excel.WindowOptions.TabBarVisible"/>
        </member>
        <member name="T:Infragistics.Excel.WorksheetImage">
            <summary>
            Represents any image on the worksheet except the background image.
            </summary>
            <seealso cref="P:Infragistics.Excel.Worksheet.ImageBackground"/>
        </member>
        <member name="M:Infragistics.Excel.WorksheetImage.#ctor(System.Drawing.Image)">
            <summary>
            Creates a new <see cref="T:Infragistics.Excel.WorksheetImage"/> instance.
            </summary>
            <param name="image">The image displayed in the worksheet for this shape.</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="image"/> is null.
            </exception>
        </member>
        <member name="M:Infragistics.Excel.WorksheetImage.SetBoundsInTwips(Infragistics.Excel.Worksheet,System.Drawing.Rectangle,System.Boolean)">
            <summary>
            Sets the bounds of the shape in twips (1/20th of a point).
            </summary>
            <remarks>
            <p class="body">
            The shape will only be position at the specified bounds while the worksheet remains in the current configuration.
            If any rows or columns before or within the shape are resized, the shape will no longer be placed at the bounds specified.
            </p>
            <p class="body">
            If <paramref name="maintainAspectRatio"/> is False, this just calls <see cref="M:Infragistics.Excel.WorksheetShape.SetBoundsInTwips(Infragistics.Excel.Worksheet,System.Drawing.Rectangle)"/> on its 
            base class.
            </p>
            </remarks>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="worksheet"/> is null.
            </exception>
            <param name="worksheet">The worksheet on which the shape should be placed.</param>
            <param name="bounds">The new bounds where the shape should be placed.</param> 
            <param name="maintainAspectRatio">The value indicating whether the image's aspect ratio should be maintained.</param>
        </member>
        <member name="P:Infragistics.Excel.WorksheetImage.Image">
            <summary>
            Gets the image displayed in the worksheet for this shape.
            </summary>
            <value>The image displayed in the worksheet for this shape.</value>
        </member>
        <member name="T:Infragistics.Excel.WorksheetMergedCellsRegion">
            <summary>
            Represents a merged region of cells, or cells which share a value and format and appear as one cell when 
            viewed in Microsoft Excel.
            </summary>
            <remarks>
            <p class="body">
            Merged cell regions cannot overlap (a cell can only belong to one merged cell region). In addition, 
            <see cref="T:Infragistics.Excel.ArrayFormula"/> and <see cref="T:Infragistics.Excel.WorksheetDataTable"/> instances cannot be applied to merged cell
            regions.
            </p>
            </remarks>
        </member>
        <member name="T:Infragistics.Excel.WorksheetRegion">
            <summary>
            Represents a rectangular region of cells on a worksheet.
            </summary>
        </member>
        <member name="M:Infragistics.Excel.WorksheetRegion.#ctor(Infragistics.Excel.Worksheet,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:Infragistics.Excel.WorksheetRegion"/> class.
            </summary>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="worksheet"/> is null.
            </exception>
            <exception cref="T:System.InvalidOperationException">
            <paramref name="firstRow"/> is greater than <paramref name="lastRow"/> or 
            <paramref name="firstColumn"/> is greater than <paramref name="lastColumn"/>.
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            Any row or column indices specified are outside the valid row or column ranges.
            </exception>
            <param name="worksheet">The worksheet on which the region resides.</param>
            <param name="firstRow">The index of the first row of the region.</param>
            <param name="firstColumn">The index of the first column of the region.</param>
            <param name="lastRow">The index of the last row of the region.</param>
            <param name="lastColumn">The index of the last row column of the region.</param>
        </member>
        <member name="M:Infragistics.Excel.WorksheetRegion.ToString">
            <summary>
            Gets the string representation of the range of cells in the region.
            </summary>
            <returns>The string representation of the range of cells in the region.</returns>
        </member>
        <member name="M:Infragistics.Excel.WorksheetRegion.ApplyArrayFormula(System.String)">
            <summary>
            Applies a array formula to the region of cells.
            </summary>
            <remarks>
            <p class="body">
            <paramref name="value"/> is parsed based on the <see cref="T:Infragistics.Excel.CellReferenceMode"/> of the <see cref="T:Infragistics.Excel.Workbook"/>
            to which the region belongs. If the region's <see cref="P:Infragistics.Excel.WorksheetRegion.Worksheet"/> has been removed from its parent collection,
            the A1 CellReferenceMode will be used to parse the formula.
            </p>
            </remarks>
            <param name="value">The array formula to parse and apply to the region.</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="value"/> is null or empty.
            </exception>
            <exception cref="T:Infragistics.Excel.FormulaParseException">
            <paramref name="value"/> is not a valid formula.
            </exception>
            <exception cref="T:System.InvalidOperationException">
            The region contains another array formula or data table which extends outside the region.
            </exception>
            <seealso cref="T:Infragistics.Excel.ArrayFormula"/>
        </member>
        <member name="M:Infragistics.Excel.WorksheetRegion.ApplyFormula(System.String)">
            <summary>
            Applies a formula to the region of cells.
            </summary>
            <remarks>
            <p class="body">
            <paramref name="value"/> is parsed based on the <see cref="T:Infragistics.Excel.CellReferenceMode"/> of the <see cref="T:Infragistics.Excel.Workbook"/>
            to which the region belongs. If the region's <see cref="P:Infragistics.Excel.WorksheetRegion.Worksheet"/> has been removed from its parent collection,
            the A1 CellReferenceMode will be used to parse the formula.
            </p>
            </remarks>
            <param name="value">The formula to parse and apply to the region.</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="value"/> is null or empty.
            </exception>
            <exception cref="T:Infragistics.Excel.FormulaParseException">
            <paramref name="value"/> is not a valid formula.
            </exception>
            <exception cref="T:System.InvalidOperationException">
            The region contains an array formula or data table which extends outside the region.
            </exception>
            <seealso cref="T:Infragistics.Excel.Formula"/>
        </member>
        <member name="M:Infragistics.Excel.WorksheetRegion.GetBoundsInTwips">
            <summary>
            Gets the bounds of the region in twips (1/20th of a point).
            </summary>
            <remarks>
            <p class="body">
            The bounds returned by this method are only valid with the current configuration of the worksheet.
            If any rows or columns before the region are resized, these bounds will no longer reflect the 
            position of the region.
            </p>
            </remarks>
            <returns>The bounds of the region on its worksheet.</returns>
        </member>
        <member name="M:Infragistics.Excel.WorksheetRegion.ToString(Infragistics.Excel.CellReferenceMode,System.Boolean)">
            <summary>
            Gets the string representation of the range of cells in the region.
            </summary>
            <param name="cellReferenceMode">The mode used to generate cell references.</param>
            <param name="includeWorksheetName">The value indicating whether to include the worksheet name in the range address.</param>
            <returns>The string representation of the range of cells in the region.</returns>
        </member>
        <member name="P:Infragistics.Excel.WorksheetRegion.FirstColumn">
            <summary>
            Gets the index of the first column in the region.
            </summary>
            <value>The index of the first column in the region.</value>
        </member>
        <member name="P:Infragistics.Excel.WorksheetRegion.FirstRow">
            <summary>
            Gets the index of the first row in the region.
            </summary>
            <value>The index of the first row in the region.</value>
        </member>
        <member name="P:Infragistics.Excel.WorksheetRegion.LastColumn">
            <summary>
            Gets the index of the last column in the region.
            </summary>
            <value>The index of the last column in the region.</value>
        </member>
        <member name="P:Infragistics.Excel.WorksheetRegion.LastRow">
            <summary>
            Gets the index of the last row in the region.
            </summary>
            <value>The index of the last row in the region.</value>
        </member>
        <member name="P:Infragistics.Excel.WorksheetRegion.Worksheet">
            <summary>
            Gets the worksheet on which the region resides.
            </summary>
            <value>The worksheet on which the region resides.</value>
        </member>
        <member name="P:Infragistics.Excel.WorksheetMergedCellsRegion.CellFormat">
            <summary>
            Gets the cell formatting for the merged cell region.
            </summary>
            <value>The cell formatting for the merged cell region.</value>
        </member>
        <member name="P:Infragistics.Excel.WorksheetMergedCellsRegion.Value">
            <summary>
            Gets or sets the value of the merged cell region.
            </summary>
            <remarks>
            <p class="body">The types supported for the value are:
            <BR/>
            <ul>
            <li class="taskitem"><span class="taskitemtext">System.Byte</span></li>
            <li class="taskitem"><span class="taskitemtext">System.SByte</span></li>
            <li class="taskitem"><span class="taskitemtext">System.Int16</span></li>
            <li class="taskitem"><span class="taskitemtext">System.Int64</span></li>
            <li class="taskitem"><span class="taskitemtext">System.UInt16</span></li>
            <li class="taskitem"><span class="taskitemtext">System.UInt64</span></li>
            <li class="taskitem"><span class="taskitemtext">System.UInt32</span></li>
            <li class="taskitem"><span class="taskitemtext">System.Int32</span></li>
            <li class="taskitem"><span class="taskitemtext">System.Single</span></li>
            <li class="taskitem"><span class="taskitemtext">System.Double</span></li>
            <li class="taskitem"><span class="taskitemtext">System.Boolean</span></li>
            <li class="taskitem"><span class="taskitemtext">System.Char</span></li>
            <li class="taskitem"><span class="taskitemtext">System.Enum</span></li>
            <li class="taskitem"><span class="taskitemtext">System.Decimal</span></li>
            <li class="taskitem"><span class="taskitemtext">System.DateTime</span></li>
            <li class="taskitem"><span class="taskitemtext">System.String</span></li>
            <li class="taskitem"><span class="taskitemtext">System.Text.StringBuilder</span></li>
            <li class="taskitem"><span class="taskitemtext">System.DBNull</span></li>
            <li class="taskitem"><span class="taskitemtext"><see cref="T:Infragistics.Excel.ErrorValue"/></span></li>
            <li class="taskitem"><span class="taskitemtext"><see cref="T:Infragistics.Excel.FormattedString"/></span></li>
            </ul>
            </p>
            </remarks>
            <exception cref="T:System.NotSupportedException">
            The assigned value's type is not supported and can't be exported to Excel.
            </exception>
            <exception cref="T:System.InvalidOperationException">
            The value assigned is a <see cref="T:Infragistics.Excel.Formula"/>. Instead, <see cref="M:Infragistics.Excel.Formula.ApplyTo(Infragistics.Excel.WorksheetCell)"/> should be called on 
            the Formula, passing in the cell.
            </exception>
            <exception cref="T:System.InvalidOperationException">
            The value assigned is a <see cref="T:Infragistics.Excel.WorksheetDataTable"/>. Instead, the <see cref="P:Infragistics.Excel.WorksheetDataTable.CellsInTable"/>
            should be set to a region containing the cell.
            </exception>
            <exception cref="T:System.InvalidOperationException">
            The value assigned is a FormattedString which is the value another cell or merged cell region.
            </exception>
            <exception cref="T:System.InvalidOperationException">
            The value is assigned and this cell is part of an <see cref="T:Infragistics.Excel.ArrayFormula"/> or WorksheetDataTable.
            </exception>
            <value>The value of the merged cell region.</value>
            <seealso cref="P:Infragistics.Excel.WorksheetCell.Value"/>
            <seealso cref="M:Infragistics.Excel.WorksheetCell.IsCellTypeSupported(System.Type)"/>
        </member>
        <member name="T:Infragistics.Excel.WorksheetMergedCellsRegionCollection">
            <summary>
            A collection of <see cref="T:Infragistics.Excel.WorksheetMergedCellsRegion"/> instances in a <see cref="T:Infragistics.Excel.Worksheet"/>.
            </summary>
            <seealso cref="T:Infragistics.Excel.WorksheetMergedCellsRegion"/>
            <seealso cref="P:Infragistics.Excel.Worksheet.MergedCellsRegions"/>
        </member>
        <member name="M:Infragistics.Excel.WorksheetMergedCellsRegionCollection.Add(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Creates new merged cell region and adds it to the collection.
            </summary>
            <remarks>
            <p class="body">
            The new merged cell region will take its value from the first cell containing a value, starting at the top-left and going across 
            then down in the region. The value of all other cells will be lost. Similarly, the new region will initialize its cell format 
            from the first cell containing a non-default cell format.
            </p>
            </remarks>
            <param name="firstRow">The index of the first row of the merged cell region.</param>
            <param name="firstColumn">The index of the first column of the merged cell region.</param>
            <param name="lastRow">The index of the last row of the merged cell region.</param>
            <param name="lastColumn">The index of the last row column of the merged cell region.</param>
            <exception cref="T:System.InvalidOperationException">
            <paramref name="firstRow"/> is greater than <paramref name="lastRow"/> or 
            <paramref name="firstColumn"/> is greater than <paramref name="lastColumn"/>.
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            Any row or column indices specified are outside the valid row or column ranges.
            </exception>
            <exception cref="T:System.InvalidOperationException">
            The new merged cell region overlaps with an existing merged cell region.
            </exception>
            <returns>The newly created <see cref="T:Infragistics.Excel.WorksheetMergedCellsRegion"/>.</returns>
        </member>
        <member name="M:Infragistics.Excel.WorksheetMergedCellsRegionCollection.Clear">
            <summary>
            Clears all merged cell regions from the collection.
            </summary>
            <remarks>
            <p class="body">
            When a merged cell region is removed, the top-left cell in the region will retain the region's value.
            All other cells in the region will have a null value. In addition, all cells in the merged region will
            have the region's cell format when it is removed.
            </p>
            </remarks>
        </member>
        <member name="M:Infragistics.Excel.WorksheetMergedCellsRegionCollection.IsOverlappingWithMergedRegion(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Checks if any part of specified region is already a part of a merged cell region.
            </summary>
            <param name="firstRow">The index of the first row of the merged cell region.</param>
            <param name="firstColumn">The index of the first column of the merged cell region.</param>
            <param name="lastRow">The index of the last row of the merged cell region.</param>
            <param name="lastColumn">The index of the last row column of the merged cell region.</param>
            <returns>True if any part of specified region is a part of merged cell region; False otherwise.</returns>
        </member>
        <member name="M:Infragistics.Excel.WorksheetMergedCellsRegionCollection.Remove(Infragistics.Excel.WorksheetMergedCellsRegion)">
            <summary>
            Removes the specified merged cell region from the collection.
            </summary>
            <remarks>
            <p class="body">
            When a merged cell region is removed, the top-left cell in the region will retain the region's value.
            All other cells in the region will have a null value. In addition, all cells in the merged region will
            have the region's cell format when it is removed.
            </p>
            </remarks>
            <param name="region">The merged cell region to remove from the collection.</param>
            <returns>
            True if the merged cell region was successfully removed; False if the merged cell region was not 
            in the collection.
            </returns>
        </member>
        <member name="M:Infragistics.Excel.WorksheetMergedCellsRegionCollection.RemoveAt(System.Int32)">
            <summary>
            Removes the merged cell region at the specified index from the collection.
            </summary>
            <remarks>
            <p class="body">
            When a merged cell region is removed, the top-left cell in the region will retain the region's value.
            All other cells in the region will have a null value. In addition, all cells in the merged region will
            have the region's cell format when it is removed.
            </p>
            </remarks>
            <param name="index">The zero-based index of the merged cell region in the collection.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <paramref name="index"/> is less than zero or <paramref name="index"/> is greater than or 
            equal to <see cref="P:Infragistics.Excel.WorksheetMergedCellsRegionCollection.Count"/>.
            </exception>
        </member>
        <member name="P:Infragistics.Excel.WorksheetMergedCellsRegionCollection.Count">
            <summary>
            Gets the number of merged cell regions in the collection.
            </summary>
            <value>The number of merged cell regions in the collection.</value>
        </member>
        <member name="P:Infragistics.Excel.WorksheetMergedCellsRegionCollection.Item(System.Int32)">
            <summary>
            Gets the merged cell region at the specified index.
            </summary>
            <param name="index">The zero-based index of the merged cell region to get.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <paramref name="index"/> is less than zero or <paramref name="index"/> is greater than or 
            equal to <see cref="P:Infragistics.Excel.WorksheetMergedCellsRegionCollection.Count"/>.
            </exception>
            <value>The merged cell region at the specified index.</value>
        </member>
        <member name="T:Infragistics.Excel.WorksheetRow">
            <summary>
            Represents a row in a Microsoft Excel worksheet.
            </summary>
        </member>
        <member name="P:Infragistics.Excel.WorksheetRow.Cells">
            <summary>
            Gets the collection of cells in the row.
            </summary>
            <remarks>
            <p class="body">
            The collection of cells is a fixed length collection, with the maximum number of cells in the collection being 
            <see cref="C:Workbook.MaxExcelColumnCount"/>.  Internally, the cells are only created and added to the collection
            when they are requested.
            </p>
            <p class="note">
            <b>Note:</b> Iterating the collection will not create all cells. It will only iterate the cells which have already 
            been used.  To create and iterate all cells in the worksheet use a For loop, iterating from 0 to one less than 
            MaxExcelColumnCount, and pass in each index to the collection's indexer.
            </p>
            </remarks>
            <value>The collection of cells in the row.</value>
        </member>
        <member name="P:Infragistics.Excel.WorksheetRow.Height">
            <summary>
            Gets or sets the height of the row in twips (1/20th of a point).
            </summary>
            <remarks>
            <p class="body">
            If the height of the row is less than zero, the <see cref="P:Infragistics.Excel.Worksheet.DefaultRowHeight"/> of the
            owning worksheet will be used as the row's height.
            </p>
            <p class="body">
            The value assigned must be between 0 and 8192. Invalid values will be automatically adjusted to valid values.
            </p>
            </remarks>
            <value>The height of the row in twips (1/20th of a point).</value>
        </member>
        <member name="T:Infragistics.Excel.WorksheetRowCollection">
            <summary>
            A collection of rows in a worksheet.
            </summary>
            <remarks>
            <p class="body">
            Rows in this collection are lazily created (they are only created and added to the collection when they are accessed).
            If this collection is enumerated, it only enumerates the rows which were already accessed.
            </p>
            </remarks>
            <seealso cref="T:Infragistics.Excel.WorksheetRow"/>
            <seealso cref="P:Infragistics.Excel.Worksheet.Rows"/>
        </member>
        <member name="P:Infragistics.Excel.WorksheetRowCollection.Item(System.Int32)">
            <summary>
            Gets the row at the specified index.
            </summary>
            <remarks>
            <p class="note">
            <b>Note:</b> Iterating the collection will not create all rows. It will only iterate the rows which have already 
            been used.  To create and iterate all rows in the worksheet use a For loop, iterating from 0 to one less than 
            <see cref="C:Workbook.MaxExcelRowCount"/>, and pass in each index to the collection's indexer.
            </p>
            </remarks>
            <param name="index">The zero-based index of the row to get.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <paramref name="index"/> is less than zero.
            </exception>
            <exception cref="T:System.InvalidOperationException">
            <paramref name="index"/> is greater than or equal to <see cref="F:Infragistics.Excel.Workbook.MaxExcelRowCount"/>.
            </exception>
            <value>The row at the specified index.</value>
        </member>
        <member name="T:Infragistics.Excel.WorksheetCollection">
            <summary>
            A collection of worksheets in a workbook.
            </summary>
            <seealso cref="T:Infragistics.Excel.Worksheet"/>
            <seealso cref="T:Workbook.Worksheets"/>
        </member>
        <member name="M:Infragistics.Excel.WorksheetCollection.Add(System.String)">
            <summary>
            Creates a new <see cref="T:Infragistics.Excel.Worksheet"/> and adds it to the collection.
            </summary>
            <remarks>
            <p class="body">
            If the workbook originally had no worksheets, the newly added worksheet will become the selected worksheet of 
            the workbook.  This can be changed after more worksheets are added by setting the <see cref="P:Infragistics.Excel.WindowOptions.SelectedWorksheet"/> 
            of the Workbook.
            </p>
            </remarks>
            <param name="name">The name to give the new Worksheet.</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="name"/> is null or empty.
            </exception>
            <exception cref="T:System.ArgumentException">
            <paramref name="name"/> is being used as the name of another worksheet (worksheet names are case-insensitively compared).
            </exception>
            <returns>The Worksheet created with the specified name.</returns>
        </member>
        <member name="M:Infragistics.Excel.WorksheetCollection.Clear">
            <summary>
            Clears all worksheets from the collection.
            </summary>
            <remarks>
            <p class="body">
            If there are any <see cref="T:Infragistics.Excel.NamedReference"/> instances in the <see cref="T:Workbook.NamedReferences"/> collection
            with a worksheet for a scope, they will be removed from the <see cref="P:Infragistics.Excel.WorksheetCollection.Workbook"/>.
            </p>
            </remarks>
        </member>
        <member name="M:Infragistics.Excel.WorksheetCollection.Contains(Infragistics.Excel.Worksheet)">
            <summary>
            Determines whether a worksheet is in the collection.
            </summary>
            <param name="worksheet">The worksheet to locate in the collection.</param>
            <returns>True if the worksheet is found; False otherwise.</returns>
        </member>
        <member name="M:Infragistics.Excel.WorksheetCollection.IndexOf(Infragistics.Excel.Worksheet)">
            <summary>
            Gets the index of the specified worksheet in the collection.
            </summary>
            <param name="worksheet">The worksheet of which to get the index.</param>
            <returns>The index of the specified worksheet in the collection.</returns>
            <seealso cref="P:Infragistics.Excel.Worksheet.Index"/>
        </member>
        <member name="M:Infragistics.Excel.WorksheetCollection.Remove(Infragistics.Excel.Worksheet)">
            <summary>
            Removes the specified worksheet from the collection.
            </summary>
            <param name="worksheet">The worksheet to remove from the collection.</param>
            <remarks>
            <p class="body">
            If there are any <see cref="T:Infragistics.Excel.NamedReference"/> instances in the <see cref="T:Workbook.NamedReferences"/> collection
            with the worksheet to remove as their scope, they will be removed from the <see cref="P:Infragistics.Excel.WorksheetCollection.Workbook"/>.
            </p>
            </remarks>
            <returns>
            True if the worksheet was successfully removed from the collection; 
            False if the worksheet did not exist in the collection.
            </returns>
        </member>
        <member name="M:Infragistics.Excel.WorksheetCollection.RemoveAt(System.Int32)">
            <summary>
            Removes the worksheet at the specified index from the collection.
            </summary>
            <param name="index">The index of the worksheet to remove from the collection.</param>
            <remarks>
            <p class="body">
            If there are any <see cref="T:Infragistics.Excel.NamedReference"/> instances in the <see cref="T:Workbook.NamedReferences"/> collection
            with the worksheet to remove as their scope, they will be removed from the <see cref="P:Infragistics.Excel.WorksheetCollection.Workbook"/>.
            </p>
            </remarks>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <paramref name="index"/> is less than zero or <paramref name="index"/> is greater than or equal to <see cref="P:Infragistics.Excel.WorksheetCollection.Count"/>.
            </exception>
        </member>
        <member name="P:Infragistics.Excel.WorksheetCollection.Count">
            <summary>
            Gets the number of worksheets in the collection.
            </summary>
            <value>The number of worksheets in the collection.</value>
        </member>
        <member name="P:Infragistics.Excel.WorksheetCollection.Item(System.Int32)">
            <summary>
            Gets the worksheet at the specified index.
            </summary>
            <param name="index">The zero-based index of the worksheet to get.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <paramref name="index"/> is less than zero or <paramref name="index"/> is greater than or equal to <see cref="P:Infragistics.Excel.WorksheetCollection.Count"/>.
            </exception>
            <value>The worksheet at the specified index.</value>
        </member>
        <member name="P:Infragistics.Excel.WorksheetCollection.Item(System.String)">
            <summary>
            Gets the worksheet with the specified name.
            </summary>
            <remarks>
            <p class="body">
            Worksheet names are compared case-insensitively.
            </p>
            </remarks>
            <param name="name">The name of the worksheet to get.</param>
            <exception cref="T:System.InvalidOperationException">
            A worksheet with the specified name does not exist in the collection. 
            </exception>
            <value>The worksheet with the specified name.</value>
            <seealso cref="P:Infragistics.Excel.Worksheet.Name"/>
        </member>
        <member name="T:Infragistics.Excel.WorksheetShapeCollection">
            <summary>
            A collection of <see cref="T:Infragistics.Excel.WorksheetShape"/> instances in a <see cref="P:Infragistics.Excel.WorksheetShapeCollection.Worksheet"/> or <see cref="T:Infragistics.Excel.WorksheetShapeGroup"/>.
            </summary>
            <seealso cref="T:Worksheet.Shapes"/>
            <seealso cref="T:WorksheetShapeGroup.Shapes"/>
        </member>
        <member name="M:Infragistics.Excel.WorksheetShapeCollection.Add(Infragistics.Excel.WorksheetShape)">
            <summary>
            Adds a shape to the collection.
            </summary>
            <param name="shape">The shape to add to the collection.</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="shape"/> is null.
            </exception>
            <exception cref="T:System.InvalidOperationException">
            <paramref name="shape"/> has already been added to a worksheet or group.
            </exception>
            <exception cref="T:System.InvalidOperationException">
            <paramref name="shape"/> does not have the <see cref="P:Infragistics.Excel.WorksheetShape.TopLeftCornerCell"/> 
            or <see cref="P:Infragistics.Excel.WorksheetShape.BottomRightCornerCell"/> set.
            </exception>
            <exception cref="T:System.InvalidOperationException">
            Adding <paramref name="shape"/> to this collection will place it on a different worksheet then either its 
            TopLeftCornerCell or BottomRightCornerCell or <paramref name="shape"/> is a <see cref="T:Infragistics.Excel.WorksheetShapeGroup"/> 
            and adding it to this collection will create a similar situation for one of its descendant shapes.
            </exception>
            <exception cref="T:System.InvalidOperationException">
            <paramref name="shape"/> is a WorksheetShapeGroup and this is the group's collection of shapes.
            </exception>
        </member>
        <member name="M:Infragistics.Excel.WorksheetShapeCollection.Clear">
            <summary>
            Clears all shapes from the collection.
            </summary>
        </member>
        <member name="M:Infragistics.Excel.WorksheetShapeCollection.Contains(Infragistics.Excel.WorksheetShape)">
            <summary>
            Determines whether a shape is in the collection.
            </summary>
            <param name="shape">The shape to locate in the collection.</param>
            <returns>True if the shape is found; False otherwise.</returns>
        </member>
        <member name="M:Infragistics.Excel.WorksheetShapeCollection.Remove(Infragistics.Excel.WorksheetShape)">
            <summary>
            Removes the specified shape from the collection.
            </summary>
            <param name="shape">The shape to remove from the collection.</param>
            <returns>
            True if the shape was successfully removed from the collection; 
            False if the shape did not exist in the collection.
            </returns>
        </member>
        <member name="M:Infragistics.Excel.WorksheetShapeCollection.RemoveAt(System.Int32)">
            <summary>
            Removes the shape at the specified index from the collection.
            </summary>
            <param name="index">The index of the shape to remove from the collection.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <paramref name="index"/> is less than zero or <paramref name="index"/> is greater than or equal to <see cref="P:Infragistics.Excel.WorksheetShapeCollection.Count"/>.
            </exception>
        </member>
        <member name="P:Infragistics.Excel.WorksheetShapeCollection.Count">
            <summary>
            Gets the number of shapes in the collection.
            </summary>
            <value>The number of shapes in the collection.</value>
        </member>
        <member name="P:Infragistics.Excel.WorksheetShapeCollection.Item(System.Int32)">
            <summary>
            Gets the shape at the specified index in the collection.
            </summary>
            <param name="index">The zero-based index of the shape to get.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <paramref name="index"/> is less than zero or <paramref name="index"/> is greater than or equal to <see cref="P:Infragistics.Excel.WorksheetShapeCollection.Count"/>.
            </exception>
            <value>The shape at the specified index.</value>
        </member>
    </members>
</doc>
