<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Infragistics35.WebUI.WebScheduleDataProvider.v8.2</name>
    </assembly>
    <members>
        <member name="M:Infragistics.WebUI.Data.BindingMemberComparer.#ctor">
            <summary>
            Creates a default <b>IComparer</b> that will sort in ascending
            alphabetical order.
            </summary>
        </member>
        <member name="M:Infragistics.WebUI.Data.BindingMemberComparer.#ctor(System.Boolean)">
            <summary>
            Creates an <b>IComparer</b> that sorts in a specified order, ascending
            or descending.
            </summary>
            <param name="inDescendingOrder">Pass true to sort in descending order,
            otherwise the sorting will be performed in ascending order.</param>
        </member>
        <member name="M:Infragistics.WebUI.Data.BindingMemberComparer.Compare(System.Object,System.Object)">
            <summary>
            Compares two instances that are <b>Strings</b> or <b>PropertyInfo</b>.
            </summary>
            <param name="x">A property name to be compared.</param>
            <param name="y">Another property name to be compared.</param>
            <returns>1 if x is greater than y, -1 if y is greater than x, and 0
            if x and y are equal.</returns>
            <remarks>
            <p class="body">If either <i>x</i> or <i>y</i> is a <b>PropertyInfo</b>,
            then it is converted to a <b>String</b> based on the property's name.</p>
            </remarks>
        </member>
        <member name="M:Infragistics.WebUI.Data.BindingMemberMetadata.BindStatement(System.String,Infragistics.WebUI.Data.ScheduleDataBinding)">
            <summary>
            Binds a dynamic query statement template to binding member values specified in
            the supplied <b>ScheduleDataBinding</b> object.
            </summary>
            <param name="stmtTemplate">A dynamic query statement matching the specifications
            laid out in the <b>Remarks</b> section.</param>
            <param name="binding">The <b>ScheduleDataBinding</b> object used to evaluate
            the settings of the binding member properties, if such evaluation has not
            already occured.</param>
            <returns>The original <i>stmtTemplate</i> with placeholder values replaced by
            formal arguments drawn from the binding member properties.</returns>
            <remarks>
            <p class="body">The <b>BindStatement</b> method supports formulation of dynamic
            statements in general purpose data query and data manipulation languages (one
            example is SQL, however the statement's syntax is not formally required to be
            database centric and may be expanded to encompass other query languages in the
            future).</p>
            <p class="body">The <i>stmtTemplate</i> is boilerplate text containing placeholders
            in curly braces. The names of these placeholders should match the default binding
            member values for the <b>ScheduleDataBinding</b> subclass this <b>BindingMemberMetadata</b>
            instance serves. For example, a placeholder named 'Description' would appear in the
            <i>stmtTemplate</i> as '{Description}' in curly braces.</p>
            <p class="body">Placeholders whose names are recognized as belonging to the current
            <b>ScheduleDataBinding</b> will be replaced with their corresponding binding member
            values, based on any non-default settings in the supplied <i>binding</i>.  For
            example, if the binding member property <b>DescriptionMember</b> contained the
            custom value "Summary" then the processed text returned by <b>BindStatement</b>
            would contain "[Summary]" at every location where the placeholder "{Description}"
            had originally appeared.</p>
            <p class="body">It is possible to pass a statement template to the <b>BindStatement</b>
            methods of multiple <b>BindingMemberMetadata</b> instances on behalf of different
            <see cref="T:Infragistics.WebUI.Data.ScheduleDataBinding"/> subclasses. As long as no naming collisions occur
            between the binding member settings of these separate data bindings, it's possible
            to perform dynamic replacement on behalf of multiple entities within the same statement.
            </p>
            <p class="note">Changing the delimiters around the replaced arguments
            is unsupported. The use of square brackets conforms to recommended SQL
            practices.</p>
            </remarks>
        </member>
        <member name="T:Infragistics.WebUI.Data.DataBindingCollection">
            <summary>
            Container that holds multiple <see cref="T:Infragistics.WebUI.Data.ScheduleDataBinding"/>s during
            data bind processing.
            </summary>
            <remarks>
            <p class="body">This collection is intended to make adding <b>ScheduleDataBinding</b>
            instances easy at run-time when developers must implement or override data-bind
            operations for a custom WebSchedule data provider. The lifespan of the <b>DataBindingCollection</b>
            is limited to the length of time it takes to complete an operation, at which point it will be
            emptied by the data-binding framework.</p>
            <p class="body"><b>DataBindingCollection</b>s are not designed to persist in viewstate,
            due to the temporary need for them to exist. An application should not need to create
            it's own <b>DataBindingCollection</b>, but should instead work with those it inherits
            from <see cref="T:Infragistics.WebUI.Data.WebScheduleDataProviderBase"/>.</p>
            </remarks>
        </member>
        <member name="M:Infragistics.WebUI.Data.DataBindingCollection.CopyTo(System.Array,System.Int32)">
            <summary>
            Copies the <b>ScheduleDataBinding</b> instances within this collection to
            another array.
            </summary>
            <param name="array">The array into which <b>ScheduleDataBinding</b> instances
            are to be copied.</param>
            <param name="index">The starting index (zero-based) in <i>array</i> at which
            copying begins.</param>
            <remarks>
            <p class="body">Developers can use this method to copy the <b>DataBindingCollection</b>
            for their own purposes. One example would be to use <b>CopyTo</b> in order to maintain
            a copy in an array that could be used in the implementation or override of multiple
            data-binding operations when registering <b>ScheduleDataBinding</b>s at the beginning
            of the operation with <see cref="M:Infragistics.WebUI.Data.DataBindingCollection.AddRange(Infragistics.WebUI.Data.ScheduleDataBinding[])"/>.</p>
            </remarks>
            <exception cref="T:System.ArgumentNullException">Thrown when <i>array</i> is supplied
            to this method as null (Nothing in Visual Basic .NET)</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown when <i>index</i> is less
            than zero.</exception>
            <exception cref="T:System.ArgumentException">Thrown when <i>index</i> exceeds the space
            alloted in <i>array</i>, or when copying elements starting at <i>index</i> would exceed
            the space alloted in <i>array</i> were it to be allowed, or when <i>array</i> is a
            multi-dimensional array.</exception>
        </member>
        <member name="M:Infragistics.WebUI.Data.DataBindingCollection.GetEnumerator">
            <summary>
            Gets an enumerator capable of iterating through the <b>ScheduleDataBinding</b>s within
            this collection.
            </summary>
            <returns>An <b>IEnumerator</b> implementation that can be used to step through the members
            of this collection in a forward-only manner.</returns>
            <remarks>
            <p class="body">The .NET framework calls this method to iterate over items within the
            collection when the <b>for each</b> keyword is used in C# or Visual Basic .NET.</p>
            </remarks>
        </member>
        <member name="M:Infragistics.WebUI.Data.DataBindingCollection.Add(Infragistics.WebUI.Data.ScheduleDataBinding)">
            <summary>
            Adds a <b>ScheduleDataBinding</b> instance to the end of the <b>DataBindingCollection</b>.
            </summary>
            <param name="binding">A <b>ScheduleDataBinding</b> describing how to map columns from a
            data model or foreign object model onto the members of the WebSchedule object model.</param>
            <returns>The ordinal position at which <i>binding</i> has been inserted; lower numbers
            indicate higher priority.</returns>
            <remarks>
            <p class="body">The precedence in which <see cref="T:Infragistics.WebUI.Data.ScheduleDataBinding"/>s are processed
            in the <b>DataBindingCollection</b> matches the order in which they were added.  Developers
            should therefore add those <b>ScheduleDataBinding</b>s which they want to take precedence
            over later data binding objects to the <b>DataBindingCollection</b> first.</p>
            <p class="body">In order to supercede the precedence defined by the base data provider class,
            it is sometimes necessary to call <see cref="M:Infragistics.WebUI.Data.DataBindingCollection.Clear"/> on the <b>DataBindingCollection</b> and
            re-add the <b>ScheduleDataBinding</b>s (including those present by default for a particular
            operation) to the collection.</p>
            <p class="body">The <b>Add</b> method performs additional checking to ensure the uniqueness
            of each type of <b>ScheduleDataBinding</b> that has been registered.</p>
            </remarks>
            <exception cref="T:System.ArgumentNullException">Thrown when the supplied <i>binding</i> object
            is null (Nothing in Visual Basic .NET).</exception>
            <exception cref="T:System.InvalidOperationException">Thrown when the supplied <i>binding</i> has
            duplicated a type of <b>ScheduleDataBinding</b> that has already been previously added.</exception>
        </member>
        <member name="M:Infragistics.WebUI.Data.DataBindingCollection.AddRange(Infragistics.WebUI.Data.ScheduleDataBinding[])">
            <summary>
            Adds a pre-existing collection of <b>ScheduleDataBinding</b> instances to the
            end of the <b>DataBindingCollection</b>.
            </summary>
            <param name="bindings">An array of one or more <b>ScheduleDataBinding</b> instances
            that describe how to map columns from a data model or foreign object model onto the
            members of the WebSchedule object model.</param>
            <remarks>
            <p class="body">The precedence in which <see cref="T:Infragistics.WebUI.Data.ScheduleDataBinding"/>s are processed
            is determined by the order in which they were added to the <b>DataBindingCollection</b>.
            Developers must place those <b>ScheduleDataBinding</b>s of higher priority at the front
            of the collection specified by <i>bindings</i> in order to achieve the effect of some
            data binding objects taking precedence over those added later.</p>
            <p class="body">In order to supercede the precedence defined by the base data provider class,
            it is sometimes necessary to call <see cref="M:Infragistics.WebUI.Data.DataBindingCollection.Clear"/> on the <b>DataBindingCollection</b> and
            re-add the <b>ScheduleDataBinding</b>s (including those present by default for a particular
            operation) to the collection.</p>
            <p class="note">The <b>AddRange</b> method does not perform the same duplicate type checking
            as it's counterpart <see cref="M:Infragistics.WebUI.Data.DataBindingCollection.Add(Infragistics.WebUI.Data.ScheduleDataBinding)"/> method does. This is because the <b>AddRange</b> method
            is intended for use to perform batch updates to the <b>DataBindingCollection</b>. The developer
            must exercise greater caution when using <b>AddRange</b> that they do not register duplicate
            types of <b>ScheduleDataBinding</b>, or undefined behavior may result. Commonly, a call to
            <b>AddRange</b> only takes place immediately following a call to <see cref="M:Infragistics.WebUI.Data.DataBindingCollection.Clear"/>, in which
            these relaxed constraints can be guaranteed safe. Another use of <b>AddRange</b> that can be
            deterministically safe is when the developer is adding <i>only</i> types of <b>ScheduleDataBinding</b>
            that they have custom created for themselves.</p>
            </remarks>
            <exception cref="T:System.ArgumentNullException">Thrown when the supplied <i>bindings</i> collection
            is null (Nothing in Visual Basic .NET).</exception>
        </member>
        <member name="M:Infragistics.WebUI.Data.DataBindingCollection.Clear">
            <summary>
            Clears the <b>DataBindingCollection</b> of all previously held <b>ScheduleDataBinding</b> instances.
            </summary>
            <remarks>
            <p class="body">Removing individual <b>ScheduleDataBinding</b> objects is not supported. Instead,
            developers wishing to override the set of default <see cref="T:Infragistics.WebUI.Data.ScheduleDataBinding"/>s present in the
            <b>DataBindingCollection</b> as initialized by their data provider base class must explicitly call
            <b>Clear</b> and begin adding (registering) their own <b>ScheduleDataBinding</b> objects in their
            own order.</p>
            <p class="body"><b>Clear</b> may also be called between data binding operations to reset the
            <b>DataBindingCollection</b> to it's initially empty state, instead of having to recreate another
            collection object.</p>
            </remarks>
        </member>
        <member name="P:Infragistics.WebUI.Data.DataBindingCollection.Count">
            <summary>
            Gets the number of <see cref="T:Infragistics.WebUI.Data.ScheduleDataBinding"/> instances contained
            by this collection.
            </summary>
            <remarks>
            <p class="body">Developers subclassing <see cref="T:Infragistics.WebUI.Data.WebScheduleDataProviderBase"/>
            can use this to check how many instances have been added by their base class,
            if any.</p>
            </remarks>
        </member>
        <member name="P:Infragistics.WebUI.Data.DataBindingCollection.IsSynchronized">
            <summary>
            Indicates whether this collection serializes access by multiple threads.
            </summary>
            <remarks>
            <p class="body">Unless otherwise noted, operations on instance members of the
            <see cref="T:Infragistics.WebUI.Data.DataBindingCollection"/> are not thread-safe.</p>
            <seealso cref="P:Infragistics.WebUI.Data.DataBindingCollection.SyncRoot"/>
            </remarks>
        </member>
        <member name="P:Infragistics.WebUI.Data.DataBindingCollection.SyncRoot">
            <summary>
            Gets an object that the application can use to serialize access by multiple
            threads to this collection.
            </summary>
            <remarks>
            <p class="body">Unless otherwise noted, operations on instance members of the
            <see cref="T:Infragistics.WebUI.Data.DataBindingCollection"/> are not thread-safe.</p>
            <seealso cref="P:Infragistics.WebUI.Data.DataBindingCollection.IsSynchronized"/>
            </remarks>
        </member>
        <member name="M:Infragistics.WebUI.Data.DataBindingCollection.DataBindingIter.#ctor(System.Collections.ICollection)">
            <summary>
            Creates an instance of the <b>DataBindingIter</b> positioned on the
            first <b>ScheduleDataBinding</b> in the collection being enumerated.
            </summary>
            <param name="collectionOfDataBindings">A collection of <b>ScheduleDataBinding</b>
            instances that will be enumerated.</param>
        </member>
        <member name="M:Infragistics.WebUI.Data.DataBindingCollection.DataBindingIter.MoveNext">
            <summary>
            Moves to the next <see cref="T:Infragistics.WebUI.Data.ScheduleDataBinding"/> in the collection being
            enumerated.
            </summary>
            <returns>True if the move was successful, False is the collection being enumerated
            contains no more <see cref="T:Infragistics.WebUI.Data.ScheduleDataBinding"/> objects.</returns>
        </member>
        <member name="M:Infragistics.WebUI.Data.DataBindingCollection.DataBindingIter.Reset">
            <summary>
            Resets the <b>DataBindingIter</b> back to it's beginning.
            </summary>
            <remarks>
            <p class="body">After calling <b>Reset</b>, the developer must call
            <see cref="M:Infragistics.WebUI.Data.DataBindingCollection.DataBindingIter.MoveNext"/> before reading the <see cref="P:Infragistics.WebUI.Data.DataBindingCollection.DataBindingIter.Current"/> item.</p>
            </remarks>
        </member>
        <member name="P:Infragistics.WebUI.Data.DataBindingCollection.DataBindingIter.Current">
            <summary>
            Current <b>ScheduleDataBinding</b> instance.
            </summary>
            <remarks>
            <p class="body">It is safe to typecast the return value from <b>Current</b>
            into an instance of <see cref="T:Infragistics.WebUI.Data.ScheduleDataBinding"/>.</p>
            </remarks>
        </member>
        <member name="T:Infragistics.WebUI.Data.ScheduleDataBinding">
            <summary>
            Base class for WebSchedule data binding classes.
            </summary>
        </member>
        <member name="M:Infragistics.WebUI.Data.ScheduleDataBinding.#ctor">
            <summary>
            Constructor exposed for inheritance purposes only.
            </summary>
        </member>
        <member name="M:Infragistics.WebUI.Data.ScheduleDataBinding.OnPropertyChange(System.String,System.Object)">
            <summary>
            Called by the <b>WebObjectBase</b> infrastructure when a property value
            changes through the use of <b>SetValue</b>.
            </summary>
            <param name="propertyID">The identifier string associated with a property
            whose persistence and notifications are managed by the base class.</param>
            <param name="propertyValue">The new value associated with the property.</param>
            <remarks>
            <p class="body">The <b>ScheduleDataBinding</b> class uses this method to
            receive notifications when it's <b>BindingMember</b> properties change
            so it can notify the <b>WebScheduleDataProviderBase</b> containing it.
            This becomes necessary under certain data provider error handling
            scenarios in which the error handler modifies the <b>ScheduleDataBinding</b>.
            The <b>WebScheduleDataProviderBase</b> caches it's data binding descriptions
            in a collection that needs to be refreshed before the error handler can
            resume an interrupted data binding operation.</p>
            <p class="body">Inheritors will not normally need to call this method
            directly, as the <b>WebObjectBase</b> class infrastructure calls it
            automatically. However, inheritors must ensure that any properties they
            add to <b>ScheduleDataBinding</b> extensions use the <b>SetValue</b>
            base class method to manage binding member settings to take advantage
            of this notification. Otherwise their extended binding members may fail
            to recover as expected under the specific error handling dscribed in the
            preceding paragraph. Additionally, inheritors who override this method
            for any reason must ensure the base class implementation of this method
            gets called first by their override.</p>
            </remarks>
        </member>
        <member name="M:Infragistics.WebUI.Data.ScheduleDataBinding.ShouldSerializeDataKeyMember">
            <summary>
            Indicates whether the <see cref="P:Infragistics.WebUI.Data.ScheduleDataBinding.DataKeyMember"/> has changed from it's default value.
            </summary>
        </member>
        <member name="M:Infragistics.WebUI.Data.ScheduleDataBinding.ResetDataKeyMember">
            <summary>
            Resets the <see cref="P:Infragistics.WebUI.Data.ScheduleDataBinding.DataKeyMember"/> property to it's default value.
            </summary>
        </member>
        <member name="M:Infragistics.WebUI.Data.ScheduleDataBinding.ShouldSerializeTimestampMember">
            <summary>
            Indicates whether the <see cref="P:Infragistics.WebUI.Data.ScheduleDataBinding.TimestampMember"/> has changed from it's default value.
            </summary>
        </member>
        <member name="M:Infragistics.WebUI.Data.ScheduleDataBinding.CreateInstance">
            <summary>
            Creates an empty instance of the data object being bound.
            </summary>
            <returns>An uninitialized instance of the <b>Type</b>
            of data object to which these data bindings administer.
            </returns>
            <remarks>
            <p class="body">An inheritor must override this factory
            method to furnish a default instance of the data object
            type being bound.  For example, if you wanted to implement
            an <b>AppointmentBinding</b> subclass then your implementation
            of <b>CreateInstance</b> would be responsible for creating a
            new, default <b>Appointment</b> object.</p>
            <p class="body">The data binding infrastructure will invoke
            this method whenever it needs a new, default instance of the
            data object type being bound during <i>Fetch</i> operations.
            When data binding to a relational database, developers may
            think of this as being done once per row retrieved.  However,
            implementors are cautioned that they should not make any
            assumptions about the context in which this method is being
            called because it is subject to change (<i>i.e.</i>, as the
            result of a performance optimization, caching, or some other
            feature).</p>
            <p class="body">Following the call made to <b>CreateInstance</b>
            by the data binding infrastructure, zero or more public properties
            may be set through reflection based on the information received
            from the data source.</p>
            <seealso cref="P:Infragistics.WebUI.Data.ScheduleDataBinding.UnderlyingType"/>
            </remarks>
        </member>
        <member name="M:Infragistics.WebUI.Data.ScheduleDataBinding.SetDataKeyProperty(System.Object,System.Object[])">
            <summary>
            Sets the <b>DataKey</b> property or field on a bound data object.
            </summary>
            <param name="instance">An instance of a bound data object, typically
            created by an earlier call to <see cref="M:Infragistics.WebUI.Data.ScheduleDataBinding.CreateInstance"/>.</param>
            <param name="keyValue">A single-item array containing the value of the
            key property or field for the bound data object.</param>
            <remarks>
            <p class="body">Inheritors must override this method to provide a
            means for the data binding infrastructure to initialize the <i>data
            key</i> of a bound data object. Ordinarily, data binding of public
            properties takes place automatically by reflection against a bound
            data object's <b>Type</b> metadata. This is not done for the <i>data
            key</i> because it is special, a bound data object may choose to
            hide this property or field (make it non-public) because keys are
            often data source-specific, and sometimes of limited utility to
            human users. Furthermore, a general reflection approach is not
            always successful to bind against non-public members in application
            environments with limited trust.</p>
            <p class="body">At the subclass implementation level, you as the
            inheritor know what and how to store the <i>data key</i> for the
            bound data object. This can frequently be made as simple as a
            field or property assignment.</p>
            </remarks>
        </member>
        <member name="M:Infragistics.WebUI.Data.ScheduleDataBinding.ShouldSerialize">
            <summary>
            Indicates whether the <b>ScheduleBinding</b> should be serialized.
            </summary>
            <value>
            True if this compound property no longer has it's default value.
            </value>
            <remarks>
            <p class="body">Inheritors should override this method if their subclass
            of <b>ScheduleBinding</b> adds additional binding members besides the
            <b>DataKeyMember</b>. Their implementation of <b>ShouldSerialize</b>
            must call the base implementation to determine if an explicit value has
            been set on <b>DataKeyMember</b>, and perform a logical-OR on this result
            with tests of any additional binding member properties added by the subclass
            to see if they have changed from their default value(s).</p>
            <p class="body">Incorrect implementation of <b>ShouldSerialize</b> may lead
            to the <b>ScheduleBinding</b> subclass to be unnecessarily serialized to the
            ASP.NET document, even though every property has it's default value.</p>
            </remarks>
        </member>
        <member name="P:Infragistics.WebUI.Data.ScheduleDataBinding.DataKeyMember">
            <summary>
            Gets or sets the field used for initializing the
            data object's DataKey property.
            </summary>
        </member>
        <member name="P:Infragistics.WebUI.Data.ScheduleDataBinding.TimestampMember">
            <summary>
            Gets or sets the field used for storing the record's creation or last
            modified timestamp.
            </summary>
        </member>
        <member name="P:Infragistics.WebUI.Data.ScheduleDataBinding.WebScheduleInfo">
            <summary>
            Stores an instance of the <b>WebScheduleInfo</b> element associated
            with the parent <see cref="T:Infragistics.WebUI.Data.WebScheduleDataProviderBase"/>.
            </summary>
            <value>The <b>WebScheduleInfo</b> element reference retained by this
            <b>ScheduleDataBinding</b> subclass' parent data provider, or null
            (Nothing in Visual Basic .NET) if no <b>WebScheduleInfo</b> has been
            assigned to the parent data provider, yet.</value>
            <remarks>
            <p class="body">When inheritors implement the <see cref="M:Infragistics.WebUI.Data.ScheduleDataBinding.CreateInstance"/>
            factory method, they may need to set a <b>WebScheduleInfo</b> on certain
            objects. The most common reason for setting a <b>WebScheduleInfo</b> on
            an object is because one or more of it's properties derive their default
            value(s) from a property defined on the <b>WebScheduleInfo</b> object
            (example: the default time interval for a reminder before an activity
            falls due). Failing to initialize new objects with properties dependent
            on the presence of <b>WebScheduleInfo</b> may produce errors when data
            binding such as "Object reference not set to an instance of an object."
            </p>
            <p class="body">The <see cref="T:Infragistics.WebUI.Data.WebScheduleDataProviderBase"/> class
            initializes the <b>WebScheduleInfo</b> on or before the <b>Load</b>
            event in the ASP.NET page lifecycle.</p>
            </remarks>
        </member>
        <member name="P:Infragistics.WebUI.Data.ScheduleDataBinding.IsDataKeyNumeric">
            <summary>
            Indicates whether the <see cref="P:Infragistics.WebUI.Data.ScheduleDataBinding.DataKeyMember"/> property names
            a text-based or numeric key.
            </summary>
            <remarks>
            <p class="body">Inheritors should override this property to return
            true if their <b>ScheduleDataBinding</b> subclass uses a numeric
            <b>DataKey</b> (for example, an <b>identity</b> column in a relational
            database table). This permits certain optimizations to be made during
            data binding, and in enabling more efficient relationships.</p>
            </remarks>
        </member>
        <member name="P:Infragistics.WebUI.Data.ScheduleDataBinding.IsEmpty">
            <summary>
            Check if object contains only default design-time values.
            </summary>
        </member>
        <member name="P:Infragistics.WebUI.Data.ScheduleDataBinding.UnderlyingType">
            <summary>
            Gets the underlying <b>Type</b> in the WebSchedule object model on behalf of
            which this <b>ScheduleDataBindings</b> subclass is responsible for managing
            databinding.
            </summary>
            <remarks>
            <p class="body">The default implementation of this property calls <b>CreateInstance</b>
            and returns the <b>Type</b> of the resulting object, only to discard it when it
            is finished.</p>
            <p class="body">Inheritors are strongly encouraged to override this read-only
            property and supply the Common Language Runtime (CLR) <b>Type</b> describing
            the WebSchedule object model type their <b>ScheduleDataBindings</b> subclass
            should be held responsible for databinding against. Ordinarily, this is the
            same <b>Type</b> of object as returned by the subclass' implementation of <see cref="M:Infragistics.WebUI.Data.ScheduleDataBinding.CreateInstance"/>.</p>
            <p class="body">Implementing this property to return the correct underlying
            <b>Type</b> is simply a matter of using the <b>typeof</b> operator in
            C#, or the <b>GetType()</b> function in VB.NET, in most cases.</p>
            </remarks>
        </member>
        <member name="T:Infragistics.WebUI.Data.ActivityBinding">
            <summary>
            Data bindings for WebSchedule <b>Activities</b>.
            </summary>
        </member>
        <member name="F:Infragistics.WebUI.Data.ActivityBinding.OriginalStartDateTimeUtcId">
            <summary>
            Identifier constant used as a key in <b>WebDataObject</b>'s viewstate management
            for the <see cref="P:Infragistics.WebUI.Data.ActivityBinding.OriginalStartDateTimeUtcMember"/> property.
            </summary>
        </member>
        <member name="M:Infragistics.WebUI.Data.ActivityBinding.#ctor">
            <summary>
            Creates an instance of the <b>ActivityBinding</b> with
            default member values.
            </summary>
        </member>
        <member name="M:Infragistics.WebUI.Data.ActivityBinding.CreateInstance">
            <summary>
            <b>Overridden.</b> Creates an empty instance of the
            data object being bound.
            </summary>
            <returns>An uninitialized instance of <b>Activity</b>
            which these data bindings administer.
            </returns>
            <remarks>
            <seealso cref="M:Infragistics.WebUI.Data.ScheduleDataBinding.CreateInstance">CreateInstance</seealso>
            </remarks>
        </member>
        <member name="M:Infragistics.WebUI.Data.ActivityBinding.SetDataKeyProperty(System.Object,System.Object[])">
            <summary>
            Sets the <b>DataKey</b> property or field on a bound data object.
            </summary>
            <param name="instance">An instance of a bound data object, typically
            created by an earlier call to <b>CreateInstance</b>.</param>
            <param name="keyValue">A single-item array containing the value of the
            key property or field for the bound data object.</param>
            <remarks>
            <seealso cref="M:Infragistics.WebUI.Data.ScheduleDataBinding.SetDataKeyProperty(System.Object,System.Object[])">SetDataKeyProperty</seealso>
            </remarks>
        </member>
        <member name="M:Infragistics.WebUI.Data.ActivityBinding.ShouldSerializeDataKeyMember">
            <summary>
            Indicates whether the <see cref="P:Infragistics.WebUI.Data.ActivityBinding.DataKeyMember"/> has changed from it's default value.
            </summary>
        </member>
        <member name="M:Infragistics.WebUI.Data.ActivityBinding.ResetDataKeyMember">
            <summary>
            Resets the <see cref="P:Infragistics.WebUI.Data.ActivityBinding.DataKeyMember"/> property to it's default value.
            </summary>
        </member>
        <member name="M:Infragistics.WebUI.Data.ActivityBinding.ShouldSerializeStartDateTimeUtcMember">
            <summary>
            Indicates whether the <see cref="P:Infragistics.WebUI.Data.ActivityBinding.StartDateTimeUtcMember"/> should be serialized.
            </summary>
            <value>
            True if this property no longer has it's default value.
            </value>
            <remarks>
            <p class="body">This method is intended to support ASP.NET design-time
            serialization. Applications do not need to call this method.</p>
            </remarks>
        </member>
        <member name="M:Infragistics.WebUI.Data.ActivityBinding.ShouldSerializeDurationMember">
            <summary>
            Indicates whether the <see cref="P:Infragistics.WebUI.Data.ActivityBinding.DurationMember"/> should be serialized.
            </summary>
            <value>
            True if this property no longer has it's default value.
            </value>
            <remarks>
            <p class="body">This method is intended to support ASP.NET design-time
            serialization. Applications do not need to call this method.</p>
            </remarks>
        </member>
        <member name="M:Infragistics.WebUI.Data.ActivityBinding.ShouldSerializeAllDayEventMember">
            <summary>
            Indicates whether the <see cref="P:Infragistics.WebUI.Data.ActivityBinding.AllDayEventMember"/> should be serialized.
            </summary>
            <value>
            True if this property no longer has it's default value.
            </value>
            <remarks>
            <p class="body">This method is intended to support ASP.NET design-time
            serialization. Applications do not need to call this method.</p>
            </remarks>
        </member>
        <member name="M:Infragistics.WebUI.Data.ActivityBinding.ShouldSerializeEnableReminderMember">
            <summary>
            Indicates whether the <see cref="P:Infragistics.WebUI.Data.ActivityBinding.EnableReminderMember"/> should be serialized.
            </summary>
            <value>
            True if this property no longer has it's default value.
            </value>
            <remarks>
            <p class="body">This method is intended to support ASP.NET design-time
            serialization. Applications do not need to call this method.</p>
            </remarks>
        </member>
        <member name="M:Infragistics.WebUI.Data.ActivityBinding.ShouldSerializeReminderIntervalMember">
            <summary>
            Indicates whether the <see cref="P:Infragistics.WebUI.Data.ActivityBinding.ReminderIntervalMember"/> should be serialized.
            </summary>
            <value>
            True if this property no longer has it's default value.
            </value>
            <remarks>
            <p class="body">This method is intended to support ASP.NET design-time
            serialization. Applications do not need to call this method.</p>
            </remarks>
        </member>
        <member name="M:Infragistics.WebUI.Data.ActivityBinding.ShouldSerializeShowTimeAsMember">
            <summary>
            Indicates whether the <see cref="P:Infragistics.WebUI.Data.ActivityBinding.ShowTimeAsMember"/> should be serialized.
            </summary>
            <value>
            True if this property no longer has it's default value.
            </value>
            <remarks>
            <p class="body">This method is intended to support ASP.NET design-time
            serialization. Applications do not need to call this method.</p>
            </remarks>
        </member>
        <member name="M:Infragistics.WebUI.Data.ActivityBinding.ShouldSerializeImportanceMember">
            <summary>
            Indicates whether the <see cref="P:Infragistics.WebUI.Data.ActivityBinding.ImportanceMember"/> should be serialized.
            </summary>
            <value>
            True if this property no longer has it's default value.
            </value>
            <remarks>
            <p class="body">This method is intended to support ASP.NET design-time
            serialization. Applications do not need to call this method.</p>
            </remarks>
        </member>
        <member name="M:Infragistics.WebUI.Data.ActivityBinding.ShouldSerializeStatusMember">
            <summary>
            Indicates whether the <see cref="P:Infragistics.WebUI.Data.ActivityBinding.StatusMember"/> should be serialized.
            </summary>
            <value>
            True if this property no longer has it's default value.
            </value>
            <remarks>
            <p class="body">This method is intended to support ASP.NET design-time
            serialization. Applications do not need to call this method.</p>
            </remarks>
        </member>
        <member name="M:Infragistics.WebUI.Data.ActivityBinding.ShouldSerializeRecurrenceKeyMember">
            <summary>
            Indicates whether the <see cref="P:Infragistics.WebUI.Data.ActivityBinding.RecurrenceKeyMember"/> should be serialized.
            </summary>
            <value>
            True if this property no longer has it's default value.
            </value>
            <remarks>
            <p class="body">This method is intended to support ASP.NET design-time
            serialization. Applications do not need to call this method.</p>
            </remarks>
        </member>
        <member name="M:Infragistics.WebUI.Data.ActivityBinding.ShouldSerializeVarianceKeyMember">
            <summary>
            Indicates whether the <see cref="P:Infragistics.WebUI.Data.ActivityBinding.VarianceKeyMember"/> should be serialized.
            </summary>
            <value>
            True if this property no longer has it's default value.
            </value>
            <remarks>
            <p class="body">This method is intended to support ASP.NET design-time
            serialization. Applications do not need to call this method.</p>
            </remarks>
        </member>
        <member name="M:Infragistics.WebUI.Data.ActivityBinding.ShouldSerializeOriginalStartDateTimeUtcMember">
            <summary>
            Indicates whether the <see cref="P:Infragistics.WebUI.Data.ActivityBinding.OriginalStartDateTimeUtcMember"/> should be serialized.
            </summary>
            <value>
            True if this property no longer has it's default value.
            </value>
            <remarks>
            <p class="body">This method is intended to support ASP.NET design-time
            serialization. Applications do not need to call this method.</p>
            </remarks>
        </member>
        <member name="M:Infragistics.WebUI.Data.ActivityBinding.ShouldSerialize">
            <summary>
            Indicates whether the <b>ActivityBinding</b> should be serialized.
            </summary>
            <value>
            True if this compound property no longer has it's default value.
            </value>
            <remarks>
            <p class="body">Inheritors should override this method if their subclass
            of <b>ActivityBinding</b> adds additional binding members. Their implementation
            of <b>ShouldSerialize</b> must call the base implementation, and perform a
            logical-OR on the base class' return value with the should serialize methods
            of any additional binding member properties added (these should test each
            individual binding member property to see if it has changed from it's default
            value).</p>
            <p class="body">Incorrect implementation of <b>ShouldSerialize</b> may lead
            to the <b>ActivityBinding</b> unnecessarily being serialized to the ASP.NET
            document even though every property has it's default value.</p>
            </remarks>
        </member>
        <member name="P:Infragistics.WebUI.Data.ActivityBinding.DataKeyMember">
            <summary>
            Gets or sets the field used for initializing the
            data object's DataKey property.
            </summary>
        </member>
        <member name="P:Infragistics.WebUI.Data.ActivityBinding.StartDateTimeUtcMember">
            <summary>
            Gets/sets the field to use to initialize the appointment's start date in UTC time when bound.
            </summary>
        </member>
        <member name="P:Infragistics.WebUI.Data.ActivityBinding.DurationMember">
            <summary>
            Gets/sets the field to use to initialize the appointment's end date when bound.
            </summary>
        </member>
        <member name="P:Infragistics.WebUI.Data.ActivityBinding.AllDayEventMember">
            <summary>
            Gets/sets the field to use to initialize the appointment's AllDayEvent property when bound.
            </summary>
        </member>
        <member name="P:Infragistics.WebUI.Data.ActivityBinding.EnableReminderMember">
            <summary>
            Gets/sets the field to use to initialize the appointment's EnableReminder property when bound.
            </summary>
        </member>
        <member name="P:Infragistics.WebUI.Data.ActivityBinding.ReminderIntervalMember">
            <summary>
            Gets/sets the field to use to initialize the appointment's ReminderInterval property when bound.
            </summary>
        </member>
        <member name="P:Infragistics.WebUI.Data.ActivityBinding.ShowTimeAsMember">
            <summary>
            Gets/sets the field to use to initialize the appointment's ShowTimeAs property when bound.
            </summary>
        </member>
        <member name="P:Infragistics.WebUI.Data.ActivityBinding.ImportanceMember">
            <summary>
            Gets/sets the field to use to initialize the appointment's Importance property when bound.
            </summary>
        </member>
        <member name="P:Infragistics.WebUI.Data.ActivityBinding.StatusMember">
            <summary>
            Gets/sets the field to use when initializing this activity's reminder notification status.
            </summary>
        </member>
        <member name="P:Infragistics.WebUI.Data.ActivityBinding.RecurrenceKeyMember">
            <summary>
            Gets/sets the field to use to initialize the activity's recurrence data key when bound.
            </summary>
        </member>
        <member name="P:Infragistics.WebUI.Data.ActivityBinding.VarianceKeyMember">
            <summary>
            Gets/sets the field to use to initialize the activity's variance key when bound.
            </summary>
        </member>
        <member name="P:Infragistics.WebUI.Data.ActivityBinding.OriginalStartDateTimeUtcMember">
            <summary>
            Gets/sets the field to use to initialize the variance's original start date/time when bound.
            </summary>
        </member>
        <member name="P:Infragistics.WebUI.Data.ActivityBinding.UnderlyingType">
            <summary>
            Gets the underlying <b>Type</b> in the WebSchedule object model on behalf of
            which this <b>ActivityBinding</b> subclass is responsible for managing databinding.
            </summary>
            <remarks>
            <p class="body">This property returns the <b>Type</b> of an <b>Activity</b>. It
            does not call the base implementation.</p>
            <p class="body">Inheritors must override this read-only property and supply the
            Common Language Runtime (CLR) <b>Type</b> describing the WebSchedule object model
            type their <b>ActivityBinding</b> subclass. The <b>Type</b> returned by an overridden
            implementation should be a subclass of <b>Activity</b>.</p>
            </remarks>
        </member>
        <member name="T:Infragistics.WebUI.Data.AppointmentBinding">
            <summary>
            Data bindings for WebSchedule <b>Appointments</b>.
            </summary>
        </member>
        <member name="F:Infragistics.WebUI.Data.AppointmentBinding.SubjectId">
            <summary>
            Identifier constant used as a key in <b>WebDataObject</b>'s viewstate management
            for the <see cref="P:Infragistics.WebUI.Data.AppointmentBinding.SubjectMember"/> property.
            </summary>
        </member>
        <member name="F:Infragistics.WebUI.Data.AppointmentBinding.DescriptionId">
            <summary>
            Identifier constant used as a key in <b>WebDataObject</b>'s viewstate management
            for the <see cref="P:Infragistics.WebUI.Data.AppointmentBinding.DescriptionMember"/> property.
            </summary>
        </member>
        <member name="F:Infragistics.WebUI.Data.AppointmentBinding.LocationId">
            <summary>
            Identifier constant used as a key in <b>WebDataObject</b>'s viewstate management
            for the <see cref="P:Infragistics.WebUI.Data.AppointmentBinding.LocationMember"/> property.
            </summary>
        </member>
        <member name="M:Infragistics.WebUI.Data.AppointmentBinding.#ctor">
            <summary>
            Creates a default instance of the <strong>AppointmentBinding</strong>.
            </summary>
            <remarks>
            <p class="body">This constructor is exposed for use by inheritors
            defining their own custom <strong>ScheduleDataBinding</strong>
            subclasses to correspond with custom <strong>Appointment</strong>
            subclasses.</p>
            </remarks>
        </member>
        <member name="M:Infragistics.WebUI.Data.AppointmentBinding.CreateInstance">
            <summary>
            <b>Overridden.</b> Creates an empty instance of the
            data object being bound.
            </summary>
            <returns>An uninitialized instance of <b>Appointment</b>
            which these data bindings administer.
            </returns>
            <remarks>
            <seealso cref="M:Infragistics.WebUI.Data.ScheduleDataBinding.CreateInstance">CreateInstance</seealso>
            </remarks>
        </member>
        <member name="M:Infragistics.WebUI.Data.AppointmentBinding.SetDataKeyProperty(System.Object,System.Object[])">
            <summary>
            Sets the <b>DataKey</b> property or field on a bound data object.
            </summary>
            <param name="instance">An instance of a bound data object, typically
            created by an earlier call to <b>CreateInstance</b>.</param>
            <param name="keyValue">A single-item array containing the value of the
            key property or field for the bound data object.</param>
            <remarks>
            <seealso cref="M:Infragistics.WebUI.Data.ScheduleDataBinding.SetDataKeyProperty(System.Object,System.Object[])">SetDataKeyProperty</seealso>
            </remarks>
        </member>
        <member name="M:Infragistics.WebUI.Data.AppointmentBinding.ShouldSerializeSubjectMember">
            <summary>
            Indicates whether the <see cref="P:Infragistics.WebUI.Data.AppointmentBinding.SubjectMember"/> should be serialized.
            </summary>
            <value>
            True if this property no longer has it's default value.
            </value>
            <remarks>
            <p class="body">This method is intended to support ASP.NET design-time
            serialization. Applications do not need to call this method.</p>
            </remarks>
        </member>
        <member name="M:Infragistics.WebUI.Data.AppointmentBinding.ShouldSerializeDescriptionMember">
            <summary>
            Indicates whether the <see cref="P:Infragistics.WebUI.Data.AppointmentBinding.DescriptionMember"/> should be serialized.
            </summary>
            <value>
            True if this property no longer has it's default value.
            </value>
            <remarks>
            <p class="body">This method is intended to support ASP.NET design-time
            serialization. Applications do not need to call this method.</p>
            </remarks>
        </member>
        <member name="M:Infragistics.WebUI.Data.AppointmentBinding.ShouldSerializeLocationMember">
            <summary>
            Indicates whether the <see cref="P:Infragistics.WebUI.Data.AppointmentBinding.LocationMember"/> should be serialized.
            </summary>
            <value>
            True if this property no longer has it's default value.
            </value>
            <remarks>
            <p class="body">This method is intended to support ASP.NET design-time
            serialization. Applications do not need to call this method.</p>
            </remarks>
        </member>
        <member name="M:Infragistics.WebUI.Data.AppointmentBinding.ShouldSerialize">
            <summary>
            Indicates whether the <b>AppointmentBinding</b> should be serialized.
            </summary>
            <value>
            True if this compound property no longer has it's default value.
            </value>
            <remarks>
            <p class="body">Inheritors should override this method if their subclass
            of <b>AppointmentBinding</b> adds additional binding members. Their implementation
            of <b>ShouldSerialize</b> must call the base implementation, and perform a
            logical-OR on the base class' return value with the should serialize methods
            of any additional binding member properties added (these should test each
            individual binding member property to see if it has changed from it's default
            value).</p>
            <p class="body">Incorrect implementation of <b>ShouldSerialize</b> may lead
            to the <b>AppointmentBinding</b> unnecessarily being serialized to the ASP.NET
            document even though every property has it's default value.</p>
            </remarks>
        </member>
        <member name="P:Infragistics.WebUI.Data.AppointmentBinding.SubjectMember">
            <summary>
            Gets/sets the field to use to initialize the appointment�s subject property when bound.
            </summary>
        </member>
        <member name="P:Infragistics.WebUI.Data.AppointmentBinding.DescriptionMember">
            <summary>
            Gets/sets the field to use to initialize the appointment�s description property when bound.
            </summary>
        </member>
        <member name="P:Infragistics.WebUI.Data.AppointmentBinding.LocationMember">
            <summary>
            Gets/sets the field to use to initialize the appointment�s location property when bound.
            </summary>
        </member>
        <member name="P:Infragistics.WebUI.Data.AppointmentBinding.UnderlyingType">
            <summary>
            Gets the underlying <b>Type</b> in the WebSchedule object model on behalf of
            which this <b>AppointmentBinding</b> subclass is responsible for managing databinding.
            </summary>
            <remarks>
            <p class="body">This property returns the <b>Type</b> of an <b>Appointment</b>. It
            does not call the base implementation.</p>
            <p class="body">Inheritors must override this read-only property and supply the
            Common Language Runtime (CLR) <b>Type</b> describing the WebSchedule object model
            type their <b>AppointmentBinding</b> subclass. The <b>Type</b> returned by an overridden
            implementation should be a subclass of <b>Appointment</b>.</p>
            </remarks>
        </member>
        <member name="T:Infragistics.WebUI.Data.ResourceBinding">
            <summary>
            Data bindings for WebSchedule <b>Resources</b>.
            </summary>
        </member>
        <member name="M:Infragistics.WebUI.Data.ResourceBinding.#ctor">
            <summary>
            Creates a default instance of the <strong>ResourceBinding</strong>.
            </summary>
            <remarks>
            <p class="body">This constructor is exposed for use by inheritors
            defining their own custom <strong>ScheduleDataBinding</strong>
            subclasses to correspond with custom <strong>Resource</strong>
            subclasses.</p>
            </remarks>
        </member>
        <member name="M:Infragistics.WebUI.Data.ResourceBinding.CreateInstance">
            <summary>
            <b>Overridden.</b> Creates an empty instance of the
            data object being bound.
            </summary>
            <returns>An uninitialized instance of <b>Resource</b>
            which these data bindings administer.
            </returns>
            <remarks>
            <seealso cref="M:Infragistics.WebUI.Data.ScheduleDataBinding.CreateInstance">CreateInstance</seealso>
            </remarks>
        </member>
        <member name="M:Infragistics.WebUI.Data.ResourceBinding.SetDataKeyProperty(System.Object,System.Object[])">
            <summary>
            Sets the <b>DataKey</b> property or field on a bound data object.
            </summary>
            <param name="instance">An instance of a bound data object, typically
            created by an earlier call to <b>CreateInstance</b>.</param>
            <param name="keyValue">A single-item array containing the value of the
            key property or field for the bound data object.</param>
            <remarks>
            <seealso cref="M:Infragistics.WebUI.Data.ScheduleDataBinding.SetDataKeyProperty(System.Object,System.Object[])">SetDataKeyProperty</seealso>
            </remarks>
        </member>
        <member name="M:Infragistics.WebUI.Data.ResourceBinding.ShouldSerializeDataKeyMember">
            <summary>
            Indicates whether the <see cref="P:Infragistics.WebUI.Data.ResourceBinding.DataKeyMember"/> has changed from it's default value.
            </summary>
        </member>
        <member name="M:Infragistics.WebUI.Data.ResourceBinding.ResetDataKeyMember">
            <summary>
            Resets the <see cref="P:Infragistics.WebUI.Data.ResourceBinding.DataKeyMember"/> property to it's default value.
            </summary>
        </member>
        <member name="M:Infragistics.WebUI.Data.ResourceBinding.ShouldSerializeNameMember">
            <summary>
            Indicates whether the <see cref="P:Infragistics.WebUI.Data.ResourceBinding.NameMember"/> should be serialized.
            </summary>
            <value>
            True if this property no longer has it's default value.
            </value>
            <remarks>
            <p class="body">This method is intended to support ASP.NET design-time
            serialization. Applications do not need to call this method.</p>
            </remarks>
        </member>
        <member name="M:Infragistics.WebUI.Data.ResourceBinding.ShouldSerializeEmailAddressMember">
            <summary>
            Indicates whether the <see cref="P:Infragistics.WebUI.Data.ResourceBinding.EmailAddressMember"/> should be serialized.
            </summary>
            <value>
            True if this property no longer has it's default value.
            </value>
            <remarks>
            <p class="body">This method is intended to support ASP.NET design-time
            serialization. Applications do not need to call this method.</p>
            </remarks>
        </member>
        <member name="M:Infragistics.WebUI.Data.ResourceBinding.ShouldSerializeDescriptionMember">
            <summary>
            Indicates whether the <see cref="P:Infragistics.WebUI.Data.ResourceBinding.DescriptionMember"/> should be serialized.
            </summary>
            <value>
            True if this property no longer has it's default value.
            </value>
            <remarks>
            <p class="body">This method is intended to support ASP.NET design-time
            serialization. Applications do not need to call this method.</p>
            </remarks>
        </member>
        <member name="M:Infragistics.WebUI.Data.ResourceBinding.ShouldSerializeEnableEmailRemindersMember">
            <summary>
            Indicates whether the <see cref="P:Infragistics.WebUI.Data.ResourceBinding.EnableEmailRemindersMember"/> should be serialized.
            </summary>
            <value>
            True if this property no longer has it's default value.
            </value>
            <remarks>
            <p class="body">This method is intended to support ASP.NET design-time
            serialization. Applications do not need to call this method.</p>
            </remarks>
        </member>
        <member name="M:Infragistics.WebUI.Data.ResourceBinding.ShouldSerialize">
            <summary>
            Indicates whether the <b>ResourceBinding</b> should be serialized.
            </summary>
            <value>
            True if this compound property no longer has it's default value.
            </value>
            <remarks>
            <p class="body">Inheritors should override this method if their subclass
            of <b>ResourceBinding</b> adds additional binding members. Their implementation
            of <b>ShouldSerialize</b> must call the base implementation, and perform a
            logical-OR on the base class' return value with the should serialize methods
            of any additional binding member properties added (these should test each
            individual binding member property to see if it has changed from it's default
            value).</p>
            <p class="body">Incorrect implementation of <b>ShouldSerialize</b> may lead
            to the <b>ResourceBinding</b> unnecessarily being serialized to the ASP.NET
            document even though every property has it's default value.</p>
            </remarks>
        </member>
        <member name="P:Infragistics.WebUI.Data.ResourceBinding.DataKeyMember">
            <summary>
            Gets or sets the field used for initializing the
            data object's DataKey property.
            </summary>
        </member>
        <member name="P:Infragistics.WebUI.Data.ResourceBinding.NameMember">
            <summary>
            Gets/sets the field to use to initialize the resource's Name property when bound.
            </summary>
        </member>
        <member name="P:Infragistics.WebUI.Data.ResourceBinding.EmailAddressMember">
            <summary>
            Gets/sets the field to use to initialize the resource's Email Address property when bound.
            </summary>
        </member>
        <member name="P:Infragistics.WebUI.Data.ResourceBinding.DescriptionMember">
            <summary>
            Gets/sets the field to use to initialize the resource's Description property when bound.
            </summary>
        </member>
        <member name="P:Infragistics.WebUI.Data.ResourceBinding.EnableEmailRemindersMember">
            <summary>
            Gets/sets the field to use to initialize the resource's preferences' EnableEmailReminders property when bound.
            </summary>
        </member>
        <member name="P:Infragistics.WebUI.Data.ResourceBinding.UnderlyingType">
            <summary>
            Gets the underlying <b>Type</b> in the WebSchedule object model on behalf of
            which this <b>ResourceBinding</b> subclass is responsible for managing databinding.
            </summary>
            <remarks>
            <p class="body">This property returns the <b>Type</b> of an <b>Resource</b>. It
            does not call the base implementation.</p>
            <p class="body">Inheritors must override this read-only property and supply the
            Common Language Runtime (CLR) <b>Type</b> describing the WebSchedule object model
            type their <b>ResourceBinding</b> subclass. The <b>Type</b> returned by an overridden
            implementation should be a subclass of <b>Resource</b>.</p>
            </remarks>
        </member>
        <member name="T:Infragistics.WebUI.Data.RecurrenceBinding">
            <summary>
            Data bindings for WebSchedule <b>Recurrences</b>.
            </summary>
        </member>
        <member name="M:Infragistics.WebUI.Data.RecurrenceBinding.#ctor">
            <summary>
            Creates an instance of the <b>RecurrenceBinding</b> with
            default member values.
            </summary>
        </member>
        <member name="M:Infragistics.WebUI.Data.RecurrenceBinding.CreateInstance">
            <summary>
            <b>Overridden.</b> Creates an empty instance of the
            data object being bound.
            </summary>
            <returns>An uninitialized instance of <b>Recurrence</b>
            which these data bindings administer.
            </returns>
            <remarks>
            <seealso cref="M:Infragistics.WebUI.Data.ScheduleDataBinding.CreateInstance">CreateInstance</seealso>
            </remarks>
        </member>
        <member name="M:Infragistics.WebUI.Data.RecurrenceBinding.SetDataKeyProperty(System.Object,System.Object[])">
            <summary>
            Sets the <b>DataKey</b> property or field on a bound data object.
            </summary>
            <param name="instance">An instance of a bound data object, typically
            created by an earlier call to <b>CreateInstance</b>.</param>
            <param name="keyValue">A single-item array containing the value of the
            key property or field for the bound data object.</param>
            <remarks>
            <seealso cref="M:Infragistics.WebUI.Data.ScheduleDataBinding.SetDataKeyProperty(System.Object,System.Object[])">SetDataKeyProperty</seealso>
            </remarks>
        </member>
        <member name="M:Infragistics.WebUI.Data.RecurrenceBinding.ShouldSerialize">
            <summary>
            Indicates whether the <b>RecurrenceBinding</b> should be serialized.
            </summary>
            <value>
            True if this compound property no longer has it's default value.
            </value>
            <remarks>
            <p class="body">Inheritors should override this method if their subclass
            of <b>RecurrenceBinding</b> adds additional binding members. Their implementation
            of <b>ShouldSerialize</b> must call the base implementation, and perform a
            logical-OR on the base class' return value with the should serialize methods
            of any additional binding member properties added (these should test each
            individual binding member property to see if it has changed from it's default
            value).</p>
            <p class="body">Incorrect implementation of <b>ShouldSerialize</b> may lead
            to the <b>RecurrenceBinding</b> unnecessarily being serialized to the ASP.NET
            document even though every property has it's default value.</p>
            </remarks>
        </member>
        <member name="M:Infragistics.WebUI.Data.RecurrenceBinding.ShouldSerializeDataKeyMember">
            <summary>
            Indicates whether the <see cref="P:Infragistics.WebUI.Data.RecurrenceBinding.DataKeyMember"/> has changed from it's default value.
            </summary>
        </member>
        <member name="M:Infragistics.WebUI.Data.RecurrenceBinding.ResetDataKeyMember">
            <summary>
            Resets the <see cref="P:Infragistics.WebUI.Data.RecurrenceBinding.DataKeyMember"/> property to it's default value.
            </summary>
        </member>
        <member name="M:Infragistics.WebUI.Data.RecurrenceBinding.ShouldSerializeDayOfMonthMember">
            <summary>
            Indicates whether the <see cref="P:Infragistics.WebUI.Data.RecurrenceBinding.DayOfMonthMember"/> should be serialized.
            </summary>
            <value>
            True if this property no longer has it's default value.
            </value>
            <remarks>
            <p class="body">This method is intended to support ASP.NET design-time
            serialization. Applications do not need to call this method.</p>
            </remarks>
        </member>
        <member name="M:Infragistics.WebUI.Data.RecurrenceBinding.ShouldSerializeDayOfWeekMaskUtcMember">
            <summary>
            Indicates whether the <see cref="P:Infragistics.WebUI.Data.RecurrenceBinding.DayOfWeekMaskUtcMember"/> should be serialized.
            </summary>
            <value>
            True if this property no longer has it's default value.
            </value>
            <remarks>
            <p class="body">This method is intended to support ASP.NET design-time
            serialization. Applications do not need to call this method.</p>
            </remarks>
        </member>
        <member name="M:Infragistics.WebUI.Data.RecurrenceBinding.ShouldSerializeUtcOffsetMember">
            <summary>
            Indicates whether the <see cref="P:Infragistics.WebUI.Data.RecurrenceBinding.UtcOffsetMember"/> should be serialized.
            </summary>
            <value>
            True if this property no longer has it's default value.
            </value>
            <remarks>
            <p class="body">This method is intended to support ASP.NET design-time
            serialization. Applications do not need to call this method.</p>
            </remarks>
        </member>
        <member name="M:Infragistics.WebUI.Data.RecurrenceBinding.ShouldSerializePeriodMember">
            <summary>
            Indicates whether the <see cref="P:Infragistics.WebUI.Data.RecurrenceBinding.PeriodMember"/> should be serialized.
            </summary>
            <value>
            True if this property no longer has it's default value.
            </value>
            <remarks>
            <p class="body">This method is intended to support ASP.NET design-time
            serialization. Applications do not need to call this method.</p>
            </remarks>
        </member>
        <member name="M:Infragistics.WebUI.Data.RecurrenceBinding.ShouldSerializePeriodMultipleMember">
            <summary>
            Indicates whether the <see cref="P:Infragistics.WebUI.Data.RecurrenceBinding.PeriodMultipleMember"/> should be serialized.
            </summary>
            <value>
            True if this property no longer has it's default value.
            </value>
            <remarks>
            <p class="body">This method is intended to support ASP.NET design-time
            serialization. Applications do not need to call this method.</p>
            </remarks>
        </member>
        <member name="M:Infragistics.WebUI.Data.RecurrenceBinding.ShouldSerializeMonthOfYearMember">
            <summary>
            Indicates whether the <see cref="P:Infragistics.WebUI.Data.RecurrenceBinding.MonthOfYearMember"/> should be serialized.
            </summary>
            <value>
            True if this property no longer has it's default value.
            </value>
            <remarks>
            <p class="body">This method is intended to support ASP.NET design-time
            serialization. Applications do not need to call this method.</p>
            </remarks>
        </member>
        <member name="M:Infragistics.WebUI.Data.RecurrenceBinding.ShouldSerializeRecurrenceDayOfMonthMember">
            <summary>
            Indicates whether the <see cref="P:Infragistics.WebUI.Data.RecurrenceBinding.RecurrenceDayOfMonthMember"/> should be serialized.
            </summary>
            <value>
            True if this property no longer has it's default value.
            </value>
            <remarks>
            <p class="body">This method is intended to support ASP.NET design-time
            serialization. Applications do not need to call this method.</p>
            </remarks>
        </member>
        <member name="M:Infragistics.WebUI.Data.RecurrenceBinding.ShouldSerializeEndDateUtcMember">
            <summary>
            Indicates whether the <see cref="!:EndDateUtcUtcMember"/> should be serialized.
            </summary>
            <value>
            True if this property no longer has it's default value.
            </value>
            <remarks>
            <p class="body">This method is intended to support ASP.NET design-time
            serialization. Applications do not need to call this method.</p>
            </remarks>
        </member>
        <member name="M:Infragistics.WebUI.Data.RecurrenceBinding.ShouldSerializeLastReminderDateTimeUtcMember">
            <summary>
            Indicates whether the <see cref="P:Infragistics.WebUI.Data.RecurrenceBinding.LastReminderDateTimeUtcMember"/> should be serialized.
            </summary>
            <value>
            True if this property no longer has it's default value.
            </value>
            <remarks>
            <p class="body">This method is intended to support ASP.NET design-time
            serialization. Applications do not need to call this method.</p>
            </remarks>
        </member>
        <member name="M:Infragistics.WebUI.Data.RecurrenceBinding.ShouldSerializeEditTypeMember">
            <summary>
            Indicates whether the <see cref="P:Infragistics.WebUI.Data.RecurrenceBinding.EditTypeMember"/> should be serialized.
            </summary>
            <value>
            True if this property no longer has it's default value.
            </value>
            <remarks>
            <p class="body">This method is intended to support ASP.NET design-time
            serialization. Applications do not need to call this method.</p>
            </remarks>
        </member>
        <member name="P:Infragistics.WebUI.Data.RecurrenceBinding.UnderlyingType">
            <summary>
            Gets the underlying <b>Type</b> in the WebSchedule object model on behalf of
            which this <b>RecurrenceBinding</b> subclass is responsible for managing databinding.
            </summary>
            <remarks>
            <p class="body">This property returns the <b>Type</b> of an <b>AppointmentRecurrence</b>.
            It does not call the base implementation.</p>
            <p class="body">Inheritors must override this read-only property and supply the
            Common Language Runtime (CLR) <b>Type</b> describing the WebSchedule object model
            type their <b>RecurrenceBinding</b> subclass. The <b>Type</b> returned by an
            overridden implementation should be a subclass of <b>AppointmentRecurrence</b>.</p>
            </remarks>
        </member>
        <member name="P:Infragistics.WebUI.Data.RecurrenceBinding.DataKeyMember">
            <summary>
            Gets or sets the field used for initializing the
            data object's DataKey property.
            </summary>
        </member>
        <member name="P:Infragistics.WebUI.Data.RecurrenceBinding.DayOfMonthMember">
            <summary>
            Gets/sets the field to use to initialize the recurrence pattern's day of month when bound.
            </summary>
        </member>
        <member name="P:Infragistics.WebUI.Data.RecurrenceBinding.DayOfWeekMaskUtcMember">
            <summary>
            Gets/sets the field to use to initialize the recurrence pattern's days of the week when bound.
            </summary>
        </member>
        <member name="P:Infragistics.WebUI.Data.RecurrenceBinding.UtcOffsetMember">
            <summary>
            Gets/sets the field used to indicate the time zone UTC offset of the last person
            to update this Recurrence.
            </summary>
        </member>
        <member name="P:Infragistics.WebUI.Data.RecurrenceBinding.PeriodMember">
            <summary>
            Gets/sets the field to use to initialize the recurrence pattern's frequency when bound.
            </summary>
        </member>
        <member name="P:Infragistics.WebUI.Data.RecurrenceBinding.PeriodMultipleMember">
            <summary>
            Gets/sets the field to use to initialize the recurrence pattern's interval between occurrences when bound.
            </summary>
        </member>
        <member name="P:Infragistics.WebUI.Data.RecurrenceBinding.MonthOfYearMember">
            <summary>
            Gets/sets the field to use to initialize the recurrence pattern's month of the year when bound.
            </summary>
        </member>
        <member name="P:Infragistics.WebUI.Data.RecurrenceBinding.RecurrenceDayOfMonthMember">
            <summary>
            Gets/sets the field to use to initialize the recurrence pattern's occurrence of a day in a calendar month when bound.
            </summary>
        </member>
        <member name="P:Infragistics.WebUI.Data.RecurrenceBinding.EndDateUtcMember">
            <summary>
            Gets/sets the field to use to initialize the recurrence range's end date when bound.
            </summary>
        </member>
        <member name="P:Infragistics.WebUI.Data.RecurrenceBinding.LastReminderDateTimeUtcMember">
            <summary>
            Gets/sets the field used when setting the last reminder date/time for activities
            in a recurring series.
            </summary>
        </member>
        <member name="P:Infragistics.WebUI.Data.RecurrenceBinding.EditTypeMember">
            <summary>
            Gets/sets the field to use to initialize the recurrence range's maximum number of occurrences when bound.
            </summary>
        </member>
        <member name="T:Infragistics.WebUI.Data.VarianceBinding">
            <summary>
            Data bindings for WebSchedule <b>Variances</b>.
            </summary>
        </member>
        <member name="M:Infragistics.WebUI.Data.VarianceBinding.#ctor">
            <summary>
            Creates an instance of the <b>VarianceBinding</b> with
            default member values.
            </summary>
        </member>
        <member name="M:Infragistics.WebUI.Data.VarianceBinding.CreateInstance">
            <summary>
            <b>Overridden.</b> Creates an empty instance of the
            data object being bound.
            </summary>
            <returns>An uninitialized instance of <b>AppointmentVariance</b>
            which these data bindings administer.
            </returns>
            <remarks>
            <seealso cref="M:Infragistics.WebUI.Data.ScheduleDataBinding.CreateInstance">CreateInstance</seealso>
            </remarks>
            <exception cref="T:System.ArgumentNullException">Thrown when the <see cref="P:Infragistics.WebUI.Data.VarianceBinding.CreationContext"/>
            has not been assigned a non-null reference in advance. The WebSchedule data provider (or
            your custom data provider) is responsible for assigning this context object when handling
            a "FetchVariances" operation.</exception>
            <exception cref="T:System.InvalidCastException">Thrown when the <strong>CreationContext</strong>
            contained a non-null reference to an object of an unexpected type.</exception>
        </member>
        <member name="M:Infragistics.WebUI.Data.VarianceBinding.SetDataKeyProperty(System.Object,System.Object[])">
            <summary>
            Sets the <b>DataKey</b> property or field on a bound data object.
            </summary>
            <param name="instance">An instance of a bound data object, typically
            created by an earlier call to <b>CreateInstance</b>.</param>
            <param name="keyValue">A single-item array containing the value of the
            key property or field for the bound data object.</param>
            <remarks>
            <seealso cref="M:Infragistics.WebUI.Data.ScheduleDataBinding.SetDataKeyProperty(System.Object,System.Object[])">SetDataKeyProperty</seealso>
            </remarks>
        </member>
        <member name="M:Infragistics.WebUI.Data.VarianceBinding.ShouldSerializeDataKeyMember">
            <summary>
            Indicates whether the <see cref="P:Infragistics.WebUI.Data.VarianceBinding.DataKeyMember"/> has changed from it's default value.
            </summary>
        </member>
        <member name="M:Infragistics.WebUI.Data.VarianceBinding.ResetDataKeyMember">
            <summary>
            Resets the <see cref="P:Infragistics.WebUI.Data.VarianceBinding.DataKeyMember"/> property to it's default value.
            </summary>
        </member>
        <member name="M:Infragistics.WebUI.Data.VarianceBinding.ShouldSerialize">
            <summary>
            Indicates whether the <b>VarianceBinding</b> should be serialized.
            </summary>
            <value>
            True if this compound property no longer has it's default value.
            </value>
            <remarks>
            <p class="body">Inheritors should override this method if their subclass
            of <b>VarianceBinding</b> adds additional binding members. Their implementation
            of <b>ShouldSerialize</b> must call the base implementation, and perform a
            logical-OR on the base class' return value with the should serialize methods
            of any additional binding member properties added (these should test each
            individual binding member property to see if it has changed from it's default
            value).</p>
            <p class="body">Incorrect implementation of <b>ShouldSerialize</b> may lead
            to the <b>VarianceBinding</b> unnecessarily being serialized to the ASP.NET
            document even though every property has it's default value.</p>
            </remarks>
        </member>
        <member name="P:Infragistics.WebUI.Data.VarianceBinding.CreationContext">
            <summary>
            An arbitrary object to provide additional context when the
            <see cref="M:Infragistics.WebUI.Data.VarianceBinding.CreateInstance"/> method is called.
            </summary>
            <remarks>
            <p class="body">A <strong>Variance</strong> is always created
            by it's root activity. In order for the <strong>CreateInstance</strong>
            factory method to work when <strong>Variance</strong> objects are
            created during calls to the data provider's <strong>ReadObject</strong>
            method, the data provider must assign the root activity to this
            <strong>CreationContext</strong> property before each object is
            read and databound from the data source. This class' implementation
            of the <strong>CreateInstance</strong> method uses the <strong>CreationContext</strong>
            to create a proper <strong>Variance</strong> object.</p>
            <p class="body">Although in this specific case the <strong>CreationContext</strong>
            is of type <strong>AppointmentVariance</strong>, other return types are
            possible and callers must not make any assumptions about the type of
            the <strong>CreationContext</strong>, as it may vary with the intended
            use of the <strong>ScheduleDataBinding</strong> object.</p>
            </remarks>
        </member>
        <member name="P:Infragistics.WebUI.Data.VarianceBinding.DataKeyMember">
            <summary>
            Gets or sets the field used for initializing the
            data object's DataKey property.
            </summary>
        </member>
        <member name="P:Infragistics.WebUI.Data.VarianceBinding.UnderlyingType">
            <summary>
            Gets the underlying <b>Type</b> in the WebSchedule object model on behalf of
            which this <b>VarianceBinding</b> subclass is responsible for managing databinding.
            </summary>
            <remarks>
            <p class="body">This property returns the <b>Type</b> of a <b>Variance</b>. It
            does not call the base implementation.</p>
            <p class="body">Inheritors must override this read-only property and supply the
            Common Language Runtime (CLR) <b>Type</b> describing the WebSchedule object model
            type their <b>VarianceBinding</b> subclass. The <b>Type</b> returned by an overridden
            implementation should be a subclass of <b>AppointmentVariance</b>.</p>
            </remarks>
        </member>
        <member name="T:Infragistics.WebUI.Data.DataParameterSurrogate">
            <summary>
            Implementation of the <b>IDbDataParameter</b> interface in a data
            provider independent manner.
            </summary>
            <remarks>
            <p class="body">Supports instantiating the parameter
            collections required by queries and stored procedures before the
            underlying data provider technology is known.</p>
            <p class="body">Convertible into concrete <b>IDbDataParameter</b>
            implementations specific to an <b>IDbCommand</b> implementation's
            underlying data provider technology when required; typically the
            first time data binding occurs. This is done through this class'
            implementation of the <b>IConvertible</b> interface.</p>
            <p class="body">Developers may need to derive their own 
            <b>DataParameterSurrogate</b> subclass if they must support
            additional databases.</p>
            <p class="body">Adding support for extra data parameter surrogates
            is simply a matter of overriding the <b>IConvertible.ToType</b> method
            in the subclass to check if the <i>convertibleType</i> is the
            <b>IDbParameter</b>-implementation of the .NET Data Provider
            for the application's database provider. When this isn't the case,
            the overriden method should call this base class' implementation
            of <b>IConvertible.ToType</b>. When the <i>convertibleType</i>
            does match the <b>IDbParameter</b>-implementation of the application's
            database provider, construct a new instance of the <b>Parameter</b>
            class and then invoke <see cref="M:Infragistics.WebUI.Data.DataParameterSurrogate.InitializeAdditionalProperties(System.Data.IDbDataParameter)"/>
            on it to complete it's initialization.</p>
            <p class="body">Developers must supply their application's custom
            <b>DataParameterSurrogate</b> subclass to their <b>WebSchedule</b>
            data provider for the custom surrogates to be used instead of the
            built-in ones. This is done by subclassing <b>WebScheduleDBProviderBase</b>
            (or another subclass of the Database data provider base class that
            has functionality needed by the application) and override it's
            <b>CreateDataParameter</b> factory method to return new instances
            of the custom <b>DataParameterSurrogate</b> subclass when the
            data binding infrastructure requires them.</p>
            </remarks>
        </member>
        <member name="M:Infragistics.WebUI.Data.DataParameterSurrogate.#ctor(System.String)">
            <summary>
            Creates a surrogate for an <b>IDbDataParameter</b> that can be instantiated
            in a data provider-independent manner.
            </summary>
            <param name="parameterName">Parameter name.</param>
            <exception cref="T:System.ArgumentNullException">Thrown when the <i>parameterName</i>
            specified is null or an empty string. While permitted by <b>IDbDataParameter</b>,
            these values would be disallowed by many data providers. Therefore, a non-null,
            non-empty <i>parameterName</i> must be furnished.</exception>
        </member>
        <member name="M:Infragistics.WebUI.Data.DataParameterSurrogate.#ctor(System.String,System.Data.DbType)">
            <summary>
            Creates a surrogate for an <b>IDbDataParameter</b> that can be instantiated
            in a data provider-independent manner.
            </summary>
            <param name="parameterName">Parameter name.</param>
            <param name="parameterType">Parameter's database type (provider independent).</param>
            <exception cref="T:System.ArgumentNullException">Thrown when the <i>parameterName</i>
            specified is null or an empty string. While permitted by <b>IDbDataParameter</b>,
            these values would be disallowed by many data providers. Therefore, a non-null,
            non-empty <i>parameterName</i> must be furnished.</exception>
        </member>
        <member name="M:Infragistics.WebUI.Data.DataParameterSurrogate.#ctor(System.String,System.Data.DbType,System.Data.ParameterDirection)">
            <summary>
            Creates a surrogate for an <b>IDbDataParameter</b> that can be instantiated
            in a data provider-independent manner.
            </summary>
            <param name="parameterName">Parameter name.</param>
            <param name="parameterType">Parameter's database type (provider independent).</param>
            <param name="parameterDir">Parameter's direction.</param>
            <exception cref="T:System.ArgumentNullException">Thrown when the <i>parameterName</i>
            specified is null or an empty string. While permitted by <b>IDbDataParameter</b>,
            these values would be disallowed by many data providers. Therefore, a non-null,
            non-empty <i>parameterName</i> must be furnished.</exception>
        </member>
        <member name="M:Infragistics.WebUI.Data.DataParameterSurrogate.#ctor(System.String,System.Data.DbType,System.Data.ParameterDirection,System.Int32)">
            <summary>
            Creates a surrogate for an <b>IDbDataParameter</b> that can be instantiated
            in a data provider-independent manner.
            </summary>
            <param name="parameterName">Parameter name.</param>
            <param name="parameterType">Parameter's database type (provider independent).</param>
            <param name="parameterDir">Parameter's direction.</param>
            <param name="columnSizeInBytes">Size in bytes of the database column corresponding
            to the parameter (most often used in connection with number or varchar data types).
            </param>
            <exception cref="T:System.ArgumentNullException">Thrown when the <i>parameterName</i>
            specified is null or an empty string. While permitted by <b>IDbDataParameter</b>,
            these values would be disallowed by many data providers. Therefore, a non-null,
            non-empty <i>parameterName</i> must be furnished.</exception>
        </member>
        <member name="M:Infragistics.WebUI.Data.DataParameterSurrogate.OnParameterNameChanged(System.ComponentModel.PropertyChangedEventArgs)">
            <summary>
            Fires the <b>ParameterNameChanged</b> event, and cancels any change if an
            <b>Exception</b> is thrown by any event handler.
            </summary>
            <param name="args">Arguments, the name contained is the proposed new
            parameter name.</param>
            <returns>True if all event handlers have accepted the change in parameter
            name.</returns>
            <remarks>
            <p class="body">An event handler may reject the change (for instance,
            because it duplicates a parameter name already present in the containing
            parameters collection) by throwing an <b>Exception</b>, which this method
            will catch by default. Inheritors may override this behavior.</p>
            </remarks>
        </member>
        <member name="M:Infragistics.WebUI.Data.DataParameterSurrogate.SetAllowNulls(System.Boolean)">
            <summary>
            Sets the <b>IsNullable</b> property.
            </summary>
            <param name="allowNullsState">A flag indicating whether <b>DBNull</b>
            values are allowed.</param>
            <remarks>
            <p class="body">The <see cref="P:Infragistics.WebUI.Data.DataParameterSurrogate.IsNullable"/> property is read-only.
            Inheritors may use this method to write a value into the <b>IsNullable</b>
            property prior to the <b>DataParameterSurrogate</b> being converted into a
            database-specific <b>IDbDataParameter</b> implementation. Setting a value
            after the conversion occurs will have no effect on any database-specific
            <b>IDbDataParameter</b> implementations already created.</p>
            </remarks>
        </member>
        <member name="M:Infragistics.WebUI.Data.DataParameterSurrogate.InitializeAdditionalProperties(System.Data.IDbDataParameter)">
            <summary>
            Initializes properties on a newly constructed concrete <b>IDataParameter</b>
            that cannot be initialized through it's available constructors.
            </summary>
            <param name="param">
            The <b>IDataParameter</b> reference getting initialized.
            </param>
            <returns>An initialized <b>IDataParameter</b> implementation based on the
            state of the current <b>DataParameterSurrogate</b>.</returns>
            <remarks>
            <p class="body">Inheritors may call this method from their overrides of
            <b>IConvertible.ToType</b> in order to copy property values from this
            instance to their newly constructed <b>IDbDataParameter</b> implementation.
            Inheritors who add additional properties to the <b>DataParameterSurrogate</b>
            should also override this method, to call the base implementation and then
            copy any additional properties they have added that were not assignable when
            the <b>IDbDataParameter</b> implementation was constructed.</p>
            </remarks>
        </member>
        <member name="M:Infragistics.WebUI.Data.DataParameterSurrogate.System#IConvertible#GetTypeCode">
            <summary>
            Gets the <b>TypeCode</b> for the current instance.
            </summary>
            <returns><b>TypeCode.Object</b>.</returns>
        </member>
        <member name="M:Infragistics.WebUI.Data.DataParameterSurrogate.System#IConvertible#ToBoolean(System.IFormatProvider)">
            <summary>
            Converts to <b>Boolean</b>.
            </summary>
            <param name="provider">A formatting provider (not used).</param>
            <returns>Not applicable.</returns>
            <exception cref="T:System.InvalidCastException">Thrown
            when this method is called.  There is no meaningful
            conversion to the requested <b>Type</b>.</exception>
        </member>
        <member name="M:Infragistics.WebUI.Data.DataParameterSurrogate.System#IConvertible#ToByte(System.IFormatProvider)">
            <summary>
            Converts to <b>Byte</b>.
            </summary>
            <param name="provider">A formatting provider (not used).</param>
            <returns>Not applicable.</returns>
            <exception cref="T:System.InvalidCastException">Thrown
            when this method is called.  There is no meaningful
            conversion to the requested <b>Type</b>.</exception>
        </member>
        <member name="M:Infragistics.WebUI.Data.DataParameterSurrogate.System#IConvertible#ToChar(System.IFormatProvider)">
            <summary>
            Converts to <b>Char</b>.
            </summary>
            <param name="provider">A formatting provider (not used).</param>
            <returns>Not applicable.</returns>
            <exception cref="T:System.InvalidCastException">Thrown
            when this method is called.  There is no meaningful
            conversion to the requested <b>Type</b>.</exception>
        </member>
        <member name="M:Infragistics.WebUI.Data.DataParameterSurrogate.System#IConvertible#ToDateTime(System.IFormatProvider)">
            <summary>
            Converts to <b>DateTime</b>.
            </summary>
            <param name="provider">A formatting provider (not used).</param>
            <returns>Not applicable.</returns>
            <exception cref="T:System.InvalidCastException">Thrown
            when this method is called.  There is no meaningful
            conversion to the requested <b>Type</b>.</exception>
        </member>
        <member name="M:Infragistics.WebUI.Data.DataParameterSurrogate.System#IConvertible#ToDecimal(System.IFormatProvider)">
            <summary>
            Converts to <b>Decimal</b>.
            </summary>
            <param name="provider">A formatting provider (not used).</param>
            <returns>Not applicable.</returns>
            <exception cref="T:System.InvalidCastException">Thrown
            when this method is called.  There is no meaningful
            conversion to the requested <b>Type</b>.</exception>
        </member>
        <member name="M:Infragistics.WebUI.Data.DataParameterSurrogate.System#IConvertible#ToDouble(System.IFormatProvider)">
            <summary>
            Converts to <b>Double</b>.
            </summary>
            <param name="provider">A formatting provider (not used).</param>
            <returns>Not applicable.</returns>
            <exception cref="T:System.InvalidCastException">Thrown
            when this method is called.  There is no meaningful
            conversion to the requested <b>Type</b>.</exception>
        </member>
        <member name="M:Infragistics.WebUI.Data.DataParameterSurrogate.System#IConvertible#ToInt16(System.IFormatProvider)">
            <summary>
            Converts to <b>Int16</b>.
            </summary>
            <param name="provider">A formatting provider (not used).</param>
            <returns>Not applicable.</returns>
            <exception cref="T:System.InvalidCastException">Thrown
            when this method is called.  There is no meaningful
            conversion to the requested <b>Type</b>.</exception>
        </member>
        <member name="M:Infragistics.WebUI.Data.DataParameterSurrogate.System#IConvertible#ToInt32(System.IFormatProvider)">
            <summary>
            Converts to <b>Int32</b>.
            </summary>
            <param name="provider">A formatting provider (not used).</param>
            <returns>Not applicable.</returns>
            <exception cref="T:System.InvalidCastException">Thrown
            when this method is called.  There is no meaningful
            conversion to the requested <b>Type</b>.</exception>
        </member>
        <member name="M:Infragistics.WebUI.Data.DataParameterSurrogate.System#IConvertible#ToInt64(System.IFormatProvider)">
            <summary>
            Converts to <b>Int64</b>.
            </summary>
            <param name="provider">A formatting provider (not used).</param>
            <returns>Not applicable.</returns>
            <exception cref="T:System.InvalidCastException">Thrown
            when this method is called.  There is no meaningful
            conversion to the requested <b>Type</b>.</exception>
        </member>
        <member name="M:Infragistics.WebUI.Data.DataParameterSurrogate.System#IConvertible#ToSByte(System.IFormatProvider)">
            <summary>
            Converts to <b>SByte</b>.
            </summary>
            <param name="provider">A formatting provider (not used).</param>
            <returns>Not applicable.</returns>
            <exception cref="T:System.InvalidCastException">Thrown
            when this method is called.  There is no meaningful
            conversion to the requested <b>Type</b>.</exception>
        </member>
        <member name="M:Infragistics.WebUI.Data.DataParameterSurrogate.System#IConvertible#ToSingle(System.IFormatProvider)">
            <summary>
            Converts to <b>Single</b>.
            </summary>
            <param name="provider">A formatting provider (not used).</param>
            <returns>Not applicable.</returns>
            <exception cref="T:System.InvalidCastException">Thrown
            when this method is called.  There is no meaningful
            conversion to the requested <b>Type</b>.</exception>
        </member>
        <member name="M:Infragistics.WebUI.Data.DataParameterSurrogate.System#IConvertible#ToString(System.IFormatProvider)">
            <summary>
            Converts to <b>String</b>.
            </summary>
            <param name="provider">A formatting provider (not used).</param>
            <returns>The <see cref="P:Infragistics.WebUI.Data.DataParameterSurrogate.ParameterName"/> of this <b>DataParameterSurrogate</b>.</returns>
        </member>
        <member name="M:Infragistics.WebUI.Data.DataParameterSurrogate.System#IConvertible#ToType(System.Type,System.IFormatProvider)">
            <summary>
            Converts to an arbitrary <b>Type</b>, most commonly another implementation
            of <b>IDbDataParameter</b>.
            </summary>
            <param name="conversionType">The <b>Type</b> that the caller wants to
            convert this <b>DataParameterSurrogate</b> into. Only those types
            implementing <b>IDbDataParameter</b> can be supported.</param>
            <param name="provider">A formatting provider (not used).</param>
            <remarks>
            <p class="body">This method is used as a factory method by the WebSchedule
            database providers to instantiate a database-specific <b>IDbDataParameter</b>
            implementation from generic (database-independent) parameter information.
            When adding support for additional databases, inheritors subclassing the
            <b>DataParameterSurrogate</b> must override this method to check the
            <i>conversionType</i> for their database's <b>IDbDataParameter</b>
            implementation (for example, to add support for IBM DB2 an inheritor
            would test if <i>conversionType</i> were the class, <b>DB2Command</b>),
            and create an instance of that implementation based on the properties
            of the <b>DataParameterSurrogate</b>.</p>
            <p class="body">The most common challenge in properly implementing this
            method requires the inheritor devise a correct mapping between the database
            independent <see cref="P:Infragistics.WebUI.Data.DataParameterSurrogate.DbType"/> enumeration, and the <i>PrvDbType</i>
            enumeration provided by third-party database vendor .NET Data Providers.
            </p>
            <p class="body">When the <i>conversionType</i> is not recognized, inheritors
            should not throw an <b>InvalidCastException</b> immediately. Instead, call
            the base class' implementation of <b>IConvertible.ToType</b>. This may
            require casting the base class to <b>IConvertible</b>. Doing so enables
            a <b>DataParameterSurrogate</b> subclass to take full advantage of additional 
            functionality (such as support for new .NET Data Providers) in the future.
            </p>
            <seealso cref="M:Infragistics.WebUI.Data.DataParameterSurrogate.InitializeAdditionalProperties(System.Data.IDbDataParameter)"/>
            </remarks>
            <returns>An implementation of <b>IDbDataParameter</b>, or null (Nothing
            in Visual Basic .NET) if creating the implementation failed.</returns>
            <exception cref="T:System.InvalidCastException">
            <p class="body">Thrown when <i>conversionType</i> is not a recognized
            implementation of <b>IDbDataParameter</b>. Developers must derive their
            own <b>DataParameterSurrogate</b> subclass, and override this method to
            correctly handle the requested <b>Type</b>.</p>
            <p class="body">Also thrown when <i>conversionType</i> is not an
            <b>IDbDataParameter</b>. The <b>DataParameterSurrogate</b> does
            not support being converted into types that do not implement the
            <b>IDbDataParameter</b> interface.</p>
            </exception>
        </member>
        <member name="M:Infragistics.WebUI.Data.DataParameterSurrogate.System#IConvertible#ToUInt16(System.IFormatProvider)">
            <summary>
            Converts to <b>UInt16</b>.
            </summary>
            <param name="provider">A formatting provider (not used).</param>
            <returns>Not applicable.</returns>
            <exception cref="T:System.InvalidCastException">Thrown
            when this method is called.  There is no meaningful
            conversion to the requested <b>Type</b>.</exception>
        </member>
        <member name="M:Infragistics.WebUI.Data.DataParameterSurrogate.System#IConvertible#ToUInt32(System.IFormatProvider)">
            <summary>
            Converts to <b>UInt32</b>.
            </summary>
            <param name="provider">A formatting provider (not used).</param>
            <returns>Not applicable.</returns>
            <exception cref="T:System.InvalidCastException">Thrown
            when this method is called.  There is no meaningful
            conversion to the requested <b>Type</b>.</exception>
        </member>
        <member name="M:Infragistics.WebUI.Data.DataParameterSurrogate.System#IConvertible#ToUInt64(System.IFormatProvider)">
            <summary>
            Converts to <b>UInt64</b>.
            </summary>
            <param name="provider">A formatting provider (not used).</param>
            <returns>Not applicable.</returns>
            <exception cref="T:System.InvalidCastException">Thrown
            when this method is called.  There is no meaningful
            conversion to the requested <b>Type</b>.</exception>
        </member>
        <member name="E:Infragistics.WebUI.Data.DataParameterSurrogate.ParameterNameChanged">
            <summary>
            Signals when the <see cref="P:Infragistics.WebUI.Data.DataParameterSurrogate.ParameterName"/> property changes.
            </summary>
            <remarks>
            <p class="body">Collections containing this <b>DataParameterSurrogate</b>
            may wish to handle this event in order to prevent parameters from being
            assigned duplicate names.</p>
            <seealso cref="M:Infragistics.WebUI.Data.DataParameterSurrogate.OnParameterNameChanged(System.ComponentModel.PropertyChangedEventArgs)"/>
            </remarks>
        </member>
        <member name="P:Infragistics.WebUI.Data.DataParameterSurrogate.DbType">
            <summary>
            Database-independent data type.
            </summary>
            <remarks>
            <p class="body">As the least common denominator, the <b>DbType</b>
            enumeration does not expose the same variety of data types that
            some <i>PrvDbType</i> enumerations may support. Further support
            for additional data types creates dependencies on specific data
            providers (examples include BLOBs or binary large objects, Memo
            fields, and native XML column types), and dilutes the generality
            of the base class. The <b>DataParameterSurrogate</b> cannot
            support automatic conversion to these provider-specific data
            types.</p>
            <p class="body">This limitation can be overcome by deriving a more
            specialized <b>DataParameterSurrogate</b> with additional properties
            to allow greater selectivity in mapping data types to the target
            database. Inheritors overriding <b>IConvertible.ToType</b> have
            complete control over the mapping of the <b>DbType</b> in concert
            with other properties their subclass may add, to data types in
            their provider's <i>PrvDbType</i> enumeration.</p>
            </remarks>
        </member>
        <member name="P:Infragistics.WebUI.Data.DataParameterSurrogate.Direction">
            <summary>
            Indicates what direction(s) the parameter transfers information.
            </summary>
        </member>
        <member name="P:Infragistics.WebUI.Data.DataParameterSurrogate.IsNullable">
            <summary>
            Indicates if the parameter can send or receive <b>DBNull</b> values.
            </summary>
        </member>
        <member name="P:Infragistics.WebUI.Data.DataParameterSurrogate.ParameterName">
            <summary>
            Name of the data provider parameter.
            </summary>
            <remarks>
            <p class="body">Changing this property after instantiation triggers
            the <see cref="E:Infragistics.WebUI.Data.DataParameterSurrogate.ParameterNameChanged"/> event. An assignment may be
            canceled by event handlers on this event.</p>
            <seealso cref="M:Infragistics.WebUI.Data.DataParameterSurrogate.OnParameterNameChanged(System.ComponentModel.PropertyChangedEventArgs)"/>
            </remarks>
        </member>
        <member name="P:Infragistics.WebUI.Data.DataParameterSurrogate.Value">
            <summary>
            Currently bound value to this data parameter.
            </summary>
            <remarks>
            <p class="body">When the <see cref="P:Infragistics.WebUI.Data.DataParameterSurrogate.Direction"/> is <i>Out</i> or <i>Return</i>,
            the value contained by this property after the last row has been read from the
            result set by <b>IDataReader</b> will be information received from the data
            source. When the <b>Direction</b> is <i>In</i>, the value contained by this
            property will be sent as an argument to the data source before the 
            <b>IDataReader</b> begins processing it's SQL command(s) or stored procedure.</p>
            </remarks>
        </member>
        <member name="P:Infragistics.WebUI.Data.DataParameterSurrogate.SourceColumn">
            <summary>
            Column name of a source column in a <b>DataSet</b> binding situation.
            </summary>
        </member>
        <member name="P:Infragistics.WebUI.Data.DataParameterSurrogate.SourceVersion">
            <summary>
            Row version.
            </summary>
            <remarks>
            <p class="body">Applicable when performing an <b>UpdateCommand</b>
            in a <b>DataSet</b> binding situation only.</p>
            </remarks>
        </member>
        <member name="P:Infragistics.WebUI.Data.DataParameterSurrogate.Precision">
            <summary>
            Precision of decimal parameter data types.
            </summary>
        </member>
        <member name="P:Infragistics.WebUI.Data.DataParameterSurrogate.Scale">
            <summary>
            Scale of decimal parameter data types.
            </summary>
        </member>
        <member name="P:Infragistics.WebUI.Data.DataParameterSurrogate.Size">
            <summary>
            Size of the underlying data column (in bytes).
            </summary>
        </member>
        <member name="T:Infragistics.WebUI.Data.DataParameterSpecialRuleAdapter">
            <summary>
            Wrapper class for arbitrary <strong>IDbDataParameter</strong>
            implementations that intercepts assignments to the data parameter's
            <strong>Value</strong> property in order to enforce a special rule.
            </summary>
        </member>
        <member name="M:Infragistics.WebUI.Data.DataParameterSpecialRuleAdapter.#ctor(System.Data.IDbDataParameter,Infragistics.WebUI.Data.OperationContext.ParameterEntry.SpecialRule)">
            <summary>
            Creates a surrogate for an <b>IDbDataParameter</b> that can be instantiated
            in a data provider-independent manner.
            </summary>
            <param name="dbDataParameterImpl">An implementation of the <b>IDbDataParameter</b>
            interface to be adapted for <em>specialRule</em>.</param>
            <param name="specialRule">A special rule applied when values are set (bound upon)
            this data parameter.</param>
        </member>
        <member name="P:Infragistics.WebUI.Data.DataParameterSpecialRuleAdapter.SpecialRule">
            <summary>
            Special parameter value binding rule applied by this
            <strong>DataParameterSpecialRuleAdapter</strong>.
            </summary>
        </member>
        <member name="P:Infragistics.WebUI.Data.DataParameterSpecialRuleAdapter.DbType">
            <summary>
            Database-independent data type.
            </summary>
            <remarks>
            <p class="body">As the least common denominator, the <b>DbType</b>
            enumeration does not expose the same variety of data types that
            some <i>PrvDbType</i> enumerations may support. Further support
            for additional data types creates dependencies on specific data
            providers (examples include BLOBs or binary large objects, Memo
            fields, and native XML column types), and dilutes the generality
            of the base class. The <b>DataParameterSurrogate</b> cannot
            support automatic conversion to these provider-specific data
            types.</p>
            <p class="body">This limitation can be overcome by deriving a more
            specialized <b>DataParameterSurrogate</b> with additional properties
            to allow greater selectivity in mapping data types to the target
            database. Inheritors overriding <b>IConvertible.ToType</b> have
            complete control over the mapping of the <b>DbType</b> in concert
            with other properties their subclass may add, to data types in
            their provider's <i>PrvDbType</i> enumeration.</p>
            </remarks>
        </member>
        <member name="P:Infragistics.WebUI.Data.DataParameterSpecialRuleAdapter.Direction">
            <summary>
            Indicates what direction(s) the parameter transfers information.
            </summary>
        </member>
        <member name="P:Infragistics.WebUI.Data.DataParameterSpecialRuleAdapter.IsNullable">
            <summary>
            Indicates if the parameter can send or receive <b>DBNull</b> values.
            </summary>
        </member>
        <member name="P:Infragistics.WebUI.Data.DataParameterSpecialRuleAdapter.ParameterName">
            <summary>
            Name of the data provider parameter.
            </summary>
            <remarks>
            <p class="body">Changing this property after instantiation triggers
            the <see cref="!:ParameterNameChanged"/> event. An assignment may be
            canceled by event handlers on this event.</p>
            <seealso cref="!:OnParameterNameChanged"/>
            </remarks>
        </member>
        <member name="P:Infragistics.WebUI.Data.DataParameterSpecialRuleAdapter.Value">
            <summary>
            Currently bound value to this data parameter.
            </summary>
            <remarks>
            <p class="body">When the <see cref="P:Infragistics.WebUI.Data.DataParameterSpecialRuleAdapter.Direction"/> is <i>Out</i> or <i>Return</i>,
            the value contained by this property after the last row has been read from the
            result set by <b>IDataReader</b> will be information received from the data
            source. When the <b>Direction</b> is <i>In</i>, the value contained by this
            property will be sent as an argument to the data source before the 
            <b>IDataReader</b> begins processing it's SQL command(s) or stored procedure.</p>
            </remarks>
        </member>
        <member name="P:Infragistics.WebUI.Data.DataParameterSpecialRuleAdapter.SourceColumn">
            <summary>
            Column name of a source column in a <b>DataSet</b> binding situation.
            </summary>
        </member>
        <member name="P:Infragistics.WebUI.Data.DataParameterSpecialRuleAdapter.SourceVersion">
            <summary>
            Row version.
            </summary>
            <remarks>
            <p class="body">Applicable when performing an <b>UpdateCommand</b>
            in a <b>DataSet</b> binding situation only.</p>
            </remarks>
        </member>
        <member name="P:Infragistics.WebUI.Data.DataParameterSpecialRuleAdapter.Size">
            <summary>
            Size of the underlying data column (in bytes).
            </summary>
        </member>
        <member name="T:Infragistics.WebUI.Data.DataProviderException">
            <summary>
            Used to raise data provider related exceptions.
            </summary>
            <remarks>
            <p class="body">Application developers should not
            throw the <b>DataProviderException</b>. It is reserved
            for the internal Infragistics control infrastructure.
            </p>
            <p class="note"><strong>Note:</strong> The inner
            exception is the actual <b>Exception</b> raised
            by the data access layer.
            </p>
            </remarks>
        </member>
        <member name="M:Infragistics.WebUI.Data.DataProviderException.#ctor">
            <summary>
            Creates a default <b>DataProviderException</b>.
            </summary>
        </member>
        <member name="M:Infragistics.WebUI.Data.DataProviderException.#ctor(System.String)">
            <summary>
            Creates a <b>DataProviderException</b> having the
            specified error message.
            </summary>
            <param name="message"></param>
        </member>
        <member name="T:Infragistics.WebUI.Data.DBHelper">
            <summary>
            Utility class for DB access
            </summary>
        </member>
        <member name="M:Infragistics.WebUI.Data.DBHelper.OpenConnection(System.Data.IDbConnection)">
            <summary>
            Helper method which opens a DB Connection.
            </summary>
            <param name="connection">An unopened connection.</param>
            <returns>DB Connection</returns>
        </member>
        <member name="M:Infragistics.WebUI.Data.DBHelper.ExecuteDataReader(System.Data.IDbCommand)">
            <summary>
            Helper method which executes a DataReader.
            </summary>
            <param name="command"></param>
            <returns>Data Reader</returns>
        </member>
        <member name="M:Infragistics.WebUI.Data.DBHelper.CreateTextCommand(System.Data.IDbConnection)">
            <summary>
            Helper method which creates a text command object.
            </summary>
            <param name="connection"></param>
            <returns>DB Command</returns>
        </member>
        <member name="M:Infragistics.WebUI.Data.DBHelper.CreateStoredProcedureCommand(System.Data.IDbConnection,System.String)">
            <summary>
            Helper method which creates a stored procedure method.
            </summary>
            <param name="connection"></param>
            <param name="storedProcName"></param>
            <returns>DB Stored Procedure Command</returns>
        </member>
        <member name="T:Infragistics.WebUI.Data.ErrorCondition">
            <summary>
            Enumeration listing potential WebScheduleDataProvider error conditions.
            </summary>
            <remarks>
            <p class="body">An application that subscribes to the <b>DataProviderError</b>
            event receive an error indication matching one of these general qualifiers.</p>
            </remarks>
        </member>
        <member name="F:Infragistics.WebUI.Data.ErrorCondition.OK">
            <summary>
            The operation was successful -- there is no error.
            </summary>
        </member>
        <member name="F:Infragistics.WebUI.Data.ErrorCondition.NoConnection">
            <summary>
            An error occurred while opening the <b>Connection</b>.
            </summary>
        </member>
        <member name="F:Infragistics.WebUI.Data.ErrorCondition.ConcurrencyConflict">
            <summary>
            This user attempted to modify a piece of information that
            had already been modified by an earlier user.  This user's
            change must be discarded and their view refreshed.
            </summary>
        </member>
        <member name="F:Infragistics.WebUI.Data.ErrorCondition.DataError">
            <summary>
            There was an error carrying out data commands or binding
            data to the object model.
            </summary>
        </member>
        <member name="F:Infragistics.WebUI.Data.RecoveryStatus.Abort">
            <summary>
            The current operation terminates without being performed.
            </summary>
        </member>
        <member name="F:Infragistics.WebUI.Data.RecoveryStatus.Skip">
            <summary>
            Operation attempts to resume without performing the failed step (not
            always possible, falls back to <i>Abort</i>).
            </summary>
        </member>
        <member name="F:Infragistics.WebUI.Data.RecoveryStatus.Retry">
            <summary>
            Operation retries the failed step because the event handler has attempted
            some sort of recovery (not always possible, falls back to <i>Abort</i>).
            </summary>
        </member>
        <member name="T:Infragistics.WebUI.Data.DataProviderErrorEventHandler">
            <summary>
            Handler to receive notifications when <b>WebScheduleDataProvider</b>
            errors occur (<i>e.g.,</i> database errors).
            </summary>
            <paramref name="sender">The object sending the event, frequently an
            object related to the database or data source.</paramref>
            <paramref name="e">Arguments describing the data provider error in
            more detail.</paramref>
            <remarks>
            <p class="body">Applications can subscribe to a method matching the
            signature of this <b>EventHandler</b> that they wish to have called
            back whenever a <b>WebScheduleDataProvider</b> occurs.</p>
            <seealso cref="T:Infragistics.WebUI.Data.DataProviderErrorEventArgs"/>
            </remarks>
        </member>
        <member name="T:Infragistics.WebUI.Data.DataProviderErrorEventArgs">
            <summary>
            Event arguments describing an error condition occuring in the WebSchedule
            data provider.
            </summary>
            <remarks>
            <p class="body">Applications that subscribe to the <b>DataProviderError</b>
            event on the WebSchedule data provider will receive this <b>EventArgs</b>
            subclass containing additional information about the nature of an error,
            when one occurs.</p>
            <seealso cref="T:Infragistics.WebUI.Data.DataProviderErrorEventHandler"/>
            </remarks>
        </member>
        <member name="M:Infragistics.WebUI.Data.DataProviderErrorEventArgs.#ctor(System.Exception,Infragistics.WebUI.WebSchedule.DataContext,Infragistics.WebUI.Data.ErrorCondition)">
            <summary>
            Creates a <b>DataProviderErrorEventArgs</b> instance in response to an
            exception being thrown within the data provider.
            </summary>
            <param name="e">An <b>Exception</b> instance caught from the .NET
            Framework while executing data provider operations.</param>
            <param name="dc">The <b>DataContext</b> of the operation being
            performed when the error occured.</param>
            <param name="ec">An enumeration value indicating the type of data
            provider error that has occured.</param>
            <remarks>
            <p class="body">Developers do not ordinarily need to create their own
            instance of an <b>DataProviderErrorEventArgs</b> themselves, as the
            data provider implementation will catch an <b>Exception</b> and do it
            for you. However, those who extend the built-in data providers to add
            functionality or support alternative DBMSes may catch their own
            <b>Exception</b> and propagate it through the firing of the
            <b>DataProviderError</b> event. When this is the case, the implementor
            of a custom data provider would wrap the <b>Exception</b> within a
            <b>DataProviderErrorEventArgs</b> and fire the event.</p>
            <p class="body">Specifying an <b>Exception</b> or a <b>DataContext</b>
            is optional. Developers should make every effort to specify the <b>DataContext</b>
            from a custom data provider when the <b>ErrorCondition</b> value is either
            <em>ConcurrencyConflict</em> or <em>DataError</em> in order to provide event
            subscribers with additional information about the operation that had caused
            the error to be raised.</p>
            </remarks>
        </member>
        <member name="P:Infragistics.WebUI.Data.DataProviderErrorEventArgs.Message">
            <summary>
            Message text describing the error that has occured.
            </summary>
            <remarks>
            <p class="body">The text in this error message comes from the source of
            an <b>Exception</b> being raised within the .NET Framework. The message
            text may contain helpful information in solving the cause of the error.
            </p>
            <p class="body">Because the message may contain technical information,
            it should not be displayed directly to end users. Developers are
            encouraged to present their own human-friendly message text to the
            end user.</p>
            </remarks>
        </member>
        <member name="P:Infragistics.WebUI.Data.DataProviderErrorEventArgs.DataContext">
            <summary>
            The <b>DataContext</b> being performed at the time of the <b>DataProviderError</b>
            event, if any.
            </summary>
            <remarks>
            <p class="body">When the <see cref="P:Infragistics.WebUI.Data.DataProviderErrorEventArgs.Condition"/> is <em>ConcurrencyConflict</em> or
            <em>DataError</em> this property contains the <b>DataContext</b> describing the
            <b>Operation</b> name and any requisite arguments supplied to the WebSchedule
            data provider at the time this error was raised. For other error conditions,
            this property returns null (Nothing in Visual Basic .NET).</p>
            </remarks>
        </member>
        <member name="P:Infragistics.WebUI.Data.DataProviderErrorEventArgs.Exception">
            <summary>
            Exception thrown by the .NET Framework leading to the
            firing of this <b>DataProviderError</b> event.
            </summary>
            <remarks>
            <p class="body">This is the original <b>Exception</b> object
            caught from the .NET Framework, if any, related to the data
            provider error that has occured.</p>
            </remarks>
        </member>
        <member name="P:Infragistics.WebUI.Data.DataProviderErrorEventArgs.Condition">
            <summary>
            The <b>ErrorCondition</b> enumeration constant associated with
            the current data provider error.
            </summary>
            <remarks>
            <p class="body">Applications listening to the <b>DataProviderError</b> event
            can derive their response to an error condition based on the value of the
            <b>Condition</b> property. See the <see cref="T:Infragistics.WebUI.Data.ErrorCondition"/> enumeration
            for a description of it's possible values.</p>
            <p class="body">The following list describes common responses to the variety
            of <b>ErrorCondition</b>s that may arise:</p>
            <list type="bullet">
            	<item>
            		<term>OK</term>
            		<description>The contents of <see cref="P:Infragistics.WebUI.Data.DataProviderErrorEventArgs.Message"/> are for informational
            		purposes only.</description>
            	</item>
            	<item>
            		<term>NoConnection</term>
            		<description>Check the <b>Connection</b> property on the data provider to
            		ensure it refers to a valid, non-null (not Nothing in Visual Basic .NET)
            		implementation of <b>IDbConnection</b>. Further, check that it's
            		<b>ConnectionString</b> is valid (if you don't directly attach a Connection
            		component to the WebSchedule data provider, and instead connection via the
            		<b>Connect</b> method or via a <b>ConnectionStringDefault</b> on a custom
            		data provider, check those) and that any logon credentials in the connection
            		string are correctly authenticating you as an authorized user.</description>
            	</item>
            	<item>
            		<term>ConcurrencyConflict</term>
            		<description>The requested data provider operation specified by <see cref="P:Infragistics.WebUI.Data.DataProviderErrorEventArgs.DataContext"/>
            		could not be completed, because it attempts to modify information stored by the
            		data provider that has already been modified by another user since this user's
            		view of the information was last updated. Therefore, portions of the information
            		on which this user has made the decision to submit a change are out-of-date.
            		When this happens, the WebSchedule data model must discard the submitted
            		changes, and the application should refresh the user's display with the
            		current view of information (and a message explaining that their update
            		could not be completed because another user had already updated the database).
            		</description>
            	</item>
            	<item>
            		<term>DataError</term>
            		<description>Describes an error with a data provider command (perhaps an
            		improperly configured stored procedure name, or a data table not fitting
            		the expected schema codified into a dynamic SQL select statement) or
            		while data binding values to the WebSchedule object model (for example,
            		a type mismatch between the data type (Real) of an extended property added
            		with a <b>ResourceDataBinding</b> subclass and the actual property type
            		(boolean) on a subclass of <b>Resource</b> in the object model).
            		</description>
            	</item>
            </list>
            </remarks>
        </member>
        <member name="T:Infragistics.WebUI.Data.InitializeActivityEventHandler">
            <summary>
            Handler for a application-specified method that expects to be
            called back when the <b>InitializeActivity</b> event fires.
            </summary>
            <paramref name="sender">The object sending notice that an <b>Activity</b>
            has undergone initialization.</paramref>
            <paramref name="e">Arguments containing the initialized <b>Activity</b>
            instance.</paramref>
            <remarks>
            <p class="body">Applications wishing to receive notification
            after an <b>Activity</b> has been fetched from the database
            and added to it's collection should implement a method within
            their application matching the signature of this delegate.</p>
            <p class="body">They may then instantiate the <b>InitializeActivityEventHandler</b>
            and add it as a handler on the <b>InitializeActivity</b> event
            of their WebSchedule data provider.</p>
            <p class="body">Each time the event fires during data-bind, the
            application's method that has been added as a handler to the
            <b>InitializeActivity</b> event will receive <see cref="T:Infragistics.WebUI.Data.InitializeActivityEventArgs"/>
            describing the newly added activity. This method can then perform
            any additional initializations on the <b>Activity</b> that the
            application requires (for example, setting it's <b>Style</b>
            property for individual activity styling).</p>
            <seealso cref="E:Infragistics.WebUI.Data.WebScheduleDbProvider.InitializeActivity">InitializeActivity</seealso>
            </remarks>
        </member>
        <member name="T:Infragistics.WebUI.Data.InitializeResourceEventHandler">
            <summary>
            Handler for a application-specified method that expects to be
            called back when the <b>InitializeResource</b> event fires.
            </summary>
            <paramref name="sender">The object sending notice that an <b>Resource</b>
            has undergone initialization.</paramref>
            <paramref name="e">Arguments containing the initialized <b>Resource</b>
            instance.</paramref>
            <remarks>
            <p class="body">Applications wishing to receive notification
            after a <b>Resource</b> has been fetched from the database
            and added to it's collection should implement a method within
            their application matching the signature of this delegate.</p>
            <p class="body">They may then instantiate the <b>InitializeResourceEventHandler</b>
            and add it as a handler on the <b>InitializeResource</b> event
            of their WebSchedule data provider.</p>
            <p class="body">Each time the event fires during data-bind, the
            application's method that has been added as a handler to the
            <b>InitializeResource</b> event will receive <see cref="T:Infragistics.WebUI.Data.InitializeResourceEventArgs"/>
            describing the newly added resource. This method can then perform
            any additional initializations on the <b>Resource</b> that the
            application requires.</p>
            <seealso cref="E:Infragistics.WebUI.Data.WebScheduleDbProvider.InitializeResource">InitializeResource</seealso>
            </remarks>
        </member>
        <member name="T:Infragistics.WebUI.Data.InitializeRecurrenceEventHandler">
            <summary>
            Handler for a application-specified method that expects to be
            called back when the <b>InitializeRecurrence</b> event fires.
            </summary>
            <paramref name="sender">The object sending notice that an <b>Recurrence</b>
            has undergone initialization.</paramref>
            <paramref name="e">Arguments containing the initialized <b>Recurrence</b>
            instance.</paramref>
            <remarks>
            <p class="body">Applications wishing to receive notification
            after a <b>Recurrence</b> has been fetched from the database
            and added to it's collection should implement a method within
            their application matching the signature of this delegate.</p>
            <p class="body">They may then instantiate the <b>InitializeRecurrenceEventHandler</b>
            and add it as a handler on the <b>InitializeRecurrence</b> event
            of their WebSchedule data provider.</p>
            <p class="body">Each time the event fires during data-bind, the
            application's method that has been added as a handler to the
            <b>InitializeRecurrence</b> event will receive <see cref="T:Infragistics.WebUI.Data.InitializeRecurrenceEventArgs"/>
            describing the newly added activity. This method can then perform
            any additional initializations on the <b>Recurrence</b> that the
            application requires (for example, perhaps modifying it's root
            activity).</p>
            <seealso cref="E:Infragistics.WebUI.Data.WebScheduleDbProvider.InitializeRecurrence">InitializeRecurrence</seealso>
            </remarks>
        </member>
        <member name="T:Infragistics.WebUI.Data.InitializeActivityEventArgs">
            <summary>
            Event arguments describing an <b>Activity</b> that has been
            fetched from the database.
            </summary>
            <remarks>
            <p class="body">Developers who have added an <see cref="T:Infragistics.WebUI.Data.InitializeActivityEventHandler"/>
            to the <b>InitializeActivity</b> event of their WebSchedule data provider will
            receive an instance of <b>InitializeActivityEventArgs</b> each time this event
            fires. This allows to application an opportunity to further initialize the
            <b>Activity</b> shortly after it has been retrieved and added to it's
            parent collection.</p>
            <seealso cref="E:Infragistics.WebUI.Data.WebScheduleDbProvider.InitializeActivity">InitializeActivity</seealso>
            </remarks>
        </member>
        <member name="P:Infragistics.WebUI.Data.InitializeActivityEventArgs.Activity">
            <summary>
            An <b>Activity</b> recently retrieved from the data source.
            </summary>
            <remarks>
            <p class="body">Developers may customize properties on this
            instance after it has been data bound and added to it's parent
            collection.</p>
            </remarks>
        </member>
        <member name="T:Infragistics.WebUI.Data.InitializeResourceEventArgs">
            <summary>
            Event arguments describing the <b>Resource</b> that has been
            fetched from the database.
            </summary>
            <remarks>
            <p class="body">Developers who have added an <see cref="T:Infragistics.WebUI.Data.InitializeResourceEventHandler"/>
            to the <b>InitializeResource</b> event of their WebSchedule data provider will
            receive an instance of <b>InitializeResourceEventArgs</b> each time this event
            fires. This allows to application an opportunity to further initialize the
            <b>Resource</b> shortly after it has been retrieved and added to it's
            parent collection.</p>
            <seealso cref="E:Infragistics.WebUI.Data.WebScheduleDbProvider.InitializeResource">InitializeResource</seealso>
            </remarks>
        </member>
        <member name="P:Infragistics.WebUI.Data.InitializeResourceEventArgs.Resource">
            <summary>
            A <b>Resource</b> recently retrieved from the data source.
            </summary>
            <remarks>
            <p class="body">Developers may customize properties on this
            instance after it has been data bound and added to it's parent
            collection.</p>
            </remarks>
        </member>
        <member name="T:Infragistics.WebUI.Data.InitializeRecurrenceEventArgs">
            <summary>
            Event arguments describing a <b>Recurrence</b> that has been
            fetched from the database.
            </summary>
            <remarks>
            <p class="body">Developers who have added an <see cref="T:Infragistics.WebUI.Data.InitializeRecurrenceEventHandler"/>
            to the <b>InitializeRecurrence</b> event of their WebSchedule data provider will
            receive an instance of <b>InitializeRecurrenceEventArgs</b> each time this event
            fires. This allows to application an opportunity to further initialize the
            <b>Recurrence</b> shortly after it has been retrieved and added to it's
            parent collection.</p>
            <seealso cref="E:Infragistics.WebUI.Data.WebScheduleDbProvider.InitializeRecurrence">InitializeRecurrence</seealso>
            </remarks>
        </member>
        <member name="P:Infragistics.WebUI.Data.InitializeRecurrenceEventArgs.Recurrence">
            <summary>
            A <b>Recurrence</b> recently retrieved from the data source.
            </summary>
            <remarks>
            <p class="body">Developers may customize properties on this
            instance after it has been data bound and added to it's parent
            collection.</p>
            </remarks>
        </member>
        <member name="T:Infragistics.WebUI.Data.OperationContext">
            <summary>
            Maintains information helpful during the processing of database <b>Command</b>
            sequences.
            </summary>
            <remarks>
            <p class="body">This class is responsible for managing the complexity associated
            with getting database-independent parameter set schemas, and initializing <b>IDataParameterCollection</b>
            lists suitable for the database <b>Command</b> at each stage of processing. Each
            operation context describes pre-defined information helpful to data binding and
            keyed by the name of the operation.</p>
            <p class="body">Developers only need to use this class when extending one of the
            supplied WebSchedule data providers. Normally when implementing operation methods
            to handle a <b>DataContext</b> subclass on a custom data provider for some named
            operation, the inheritor must create an <b>OperationContext</b>. Thereafter, they
            can use it to retrieve a dynamic SQL template (and resolve any placeholders by
            passing it to <see cref="M:Infragistics.WebUI.Data.WebScheduleDataProviderBase.BindStatement(Infragistics.WebUI.Data.OperationContext,System.Int32)">BindStatement</see>)
            or the stored procedure name for a new <b>Command</b> object created with the
            <see cref="!:WebScheduleDBProvider.CreateCommand">CreateCommand</see> method,
            and retrieve a data parameter set for use with the <b>Command</b> object
            by calling <see cref="M:Infragistics.WebUI.Data.OperationContext.InitializeParameters(System.Data.IDbCommand,Infragistics.WebUI.Data.OperationContext.ParameterFactoryMethod,System.Int32)"/>.</p>
            <p class="body">An <b>OperationContext</b> may describe the commands (and associated
            parameter sets) for multi-command operations. In these circumstances, the notion of
            a <em>command sequence number</em> applies when accessing information specific to a
            given step in a multi-command operation. Command sequence numbering starts at zero.</p>
            <seealso cref="M:Infragistics.WebUI.Data.OperationContext.GetCommandText(System.Int32)"/>
            <seealso cref="M:Infragistics.WebUI.Data.OperationContext.InitializeParameters(System.Data.IDbCommand,Infragistics.WebUI.Data.OperationContext.ParameterFactoryMethod,System.Int32)"/>
            </remarks>
        </member>
        <member name="M:Infragistics.WebUI.Data.OperationContext.#ctor(System.String)">
            <summary>
            Creates an <b>OperationContext</b> instance.
            </summary>
            <param name="operationName">The name of the operation.</param>
        </member>
        <member name="M:Infragistics.WebUI.Data.OperationContext.#ctor(System.String,System.Boolean)">
            <summary>
            Creates an <b>OperationContext</b> instance supporting the use of
            stored procedures.
            </summary>
            <param name="operationName">The name of the operation.</param>
            <param name="useStoredProcs">Flag indicating stored procedure names
            will be returned instead of dynamic SQL command text.</param>
        </member>
        <member name="M:Infragistics.WebUI.Data.OperationContext.InitializeParameters(System.Data.IDbCommand,Infragistics.WebUI.Data.OperationContext.ParameterFactoryMethod,System.Int32)">
            <summary>
            Initializes the <b>IDataParameterCollection</b> collection on the supplied database
            <b>IDbCommand</b> object based on the expected parameter schema.
            </summary>
            <param name="currentCommand">The current <b>IDbCommand</b> object to have its
            parameters re-initialized.</param>
            <param name="factoryMethod">The factory method used to create new <b>IDbDataParameter</b>
            implementations. Frequently, this will be the <b>CreateParameter</b> method on the
            same <b>IDbCommand</b>-implementing type passed to <i>currentCommand</i>, but it may
            not necessarily be so when the developer has subclassed their <b>WebScheduleDBProvider</b>
            and overridden the <b>CreateParameter</b> method.</param>
            <param name="commandSequenceNumber">Since an <i>operation</i> can consist of a
            sequence of several steps (especially in dynamic SQL mode), this zero-based
            number indicates the step in processing of the <i>operation</i>. This affects
            which parameter schema is to be expected.</param>
            <returns>An <b>IDataParameterCollection</b> initialized with the expected parameter
            schema for <i>currentCommand</i> at step <i>commandSequenceNumber</i> in the processing
            of the in-scope <b>OperationContext</b>. The caller must still populate argument values
            to complete the initialization of any <i>input parameters</i>.</returns>
            <remarks>
            <p class="body">Calling this method will re-set the <b>IDataParameterCollection</b>
            on <i>currentCommand</i> to empty before adding the expected parameter set for this
            stage in processing.</p>
            </remarks>
            <exception cref="T:System.ArgumentNullException">Thrown when the <em>currentCommand</em> supplied
            is a null reference (Nothing in Visual Basic .NET).  A non-null <b>IDbCommand</b> implementation
            is required to create a data parameters collection (of the appropriate implementation type) and
            attach it to the <em>currentCommand</em>.
            </exception>
        </member>
        <member name="M:Infragistics.WebUI.Data.OperationContext.GetCommandText(System.Int32)">
            <summary>
            Gets the SQL command text template or stored procedure name for a SQL
            statement based on it's sequence number.
            </summary>
            <param name="commandSequenceNumber">The sequence number of the
            currently executing SQL command within the overall scope of the
            present operation being performed.</param>
            <returns>Either the name of a stored procedure (if stored procedures
            are supported), or the templatized SQL command text for use in a
            dynamic SQL statement.</returns>
            <remarks>
            <p class="body">The caller of <b>GetCommandText</b> must perform any
            replacements of placeholders in the templatized text based on the
            binding members defined in a <b>ScheduleDataBinding</b> instance.
            Implementors of custom data providers can usually use <b>BindStatement</b>
            for this purpose.</p>
            <p class="body">Stored procedure names allow for no data binding replacements,
            please see the documentation for instructions on modifying and recompiling
            stored procedures to match your data model's naming conventions.</p>
            </remarks>
        </member>
        <member name="P:Infragistics.WebUI.Data.OperationContext.Count">
            <summary>
            Number of steps in the command sequence.
            </summary>
            <value>
            <p class="body">Returns the number of steps in the command sequence for
            the current WebSchedule database operation. Command sequence
            numbers greater than or equal to <strong>Count</strong> are
            invalid.</p>
            <p class="body">This property is read only. Adding steps to the command
            sequence is not supported.</p>
            </value>
            <remarks>
            <p class="body">An <strong>OperationContext</strong> represents
            a WebSchedule database operation, such as fetching resources or
            or updating activities. These operations may be comprised of
            more than one step. Use this property if you need to iterate
            over the steps in an operation.</p>
            <p class="note">If you pass a command sequence number to any
            methods of this <strong>OperationContext</strong> equal to or
            greater than the <strong>Count</strong> property indicates are
            present, then the other methods of <strong>OperationContext</strong>
            may throw an exception for receiving an argument out of range.
            </p>
            </remarks>
        </member>
        <member name="M:Infragistics.WebUI.Data.OperationContext.OperationScope.#ctor(System.String,System.Int32,Infragistics.WebUI.Data.OperationContext.CommandBag[])">
            <summary>
            Creates an <b>OperationScope</b> instance.
            </summary>
            <param name="operationName">Name of the operation.</param>
            <param name="minSchemaVersion">Minimum schema version compatible with this
            definition of the operation.</param>
            <param name="parameterLists">Parameter set for each database <b>Command</b>
            in sequence necessary for fulfilling the named operation.</param>
        </member>
        <member name="P:Infragistics.WebUI.Data.OperationContext.OperationScope.Operation">
            <summary>
            Operation name.
            </summary>
        </member>
        <member name="P:Infragistics.WebUI.Data.OperationContext.OperationScope.Count">
            <summary>
            Number of database commands having their own parameter set that are
            described by the current <b>OperationScope</b>.
            </summary>
        </member>
        <member name="P:Infragistics.WebUI.Data.OperationContext.OperationScope.SchemaVersion">
            <summary>
            Minimum schema version required for use of this definition for the
            operation.
            </summary>
            <remarks>
            <p class="body">If this definition doesn't support your schema version,
            try searching for an operation having the same name but a lower schema
            version value that may still be compatible.</p>
            </remarks>
        </member>
        <member name="P:Infragistics.WebUI.Data.OperationContext.OperationScope.Item(System.Int32)">
            <summary>
            Indexer. Accesses the parameter set corresponding to a specific command
            in sequence.
            </summary>
            <remarks>
            <p class="body">The <i>index</i> specified is the sequence number of the
            command, where sequence numbers start at zero (0).</p>
            </remarks>
        </member>
        <member name="M:Infragistics.WebUI.Data.OperationContext.CommandBag.#ctor(System.String,Infragistics.WebUI.Data.OperationContext.ParameterEntry[])">
            <summary>
            Creates a <b>CommandBag</b> instance.
            </summary>
            <param name="sqlTemplate">Template command text for dynamic SQL.</param>
            <param name="entries">List of parameters.</param>
        </member>
        <member name="M:Infragistics.WebUI.Data.OperationContext.CommandBag.#ctor(System.String,System.String,Infragistics.WebUI.Data.OperationContext.ParameterEntry[])">
            <summary>
            Creates a <b>CommandBag</b> instance supporting stored procedures.
            </summary>
            <param name="sqlTemplate">Template command text for dynamic SQL.</param>
            <param name="storedProcName">Name of the stored procedure.</param>
            <param name="entries">List of parameters.</param>
        </member>
        <member name="M:Infragistics.WebUI.Data.OperationContext.CommandBag.#ctor(System.String,Infragistics.WebUI.Data.OperationContext.ParameterEntry[],Infragistics.WebUI.Data.OperationContext.Dependency)">
            <summary>
            Creates a <b>CommandBag</b> instance on which later-sequenced
            <b>CommandBag</b> instances may have a dependency.
            </summary>
            <param name="sqlTemplate">Template command text for dynamic SQL.</param>
            <param name="entries">List of parameters.</param>
            <param name="dependency">Describes the dependency of a later-sequenced
            <b>CommandBag</b> on the single return value of this <b>CommandBag</b>,
            or null (Nothing in Visual Basic .NET) if there are no dependents.</param>
        </member>
        <member name="M:Infragistics.WebUI.Data.OperationContext.CommandBag.#ctor(System.String,System.String,Infragistics.WebUI.Data.OperationContext.ParameterEntry[],Infragistics.WebUI.Data.OperationContext.Dependency)">
            <summary>
            Creates a <b>CommandBag</b> instance supporting stored procedures and on
            which later-sequenced <b>CommandBag</b> instances may have a dependency.
            </summary>
            <param name="sqlTemplate">Template command text for dynamic SQL.</param>
            <param name="storedProcName">Name of the stored procedure.</param>
            <param name="entries">List of parameters.</param>
            <param name="dependency">Describes the dependency of a later-sequenced
            <b>CommandBag</b> on the single return value of this <b>CommandBag</b>,
            or null (Nothing in Visual Basic .NET) if there are no dependents.</param>
        </member>
        <member name="M:Infragistics.WebUI.Data.OperationContext.CommandBag.#ctor(Infragistics.WebUI.Data.OperationContext.ParameterEntry[])">
            <summary>
            Creates a <b>CommandBag</b> instance.
            </summary>
            <param name="entries">List of parameters.</param>
        </member>
        <member name="M:Infragistics.WebUI.Data.OperationContext.CommandBag.#ctor(Infragistics.WebUI.Data.OperationContext.ParameterEntry[],Infragistics.WebUI.Data.OperationContext.Dependency)">
            <summary>
            Creates a <b>CommandBag</b> instance on which later-sequenced
            <b>CommandBag</b> instances may have a dependency.
            </summary>
            <param name="entries">List of parameters.</param>
            <param name="dependency">Describes the dependency of a later-sequenced
            <b>CommandBag</b> on the single return value of this <b>CommandBag</b>,
            or null (Nothing in Visual Basic .NET) if there are no dependents.</param>
        </member>
        <member name="P:Infragistics.WebUI.Data.OperationContext.CommandBag.Count">
            <summary>
            Number of <see cref="T:Infragistics.WebUI.Data.OperationContext.ParameterEntry"/> definitions in the parameter set
            required by the current <b>Command</b>.
            </summary>
        </member>
        <member name="P:Infragistics.WebUI.Data.OperationContext.CommandBag.Item(System.Int32)">
            <summary>
            Indexer. Access the description of an individual database <b>Parameter</b>.
            </summary>
            <remarks>
            <p class="body">Frequently, this is adequate to create a complex enough
            <b>IDbDataParameter</b>-implementation for the database <b>Command</b>
            based on its underlying database platform. When it's insufficient,
            developers will supplement the essential information in <see cref="T:Infragistics.WebUI.Data.OperationContext.ParameterEntry"/>
            with their own in a subclass of <see cref="T:Infragistics.WebUI.Data.DataParameterSurrogate"/>, and
            then override the <b>CreateParameter</b> method on the <see cref="T:Infragistics.WebUI.Data.WebScheduleDbProvider"/>
            to return their subclass. This allows them to interject additional information
            as may be required for some database platforms.</p>
            </remarks>
        </member>
        <member name="P:Infragistics.WebUI.Data.OperationContext.CommandBag.HasDependency">
            <summary>
            Indicates whether the current database command is responsible for
            returning a single value for use by subsequent, dependent database
            commands.
            </summary>
            <remarks>
            <p class="body">Only query the <see cref="P:Infragistics.WebUI.Data.OperationContext.CommandBag.DependentSequenceNumber"/>
            and <see cref="P:Infragistics.WebUI.Data.OperationContext.CommandBag.DependentParameterName"/> properties when the current
            database command is marked as having a dependency (this property
            indicates true). Querying those properties for a database command
            having no dependency is an invalid operation.</p>
            </remarks>
        </member>
        <member name="P:Infragistics.WebUI.Data.OperationContext.CommandBag.DependentSequenceNumber">
            <summary>
            Sequence number identifying a dependent database command later in
            the current operation.
            </summary>
            <exception cref="T:System.InvalidOperationException">Thrown when
            <see cref="P:Infragistics.WebUI.Data.OperationContext.CommandBag.HasDependency"/> indicates this command has no dependents.
            </exception>
        </member>
        <member name="P:Infragistics.WebUI.Data.OperationContext.CommandBag.DependentParameterName">
            <summary>
            Parameter name in a dependent command to which the single return
            value of the current database command must bind it's value.
            </summary>
            <exception cref="T:System.InvalidOperationException">Thrown when
            <see cref="P:Infragistics.WebUI.Data.OperationContext.CommandBag.HasDependency"/> indicates this command has no dependents.
            </exception>
        </member>
        <member name="P:Infragistics.WebUI.Data.OperationContext.CommandBag.SqlTemplate">
            <summary>
            Template command text for dynamic SQL, or the SQL stored procedure name
            when supported.
            </summary>
            <value>The template text suitable for passing to <b>String</b>.<b>Format</b>, or
            the stored procedure name when stored procedures are used, or the empty string if
            no template was specified.</value>
            <remarks>
            <p class="body">When constructed, the <b>OperationContext</b> is responsible for
            setting <see cref="P:Infragistics.WebUI.Data.OperationContext.CommandBag.IsStoredProcedure"/> on the <b>CommandBag</b>s it uses based
            on the data provider setting for <b>UseStoredProcedures</b>.</p>
            </remarks>
        </member>
        <member name="P:Infragistics.WebUI.Data.OperationContext.CommandBag.IsStoredProcedure">
            <summary>
            Indicates whether the <b>CommandBag</b> describes dynamic SQL text, or
            the name of a parameterized stored procedure to call.
            </summary>
            <value>
            True if the <b>CommandBag</b> describes a stored procedure, false if it
            describes dynamic SQL.
            </value>
        </member>
        <member name="M:Infragistics.WebUI.Data.OperationContext.Dependency.#ctor(System.Int32,System.String)">
            <summary>
            Creates a new <b>Dependency</b> object.
            </summary>
            <param name="sequenceNum">Sequence number of the dependent command.</param>
            <param name="toParam">Parameter name to receive this command's return value in the dependent command.</param>
        </member>
        <member name="M:Infragistics.WebUI.Data.OperationContext.ParameterEntry.#ctor(System.String,System.Data.DbType,System.Data.ParameterDirection)">
            <summary>
            Creates a <b>ParameterEntry</b> instance.
            </summary>
            <param name="name">The parameter name.</param>
            <param name="type">The data type.</param>
            <param name="dir">The direction in which the parameter travels.</param>
        </member>
        <member name="M:Infragistics.WebUI.Data.OperationContext.ParameterEntry.#ctor(System.String,System.Data.DbType)">
            <summary>
            Creates a <b>ParameterEntry</b> instance for an input parameter.
            </summary>
            <param name="name">The parameter name.</param>
            <param name="type">The data type.</param>
        </member>
        <member name="M:Infragistics.WebUI.Data.OperationContext.ParameterEntry.#ctor(System.String)">
            <summary>
            Creates a <b>ParameterEntry</b> instance of string type for an input parameter.
            </summary>
            <param name="name">The parameter name.</param>
        </member>
        <member name="P:Infragistics.WebUI.Data.OperationContext.ParameterEntry.Name">
            <summary>
            Parameter name.
            </summary>
            <remarks>
            <p class="body">If the data provider doesn't support named parameters,
            then the name will not be as important as the ordinal position of the
            parameter.</p>
            </remarks>
        </member>
        <member name="P:Infragistics.WebUI.Data.OperationContext.ParameterEntry.DataType">
            <summary>
            Data type of the parameter.
            </summary>
            <remarks>
            <p class="body">In order to support the widest range of potential
            data sources, this data type will necessarily be the lowest common
            denominator supported by the majority of data sources.</p>
            </remarks>
        </member>
        <member name="P:Infragistics.WebUI.Data.OperationContext.ParameterEntry.Direction">
            <summary>
            Direction of the parameter.
            </summary>
        </member>
        <member name="T:Infragistics.WebUI.Data.OperationContext.ParameterEntry.SpecialRule">
            <summary>
            Special modifications to apply to parameter values when data binding.
            </summary>
        </member>
        <member name="F:Infragistics.WebUI.Data.OperationContext.ParameterEntry.SpecialRule.None">
            <summary>
            No special modifications to the data parameter are necessary.
            </summary>
        </member>
        <member name="F:Infragistics.WebUI.Data.OperationContext.ParameterEntry.SpecialRule.TreatNullAsMaxDate">
            <summary>
            Treat null incoming null values as outgoing <strong>DateTime</strong>.MaxValue values.
            </summary>
        </member>
        <member name="T:Infragistics.WebUI.Data.OperationContext.ParameterFactoryMethod">
            <summary>
            Exposes to the consumer the right to determine how <b>IDbDataParameter</b>
            implementations are created.
            </summary>
            <remarks>
            <p class="body">Ordinarily, the in-scope <b>IDbCommand</b> is used to instantiate
            database parameters. However, if the application overrides <b>CreateParameter</b>
            on the <b>WebScheduleDBProvider</b> because their application needs to extend the
            <b>DataParameterSurrogate</b> then it's necessary to allow the caller to create
            their own parameters.</p>
            </remarks>
        </member>
        <member name="T:Infragistics.WebUI.Data.SmartDataReader">
            <summary>
            Null handling data reader.
            </summary>
            <remarks>
            <p class="body"> Wraps OLE DB DataReader classes and implements <b>IDataReader</b> interface.</p>
            </remarks>
        </member>
        <member name="M:Infragistics.WebUI.Data.SmartDataReader.#ctor(System.Data.IDataReader)">
            <summary>
            Creates a <b>SmartDataReader</b> around another <b>IDataReader</b> implementation.
            </summary>
            <param name="iDataReader">An implementation of <b>IDataReader</b> that this <b>SmartDataReader</b>
            will add null-handling capabilities to.</param>
        </member>
        <member name="M:Infragistics.WebUI.Data.SmartDataReader.Close">
            <summary>
            Closes the <b>SmartDataReader</b>.
            </summary>
        </member>
        <member name="M:Infragistics.WebUI.Data.SmartDataReader.GetDecimal(System.Int32)">
            <summary>
            Gets a decimal value from a specified field.
            </summary>
            <param name="i">Zero-based index of the field.
            </param>
            <returns>The underlying decimal value from the
            encapsulated <b>IDataReader</b>, or the decimal
            value 0 if the <b>IDataReader</b> signals the
            return of a DBNull value.</returns>
        </member>
        <member name="M:Infragistics.WebUI.Data.SmartDataReader.GetSchemaTable">
            <summary>
            Gets the <b>DataTable</b> representing the schema for the read
            results.
            </summary>
            <returns>An instance of <b>DataTable</b> with appropriately-typed
            <b>DataColumn</b>s added to correspond to the results in the row
            read from the encapsulated <b>IDataReader</b> implementation.</returns>
        </member>
        <member name="M:Infragistics.WebUI.Data.SmartDataReader.Dispose">
            <summary>
            Disposes of any resources held by the encapsulated <b>IDataReader</b>
            implementation.
            </summary>
        </member>
        <member name="M:Infragistics.WebUI.Data.SmartDataReader.GetDouble(System.Int32)">
            <summary>
            Gets a double value from a specified field.
            </summary>
            <param name="i">Zero-based index of the field.
            </param>
            <returns>The underlying double value from the
            encapsulated <b>IDataReader</b>, or the double
            value 0.0 if the <b>IDataReader</b> signals the
            return of a DBNull value.</returns>
        </member>
        <member name="M:Infragistics.WebUI.Data.SmartDataReader.GetFieldType(System.Int32)">
            <summary>
            Gets the field type for a specified field.
            </summary>
            <param name="i">A zero-based field index.</param>
            <returns>The field's data type as a CLR <b>Type</b> instance.</returns>
        </member>
        <member name="M:Infragistics.WebUI.Data.SmartDataReader.NextResult">
            <summary>
            Gets the next result from the encapsulated <b>IDataReader</b>
            implementation.
            </summary>
            <returns>False if there are no more results to be read.</returns>
        </member>
        <member name="M:Infragistics.WebUI.Data.SmartDataReader.GetDateTime(System.Int32)">
            <summary>
            Gets a <b>DateTime</b> value from a specified field.
            </summary>
            <param name="i">Zero-based index of the field.
            </param>
            <returns>The underlying <b>DateTime</b> value from the
            encapsulated <b>IDataReader</b>, or the <b>DateTime</b>
            value <em>MinValue</em> if the <b>IDataReader</b> signals the
            return of a DBNull value.</returns>
        </member>
        <member name="M:Infragistics.WebUI.Data.SmartDataReader.GetSmartDate(System.Int32)">
            <summary>
            Gets a <b>SmartDate</b> value from a specified field.
            </summary>
            <param name="i">Zero-based index of the field.
            </param>
            <returns>The underlying <b>SmartDate</b> value from the
            encapsulated <b>IDataReader</b>, or the <b>SmartDate</b>
            value 1/1/1 if the <b>IDataReader</b> signals the
            return of a DBNull value.</returns>
        </member>
        <member name="M:Infragistics.WebUI.Data.SmartDataReader.GetSmartDate(System.Int32,System.Boolean)">
            <summary>
            Gets a <b>SmartDate</b> value from a specified field.
            </summary>
            <param name="i">Zero-based index of the field.</param>
            <param name="minIsEmpty">Not used.</param>
            <returns>The underlying <b>SmartDate</b> value from the
            encapsulated <b>IDataReader</b>, or the <b>SmartDate</b>
            value 1/1/1 if the <b>IDataReader</b> signals the
            return of a DBNull value.</returns>
        </member>
        <member name="M:Infragistics.WebUI.Data.SmartDataReader.GetDataTypeName(System.Int32)">
            <summary>
            Gets the data type name of the specified field.
            </summary>
            <param name="i">A zero-based field index.</param>
            <returns>The data type name as a string.</returns>
        </member>
        <member name="M:Infragistics.WebUI.Data.SmartDataReader.IsDBNull(System.Int32)">
            <summary>
            Indicates whether the specified field contains the <b>DBNull</b> value.
            </summary>
            <param name="i">A zero-based field index.</param>
            <returns>True if the field at index <em>i</em> has the <b>DBNull</b> value.</returns>
        </member>
        <member name="M:Infragistics.WebUI.Data.SmartDataReader.GetFloat(System.Int32)">
            <summary>
            Gets a floating-point value from a specified field.
            </summary>
            <param name="i">Zero-based index of the field.
            </param>
            <returns>The underlying floating-point value from the
            encapsulated <b>IDataReader</b>, or the floating-point
            value 0.0 if the <b>IDataReader</b> signals the
            return of a DBNull value.</returns>
        </member>
        <member name="M:Infragistics.WebUI.Data.SmartDataReader.GetString(System.Int32)">
            <summary>
            Gets a string value from a specified field.
            </summary>
            <param name="i">Zero-based index of the field.
            </param>
            <returns>The underlying string value from the
            encapsulated <b>IDataReader</b>, or the zero-length
            string (empty) value if the <b>IDataReader</b> signals the
            return of a DBNull value.</returns>
        </member>
        <member name="M:Infragistics.WebUI.Data.SmartDataReader.Read">
            <summary>
            Reads the next row.
            </summary>
            <returns>False if there are no further rows to read.</returns>
        </member>
        <member name="M:Infragistics.WebUI.Data.SmartDataReader.GetBoolean(System.Int32)">
            <summary>
            Gets a Boolean value from a specified field.
            </summary>
            <param name="i">Zero-based index of the field.
            </param>
            <returns>The underlying Boolean value from the
            encapsulated <b>IDataReader</b>, or the Boolean
            value 'False' if the <b>IDataReader</b> signals
            the return of a DBNull value.</returns>
        </member>
        <member name="M:Infragistics.WebUI.Data.SmartDataReader.GetByte(System.Int32)">
            <summary>
            Gets an octet value from a specified field.
            </summary>
            <param name="i">Zero-based index of the field.
            </param>
            <returns>The underlying octet value from the
            encapsulated <b>IDataReader</b>, or the octet
            with all-bits zero (0) if the <b>IDataReader</b>
            signals the return of a DBNull value.</returns>
        </member>
        <member name="M:Infragistics.WebUI.Data.SmartDataReader.GetBytes(System.Int32,System.Int64,System.Byte[],System.Int32,System.Int32)">
            <summary>
            Not for public use.
            </summary>
            <param name="i">Zero-based index of the field.</param>
            <param name="fieldOffset">The offset within the fields of the current result
            at which to begin reading.</param>
            <param name="buffer">A preallocated octet array to receive the data read.
            </param>
            <param name="bufferoffset">The offset within <em>buffer</em> at which to start
            storing read octets.</param>
            <param name="length">The length of octets to read into <em>bufferoffset</em>.
            The <em>buffer</em> must be allocated with a buffer size at least as
            great as <em>length</em> + <em>bufferoffset</em> or the behavior of this
            method is undefined.</param>
            <returns>Returns the value zero.</returns>
        </member>
        <member name="M:Infragistics.WebUI.Data.SmartDataReader.GetValue(System.Int32)">
            <summary>
            Gets the value from a specified field and wraps it in a variant object.
            </summary>
            <param name="i">A zero-based field index.</param>
            <returns>The value of indeterminate type wrapped in an <b>Object</b>.</returns>
            <remarks>
            <p class="body">When a DBNull value is read for the specified field,
            the returned object will contain an empty string.</p>
            </remarks>
        </member>
        <member name="M:Infragistics.WebUI.Data.SmartDataReader.GetValues(System.Object[])">
            <summary>
            Gets a sequence of values from the fields of the current record.
            </summary>
            <param name="values">An array in which to receive values.</param>
            <returns>The number of values.</returns>
        </member>
        <member name="M:Infragistics.WebUI.Data.SmartDataReader.GetChar(System.Int32)">
            <summary>
            Gets a Unicode character value from a specified field.
            </summary>
            <param name="i">Zero-based index of the field.
            </param>
            <returns>The underlying Unicode character value from the
            encapsulated <b>IDataReader</b>, or the Unicode character
            value corresponding to NUL (0) if the <b>IDataReader</b> 
            signals the return of a DBNull value.</returns>
        </member>
        <member name="M:Infragistics.WebUI.Data.SmartDataReader.GetName(System.Int32)">
            <summary>
            Gets the name of the specified field.
            </summary>
            <param name="i">A zero-based index identifying the
            field to retrieve the name of.</param>
            <returns>The field name of field number <em>i</em>
            within the records read of the result set, or the
            empty string if the current field number <em>i</em>
            has no value (<em>i.e.,</em> it's value is DBNull).
            </returns>
        </member>
        <member name="M:Infragistics.WebUI.Data.SmartDataReader.GetChars(System.Int32,System.Int64,System.Char[],System.Int32,System.Int32)">
            <summary>
            Not for public use.
            </summary>
            <param name="i">Zero-based index of the field.</param>
            <param name="fieldoffset">The offset within the fields of the current result
            at which to begin reading.</param>
            <param name="buffer">A preallocated character array to receive the data read.
            </param>
            <param name="bufferoffset">The offset within <em>buffer</em> at which to start
            storing read characters.</param>
            <param name="length">The length of characters to read into <em>bufferoffset</em>.
            The <em>buffer</em> must be allocated with a buffer size at least as
            great as <em>length</em> + <em>bufferoffset</em> or the behavior of this
            method is undefined.</param>
            <returns>Returns the value zero.</returns>
        </member>
        <member name="M:Infragistics.WebUI.Data.SmartDataReader.GetData(System.Int32)">
            <summary>
            Not for public use.
            </summary>
            <param name="i">Zero-based index of a field.</param>
            <returns>Always returns null (Nothing in Visual Basic .NET).</returns>
        </member>
        <member name="M:Infragistics.WebUI.Data.SmartDataReader.GetGuid(System.Int32)">
            <summary>
            Gets a GUID value from the specified field.
            </summary>
            <param name="i">A zero-based field index.</param>
            <returns>A GUID value read from that field, or the
            <em>Empty</em> GUID if the field contained the value
            of DBNull.</returns>
        </member>
        <member name="M:Infragistics.WebUI.Data.SmartDataReader.GetOrdinal(System.String)">
            <summary>
            Gets the zero-based field index corresponding to the
            field with the specified name.
            </summary>
            <param name="name">A name that must identify one of
            the fields from the read record.</param>
            <returns>The zero-based field index corresponding to
            a field with a name matching the <em>name</em> argument.
            </returns>
        </member>
        <member name="M:Infragistics.WebUI.Data.SmartDataReader.GetInt16(System.Int32)">
            <summary>
            Gets a short integer value from a specified field.
            </summary>
            <param name="i">Zero-based index of the field.
            </param>
            <returns>The underlying short integer value from the
            encapsulated <b>IDataReader</b>, or the short integer
            value 0 if the <b>IDataReader</b> signals
            the return of a DBNull value.</returns>
        </member>
        <member name="M:Infragistics.WebUI.Data.SmartDataReader.GetInt32(System.Int32)">
            <summary>
            Gets an integer value from a specified field.
            </summary>
            <param name="i">Zero-based index of the field.
            </param>
            <returns>The underlying integer value from the
            encapsulated <b>IDataReader</b>, or the integer
            value 0 if the <b>IDataReader</b> signals
            the return of a DBNull value.</returns>
        </member>
        <member name="M:Infragistics.WebUI.Data.SmartDataReader.GetInt64(System.Int32)">
            <summary>
            Gets a long integer value from a specified field.
            </summary>
            <param name="i">Zero-based index of the field.
            </param>
            <returns>The underlying long integer value from the
            encapsulated <b>IDataReader</b>, or the long integer
            value 0 if the <b>IDataReader</b> signals
            the return of a DBNull value.</returns>
        </member>
        <member name="P:Infragistics.WebUI.Data.SmartDataReader.Depth">
            <summary>
            Gets the depth for this <b>SmartDataReader</b>.
            </summary>
            <value>Current depth from the encapsulated <b>IDataReader</b>
            implementation.</value>
        </member>
        <member name="P:Infragistics.WebUI.Data.SmartDataReader.FieldCount">
            <summary>
            Gets the field count for this <b>SmartDataReader</b>.
            </summary>
            <value>The number of fields per records.</value>
        </member>
        <member name="P:Infragistics.WebUI.Data.SmartDataReader.IsClosed">
            <summary>
            Indicates whether the <b>SmartDataReader</b> has been
            closed, such as by the <see cref="M:Infragistics.WebUI.Data.SmartDataReader.Close"/> method.
            </summary>
            <value>True if the underlying <b>IDataReader</b> implementation
            is closed.</value>
        </member>
        <member name="P:Infragistics.WebUI.Data.SmartDataReader.RecordsAffected">
            <summary>
            Gets the count of records affected.
            </summary>
            <value>The number of records affected.</value>
        </member>
        <member name="P:Infragistics.WebUI.Data.SmartDataReader.Item(System.String)">
            <summary>
            Indexer retrieving the variant <b>Object</b> value
            for the named field.
            </summary>
            <param name="name">The name of a field within the
            record.</param>
            <returns>The value of the field having <em>name</em>
            within the current record.</returns>
            <remarks>
            <p class="body">This method does not perform any filtering
            for DBNull values on the retrieved value.</p>
            </remarks>
        </member>
        <member name="P:Infragistics.WebUI.Data.SmartDataReader.Item(System.Int32)">
            <summary>
            Indexer retrieving the variant <b>Object</b> value
            for the numbered field.
            </summary>
            <param name="i">The zero-based index of a field
            within the record.</param>
            <returns>The value of the field having zero-based
            index of <em>i</em> within the current record.</returns>
            <remarks>
            <p class="body">This method does not perform any filtering
            for DBNull values on the retrieved value.</p>
            </remarks>
        </member>
        <member name="M:Infragistics.WebUI.Data.LocalizedCategoryAttribute.GetLocalizedString(System.String)">
            <summary>
            Returns the localized category name
            </summary>
            <param name="value">Name of the category to retreive</param>
            <returns>The localized string value</returns>
        </member>
        <member name="T:Infragistics.WebUI.Data.WebScheduleDataBindingAttribute">
            <summary>
            Attribute marking WebSchedule <b>DataBinding</b> properties specifying
            binding members to be bound against from instances of WebSchedule Object
            Model types, such as <b>Activity</b> and <b>Resource</b>.
            </summary>
            <remarks>
            <p class="body">Applies to properties with names ending in the suffix,
            "-Member," only.</p>
            </remarks>
        </member>
        <member name="M:Infragistics.WebUI.Data.WebScheduleDataBindingAttribute.#ctor(System.Type,System.String)">
            <summary>
            Creates a <b>WebScheduleDataBindingAttribute</b> for a type and property name
            of the WebSchedule object model.
            </summary>
            <param name="objectModelType">The Common Language Runtime (CLR) <b>Type</b>
            of the data-bindable object.</param>
            <param name="objectModelPropertyName">The simple property name (compound
            properties are not supported) of a data-bindable member.</param>
            <remarks>
            <p class="body">This constructor assumes the CLR <b>Type</b> given for the <em>objectModelType</em>
            argument can be directly correlated to a data type in the underlying data access layer. If it
            does not convert automatically, then you need to create a <b>WebScheduleDataBindingAttribute</b>
            using the accompanying constructor overload that accepts a different data type.</p>
            </remarks>
        </member>
        <member name="M:Infragistics.WebUI.Data.WebScheduleDataBindingAttribute.#ctor(System.Type,System.String,System.Type)">
            <summary>
            Creates a <b>WebScheduleDataBindingAttribute</b> for a type and property name
            of the WebSchedule object model.
            </summary>
            <param name="objectModelType">The Common Language Runtime (CLR) <b>Type</b>
            of the data-bindable object.</param>
            <param name="objectModelPropertyName">The simple property name (compound
            properties are not supported) of a data-bindable member.</param>
            <param name="dataModelColumnType">The Common Language Runtime (CLR) <b>Type</b>
            that will be mapped to a data type supported by the underlying data access
            layer.</param>
        </member>
        <member name="M:Infragistics.WebUI.Data.WebScheduleDataBindingAttribute.ReAlignUnderlyingType(System.Type)">
            <summary>
            Changes the underlying object model <b>Type</b>.
            </summary>
            <param name="objectModelTypeResolved"></param>
            <remarks>
            <p class="body">Must be called before data-binding (reading) using binding
            member properties that have been inherited from a base <b>ScheduleDataBinding</b>
            class, but when those properties are not being inherited from a base object model
            class. For example, both <b>Resource</b> and <b>Appointment</b> have a common
            property named <b>Key</b>.</p>
            </remarks>
        </member>
        <member name="M:Infragistics.WebUI.Data.WebScheduleDataBindingAttribute.Bind(System.Object,System.Object)">
            <summary>
            Binds a fetched data value to a public property on a data object.
            </summary>
            <param name="instance">An instance of a data object undergoing
            initialization through data binding.</param>
            <param name="propertyValue">A property value fetched from the
            data source that will be assigned to <see cref="P:Infragistics.WebUI.Data.WebScheduleDataBindingAttribute.PropertyName"/>
            on <i>instance</i>.</param>
            <remarks>
            <p class="body">At run-time, the data binding infrastructure will
            enumerate bindable properties marked by this custom attribute, and
            use the <b>Bind</b> method of this custom attribute to update
            an uninitialized instance of a bound data object.</p>
            <seealso cref="P:Infragistics.WebUI.Data.WebScheduleDataBindingAttribute.ModelType"/>
            <seealso cref="P:Infragistics.WebUI.Data.WebScheduleDataBindingAttribute.PropertyName"/>
            </remarks>
            <exception cref="T:System.ArgumentException">Thrown when the
            <b>ScheduleDataBindingAttribute</b> failed to successfully
            initialize. This is caused by a conflict between the
            <b>ModelType</b> and <b>PropertyName</b> (<i>i.e.</i>, the
            instance type identified by <b>ModelType</b> and that was
            passed as a <b>Type</b> in the attribute declaration on
            the attribute's target, does not contain a property named
            <b>PropertyName</b>).
            </exception>
        </member>
        <member name="P:Infragistics.WebUI.Data.WebScheduleDataBindingAttribute.PropertyType">
            <summary>
            The <b>Type</b> on the property named by <see cref="P:Infragistics.WebUI.Data.WebScheduleDataBindingAttribute.PropertyName"/>.
            </summary>
        </member>
        <member name="P:Infragistics.WebUI.Data.WebScheduleDataBindingAttribute.DataType">
            <summary>
            The <b>Type</b> within the data source that's furnishing a bound
            value to <see cref="P:Infragistics.WebUI.Data.WebScheduleDataBindingAttribute.PropertyName"/> during a Fetch operation.
            </summary>
        </member>
        <member name="P:Infragistics.WebUI.Data.WebScheduleDataBindingAttribute.ModelType">
            <summary>
            The <b>Type</b> of the WebSchedule object that is being bound
            during a Fetch operation.
            </summary>
            <remarks>
            <p class="body">This <b>Type</b> must contain a public instance
            property matching <see cref="P:Infragistics.WebUI.Data.WebScheduleDataBindingAttribute.PropertyName"/>, otherwise the
            <b>ScheduleDataBindingAttribute</b> may fail to properly initialize
            itself. When this happens, calls to <see cref="M:Infragistics.WebUI.Data.WebScheduleDataBindingAttribute.Bind(System.Object,System.Object)"/> at run-time
            may throw an <b>ArgumentException</b>.</p>
            </remarks>
        </member>
        <member name="P:Infragistics.WebUI.Data.WebScheduleDataBindingAttribute.PropertyName">
            <summary>
            The name of the property on instances of <see cref="P:Infragistics.WebUI.Data.WebScheduleDataBindingAttribute.ModelType"/> that
            is being bound.
            </summary>
        </member>
        <member name="T:Infragistics.WebUI.Data.WebScheduleDataProviderBase">
            <summary>
            Abstract base class for the <see cref="T:Infragistics.WebUI.Data.WebScheduleDataProviderBase"/> classes.
            </summary>
            <remarks>
            <p class="body">This base class provides support for cookie-based snooze
            persistence and a <see cref="P:Infragistics.WebUI.Data.WebScheduleDataProviderBase.WebScheduleInfo"/> property bindable at design-time
            through the ID of another <b>WebScheduleInfo</b> instance on the same page (or
            within the same container in the case of a user control).</p>
            </remarks>
        </member>
        <member name="F:Infragistics.WebUI.Data.WebScheduleDataProviderBase.WebScheduleInfoIDId">
            <summary>
            Identifier for the <see cref="P:Infragistics.WebUI.Data.WebScheduleDataProviderBase.WebScheduleInfoID"/> property requiring
            persistence of it's single value state across postbacks.
            </summary>
        </member>
        <member name="M:Infragistics.WebUI.Data.WebScheduleDataProviderBase.#ctor">
            <summary>
            Constructor provided for inheritors' use only.
            </summary>
        </member>
        <member name="M:Infragistics.WebUI.Data.WebScheduleDataProviderBase.CreateSubObject(System.String)">
            <summary>
            Rehydrates the sub-objects when loading viewstate.
            </summary>
            <param name="Id">An identifier specifying the property.</param>
            <returns>An <b>IStateManager</b> implementation for deserializing
            the object from viewstate.</returns>
        </member>
        <member name="M:Infragistics.WebUI.Data.WebScheduleDataProviderBase.OnInit(System.EventArgs)">
            <summary>
            Performs processing required when the control enters the <b>Init</b> stage of
            the ASP.NET page lifecycle.
            </summary>
            <param name="e">Event arguments.</param>
            <remarks>
            <p class="body">Inheritors may override the base class implementation of <b>OnInit</b>
            to perform their own processing during the <b>Init</b> stage of the ASP.NET page
            lifecycle which happens after initializing property values from the .ASPX document,
            but before the loading of viewstate (and potentially before the initialization of
            other elements on the page has completed). However, any overridden implementation of
            <b>OnInit</b> must call the base class implementation.</p>
            <p class="body">The base class implementation attempts to ensure that the <b>WebScheduleInfo</b>
            identified by <see cref="P:Infragistics.WebUI.Data.WebScheduleDataProviderBase.WebScheduleInfoID"/> exists and can be connected to this instance
            of a <b>WebScheduleDataProviderBase</b>. It may also perform additional processing.</p>
            </remarks>
        </member>
        <member name="M:Infragistics.WebUI.Data.WebScheduleDataProviderBase.GetTimestampFunction">
            <summary>
            This method supports the internal Infragistics control infrastructure.
            </summary>
            <returns>
            The implementation-specific timestamp function used to replace
            timestamp function placeholders within a command template when
            binding, or the empty string if there is no timestamp support.
            </returns>
            <remarks>
            <p class="body">This method supports the internal Infragistics
            control infrastructure, and is not supported for application
            use. Inheritors must not depend on overriding this method
            because it is subject to change.</p>
            </remarks>
        </member>
        <member name="M:Infragistics.WebUI.Data.WebScheduleDataProviderBase.MapToObjectName(System.String)">
            <summary>
            Maps the name of a binding member property to the corresponding
            name of a WebSchedule object model property.
            </summary>
            <param name="bindingPropertyName">The property name of a binding
            member on an affiliated <b>WebScheduleDataBinding</b> subclass.
            </param>
            <returns>
            The name in <i>bindingPropertyName</i> with the "Member" suffix
            removed.
            </returns>
            <remarks>
            <p class="body">Inheritors overriding this method must also
            override <see cref="M:Infragistics.WebUI.Data.WebScheduleDataProviderBase.MapToBindingName(System.String)"/> to ensure these implementations
            remain symmetrical.</p>
            </remarks>
            <exception cref="T:System.ArgumentException">Thrown when <i>bindingPropertyName</i>
            is less than seven characters long. The <i>bindingPropertyName</i> must be at
            least seven characters long if it is to become a non-empty string after the six
            character long string, "Member," is removed from it. The shortest possible object
            property name is one character.</exception>
            <exception cref="T:System.NullReferenceException">Thrown when <i>bindingPropertyName</i>
            is null (Nothing in Visual Basic .NET). Null binding member names have no meaningful
            mapping into the value space of object property names.</exception>
        </member>
        <member name="M:Infragistics.WebUI.Data.WebScheduleDataProviderBase.MapToBindingName(System.String)">
            <summary>
            Maps the name of a WebSchedule object model property to the corresponding
            data binding property name.
            </summary>
            <param name="objectPropertyName">The property name on a WebSchedule
            data object.</param>
            <returns>
            The name in <i>objectPropertyName</i> with the "Member" suffix
            appended onto the end.
            </returns>
            <remarks>
            <p class="body">Inheritors overriding this method must also
            override <see cref="M:Infragistics.WebUI.Data.WebScheduleDataProviderBase.MapToObjectName(System.String)"/> to ensure these implementations
            remain symmetrical.</p>
            </remarks>
        </member>
        <member name="M:Infragistics.WebUI.Data.WebScheduleDataProviderBase.RegisterDataBindings(Infragistics.WebUI.WebSchedule.DataContext)">
            <summary>
            Called before processing an operation to register any outstanding <b>ScheduleDataBinding</b>
            objects required.
            </summary>
            <param name="context">A <b>DataContext</b> describing the operation being performed.
            It is the determining factor in the <b>ScheduleDataBinding</b> instances that need to be
            registered to successfully complete the operation.</param>
            <remarks>
            <p class="body">Inheritors may override this method to register their own <b>ScheduleDataBinding</b>
            instances, either in addition to, or as a replacement of, those added by the base class implementation.
            By default, the base class implementation adds one or both of <b>AppointmentBinding</b> and/or
            <b>ResourceBinding</b> depending on the <i>context</i> and needs of the operation specified.</p>
            <p class="body">After data bindings have been added for the current operation, a check is
            performed to ensure that none of them have empty or null <b>DataKeyMember</b> settings.</p>
            </remarks>
            <exception cref="T:Infragistics.WebUI.Data.DataProviderException">Thrown when the <b>DataKeyMember</b>
            on any registered <b>ScheduleDataBinding</b> has a blank or null (Nothing in Visual Basic .NET)
            setting.</exception>
        </member>
        <member name="M:Infragistics.WebUI.Data.WebScheduleDataProviderBase.ShouldSerializeAppointmentBinding">
            <summary>
            Check if Appointment binding has data.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Infragistics.WebUI.Data.WebScheduleDataProviderBase.ResetAppointmentBinding">
            <summary>Clears the Appointment binding.</summary>
        </member>
        <member name="M:Infragistics.WebUI.Data.WebScheduleDataProviderBase.InitializeAppointmentBindings(Infragistics.WebUI.Data.AppointmentBinding)">
            <summary>
            Initializes appointment bindings at start-up.
            </summary>
            <param name="defaultBinding">Default <b>AppointmentBinding</b> pre-initialized
            with default binding member property values.</param>
            <returns>An initialized <b>AppointmentBinding</b> object; inheritors may replace
            the <em>defaultBinding</em> with their own custom subclass.</returns>
            <remarks>
            <p class="body">If inheritors override this method to supply a custom subclass
            of <see cref="T:Infragistics.WebUI.Data.AppointmentBinding">AppointmentBinding</see>,
            then they must not access any <b>WebScheduleInfo</b> properties. Initialization
            may take place very early in the ASP.NET page lifecycle, and other WebSchedule
            controls may not be accessible. Premature access can cause the <b>WebScheduleInfo</b>
            control to prevent the data provider from connecting to it later on.</p>
            <p class="body">Inheritors subclassing a <b>AppointmentBinding</b> can handle
            this method to have their subclass appear in the Properties window at 
            design-time through the <see cref="!:AppointmentBindings"></see> property.
            </p>
            <p class="body">If you handle this method, overriding the <see cref="M:Infragistics.WebUI.Data.WebScheduleDataProviderBase.RegisterDataBindings(Infragistics.WebUI.WebSchedule.DataContext)"></see>
            method becomes unnecessary. The data provider automatically registers <b>AppointmentBindings</b>
            with it's data bindings collection during relevant operations.</p>
            </remarks>
        </member>
        <member name="M:Infragistics.WebUI.Data.WebScheduleDataProviderBase.ShouldSerializeResourceBinding">
            <summary>
            Check if Resource binding has data.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Infragistics.WebUI.Data.WebScheduleDataProviderBase.ResetResourceBinding">
            <summary>Clears the Resource binding.</summary>
        </member>
        <member name="M:Infragistics.WebUI.Data.WebScheduleDataProviderBase.InitializeResourceBindings(Infragistics.WebUI.Data.ResourceBinding)">
            <summary>
            Initializes resource bindings at start-up.
            </summary>
            <param name="defaultBinding">Default <b>ResourceBinding</b> pre-initialized
            with default binding member property values.</param>
            <returns>An initialized <b>ResourceBinding</b> object; inheritors may replace
            the <em>defaultBinding</em> with their own custom subclass.</returns>
            <remarks>
            <p class="body">If inheritors override this method to supply a custom subclass
            of <see cref="T:Infragistics.WebUI.Data.ResourceBinding">ResourceBinding</see>,
            then they must not access any <b>WebScheduleInfo</b> properties. Initialization
            may take place very early in the ASP.NET page lifecycle, and other WebSchedule
            controls may not be accessible. Premature access can cause the <b>WebScheduleInfo</b>
            control to prevent the data provider from connecting to it later on.</p>
            <p class="body">Inheritors subclassing a <b>ResourceBinding</b> can handle
            this method to have their subclass appear in the Properties window at 
            design-time through the <see cref="!:ResourceBindings"></see> property.
            </p>
            <p class="body">If you handle this method, overriding the <see cref="M:Infragistics.WebUI.Data.WebScheduleDataProviderBase.RegisterDataBindings(Infragistics.WebUI.WebSchedule.DataContext)"></see>
            method becomes unnecessary. The data provider automatically registers <b>ResourceBindings</b>
            with it's data bindings collection during relevant operations.</p>
            </remarks>
        </member>
        <member name="M:Infragistics.WebUI.Data.WebScheduleDataProviderBase.ShouldSerializeRecurrenceBinding">
            <summary>
            Check if Recurrence binding has data.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Infragistics.WebUI.Data.WebScheduleDataProviderBase.ResetRecurrenceBinding">
            <summary>Clears the Recurrence binding.</summary>
        </member>
        <member name="M:Infragistics.WebUI.Data.WebScheduleDataProviderBase.InitializeRecurrenceBindings(Infragistics.WebUI.Data.RecurrenceBinding)">
            <summary>
            Initializes recurrence bindings at start-up.
            </summary>
            <param name="defaultBinding">Default <b>RecurrenceBinding</b> pre-initialized
            with default binding member property values.</param>
            <returns>An initialized <b>RecurrenceBinding</b> object; inheritors may replace
            the <em>defaultBinding</em> with their own custom subclass.</returns>
            <remarks>
            <p class="body">If inheritors override this method to supply a custom subclass
            of <see cref="T:Infragistics.WebUI.Data.RecurrenceBinding">RecurrenceBinding</see>,
            then they must not access any <b>WebScheduleInfo</b> properties. Initialization
            may take place very early in the ASP.NET page lifecycle, and other WebSchedule
            controls may not be accessible. Premature access can cause the <b>WebScheduleInfo</b>
            control to prevent the data provider from connecting to it later on.</p>
            <p class="body">Inheritors subclassing a <b>RecurrenceBinding</b> can handle
            this method to have their subclass appear in the Properties window at 
            design-time through the <see cref="!:RecurrenceBindings"></see> property.
            </p>
            <p class="body">If you handle this method, overriding the <see cref="M:Infragistics.WebUI.Data.WebScheduleDataProviderBase.RegisterDataBindings(Infragistics.WebUI.WebSchedule.DataContext)"></see>
            method becomes unnecessary. The data provider automatically registers <b>RecurrenceBindings</b>
            with it's data bindings collection during relevant operations.</p>
            </remarks>
        </member>
        <member name="M:Infragistics.WebUI.Data.WebScheduleDataProviderBase.ShouldSerializeVarianceBinding">
            <summary>
            Check if Variance binding has data.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Infragistics.WebUI.Data.WebScheduleDataProviderBase.ResetVarianceBinding">
            <summary>Clears the Variance binding.</summary>
        </member>
        <member name="M:Infragistics.WebUI.Data.WebScheduleDataProviderBase.InitializeVarianceBindings(Infragistics.WebUI.Data.VarianceBinding)">
            <summary>
            Initializes variance bindings at start-up.
            </summary>
            <param name="defaultBinding">Default <b>VarianceBinding</b> pre-initialized
            with default binding member property values.</param>
            <returns>An initialized <b>VarianceBinding</b> object; inheritors may replace
            the <em>defaultBinding</em> with their own custom subclass.</returns>
            <remarks>
            <p class="body">If inheritors override this method to supply a custom subclass
            of <see cref="T:Infragistics.WebUI.Data.VarianceBinding">VarianceBinding</see>,
            then they must not access any <b>WebScheduleInfo</b> properties. Initialization
            may take place very early in the ASP.NET page lifecycle, and other WebSchedule
            controls may not be accessible. Premature access can cause the <b>WebScheduleInfo</b>
            control to prevent the data provider from connecting to it later on.</p>
            <p class="body">Inheritors subclassing a <b>VarianceBinding</b> can handle
            this method to have their subclass appear in the Properties window at 
            design-time through the <see cref="!:VarianceBindings"></see> property.
            </p>
            <p class="body">If you handle this method, overriding the <see cref="M:Infragistics.WebUI.Data.WebScheduleDataProviderBase.RegisterDataBindings(Infragistics.WebUI.WebSchedule.DataContext)"></see>
            method becomes unnecessary. The data provider automatically registers <b>VarianceBindings</b>
            with it's data bindings collection during relevant operations.</p>
            </remarks>
        </member>
        <member name="M:Infragistics.WebUI.Data.WebScheduleDataProviderBase.IsEmptyBinding(System.String)">
            <summary>
            Indicates whether a binding member of the <b>ScheduleDataBinding</b> class is empty
            or not set.
            </summary>
            <param name="bindingMember">Name of a binding member in the data model to
            be associated with a corresponding property within the WebSchedule object
            model.</param>
            <returns>True when the binding member is empty or not set (these conditions
            are indistinguishable, but should be processed in the same manner by using
            a default binding member); otherwise False indicating the customized binding
            member should be used.</returns>
            <remarks>
            <p class="body">Inheritors can use this function to simplify their implementations
            of <b>IFetch</b> and <b>IUpdate</b> to behave in the conventional manner when
            data bindings are (or are not) assigned values.</p>
            </remarks>
        </member>
        <member name="M:Infragistics.WebUI.Data.WebScheduleDataProviderBase.BindStatement(Infragistics.WebUI.Data.OperationContext,System.Int32)">
            <summary>
            Binds placeholders in an arbitrary query statement to replacement values specified
            by the <see cref="T:Infragistics.WebUI.Data.DataBindingCollection"/> for the current fetch/update operation.
            </summary>
            <param name="context">An operation context that defines the template text for the
            query statement and any placeholders appearing in curly braces.</param>
            <param name="commandSequenceNumber">A nonnegative number identifying which step
            in a multi-step <em>context</em> is that statement to bind against. The calling
            logic will normally loop through the steps sequentially, incrementing a counter
            running each statement necessary to fulfill an operation (fetch or update).
            </param>
            <returns>A query statement </returns>
            <remarks>
            <p class="body">The query language of statements bound by <b>BindStatement</b> is
            meant to be independent of data source. Therefore, it can be used to bind against
            SQL queries, XPath expressions, or LINQ statements. One requirement is that the
            <b>OperationContext</b> provide the template text with placeholders matching the
            names of members on collected <b>ScheduleDataBinding</b> objects, which will be
            replaced by calling this method.</p>
            <p class="body">This method has no effect on command statements that are the names
            of stored procedures. This dynamic data binding facility does support data providers
            using stored procedures (you must alter the stored procedure and rebuild to take
            advantage of different field names.)</p>
            </remarks>
        </member>
        <member name="M:Infragistics.WebUI.Data.WebScheduleDataProviderBase.FilterStatement(System.String)">
            <summary>
            Allows custom data providers to make modifications to the template
            query processed by <strong>BindStatement</strong>.
            </summary>
            <param name="templateQuery">A templatized query containing raw
            placeholders prior to binding against the <strong>DataBindingsCollection</strong>.
            </param>
            <returns>The <em>templateQuery</em>, possibly with modifications.</returns>
            <remarks>
            <p class="body">Inheritors implementing a custom data provider for a custom 
            <see cref="T:Infragistics.WebUI.Data.ScheduleDataBinding">ScheduleDataBinding</see>
            subclass may override this method to add custom properties to the selection list.
            Unrecognized queries should never be modified, as data storage errors may result
            from mishandling of the query templates.</p>
            </remarks>
        </member>
        <member name="M:Infragistics.WebUI.Data.WebScheduleDataProviderBase.AddCustomParameter(Infragistics.WebUI.Data.ScheduleDataBinding,System.String,System.String,System.String,System.Data.DbType)">
            <summary>
            Adds a custom parameter to the data bindings.
            </summary>
            <param name="binding">A <strong>ScheduleDataBinding</strong>, usually this
            will be a subclass of a data binding developers will enhance through
            inheritance.</param>
            <param name="tableName">The table name (either "Activity" or "Resource").
            The custom parameter will only apply to queries against the specified
            table.</param>
            <param name="placeholderName">The name of the placeholder replaced during
            data binding. This is usually your column's name.</param>
            <param name="parameterName">The named parameter in the query. If unspecified
            then the <em>placeholderName</em> is used. The parameter name
            should not be prefixed with an '@' symbol.</param>
            <param name="parameterDbType">The database type of <em>parameterName</em>.
            This must be compatible with the type of the bound property in the
            WebSchedule object model, as well as with the type declared for the
            parameter in your data source.</param>
        </member>
        <member name="M:Infragistics.WebUI.Data.WebScheduleDataProviderBase.CreateRenderer">
            <summary>
            Creates a default <b>SmartRenderer</b>.
            </summary>
            <returns>A non-null, default <b>SmartRenderer</b>.</returns>
        </member>
        <member name="M:Infragistics.WebUI.Data.WebScheduleDataProviderBase.Render(System.Web.UI.HtmlTextWriter)">
            <summary>
            Renders the data provider at design-time.
            </summary>
            <param name="writer">An <b>HtmlTextWriter</b> in which to
            write markup at run-time (not used).</param>
            <remarks>
            <p class="body">All <b>WebScheduleDataProviderBase</b> is a nonvisual
            element, and renders no HTML at run-time.</p>
            <p class="body">At design-time, it renders a small, rectangular
            token to facilitate selection.</p>
            <p class="body">Inheritors should not override <b>Render</b>, they
            should instead override the <b>RenderContents</b> method to customize
            the design-time appearance of the data provider. This ensures the
            safeguards preventing run-time rendering can be applied.</p>
            <seealso cref="M:Infragistics.WebUI.Data.WebScheduleDataProviderBase.RenderContents(System.Web.UI.HtmlTextWriter)"/>
            </remarks>
        </member>
        <member name="M:Infragistics.WebUI.Data.WebScheduleDataProviderBase.RenderContents(System.Web.UI.HtmlTextWriter)">
            <summary>
            Renders the contents of the data provider at design-time.
            </summary>
            <param name="writer">An <b>HtmlTextWriter</b> in which to
            write markup.</param>
            <remarks>
            <p class="body">All <b>WebScheduleDataProviderBase</b> subclasses
            are required to be nonvisual elements, and they should render no
            HTML at run-time.</p>
            <p class="body">At design-time, the data provider renders a small,
            rectangular token with the name of the specialized subclass to
            facilitate identification and selection.</p>
            <p class="body">Inheritors overriding the <b>RenderContents</b>
            method may render additional design-time content to the design
            surface at their discretion. However, it is very important that
            any markup rendered be done only at design-time to maintain the
            requirement that a data provider must be nonvisual.</p>
            <seealso cref="M:Infragistics.WebUI.Data.WebScheduleDataProviderBase.Render(System.Web.UI.HtmlTextWriter)"/>
            </remarks>
        </member>
        <member name="M:Infragistics.WebUI.Data.WebScheduleDataProviderBase.Dispose">
            <summary>
            Disposes of resources held by this control.
            </summary>
        </member>
        <member name="P:Infragistics.WebUI.Data.WebScheduleDataProviderBase.SnoozePersistenceType">
            <summary>
            Snooze persistence type.
            </summary>
        </member>
        <member name="P:Infragistics.WebUI.Data.WebScheduleDataProviderBase.WebScheduleInfo">
            <summary>
            References the <b>WebScheduleInfo</b> managing data about resources and activities
            surrounding a particular <i>active</i> date.
            </summary>
            <remarks>
            <p class="body">Developers may assign an explicit object reference to a <b>WebScheduleInfo</b>
            at run-time to this property, but please note that an object reference cannot persist through
            viewstate and must be re-initialized on each page request. In order to persist this relationship
            in viewstate, the <see cref="P:Infragistics.WebUI.Data.WebScheduleDataProviderBase.WebScheduleInfoID"/> property (which can be set at design-time) is
            generally preferred.</p>
            <p class="body">One motivation of developers explicitly connecting data providers to a 
            <b>WebScheduleInfo</b> element would be when these objects are spread across multiple
            user controls. When an application has this environment, it becomes impossible to know
            what the IDs of the resulting controls will be, in advance, when they are ultimately
            created by their user control. However, the application can predict how it uses these
            user controls, and obtain the necessary object references to realize this kind of
            connectivity at run-time during the <b>Load</b> stage of the ASP.NET page lifecycle.
            </p>
            <p class="body">Applications must associate a <b>WebScheduleInfo</b> element with their
            <b>WebScheduleDataProviderBase</b> data provider before a page renders, whether through
            this method, restoration of a connection that was serialized at design-time, or via an
            assignment of the <b>WebScheduleInfo</b>'s ID to the <see cref="P:Infragistics.WebUI.Data.WebScheduleDataProviderBase.WebScheduleInfoID"/>
            property. At any point prior to the establishment of this connection, the content of
            a <b>WebScheduleInfo</b>'s activities and resources may not accurately reflect the
            content of the data model because a temporary placeholder <b>WebScheduleInfo</b>
            is brought into existance until a connection to the actual <b>WebScheduleInfo</b>
            can be realized.</p>
            <seealso cref="P:Infragistics.WebUI.Data.WebScheduleDataProviderBase.WebScheduleInfoID"/>
            </remarks>
        </member>
        <member name="P:Infragistics.WebUI.Data.WebScheduleDataProviderBase.WebScheduleInfoID">
            <summary>  
            Identifies the <see cref="P:Infragistics.WebUI.Data.WebScheduleDataProviderBase.WebScheduleInfo">WebScheduleInfo</see> element linked to this data provider.
            </summary>
            <remarks>
            <p class="body">This ID property is provided for design-time serialization, and persistence of a previous connection to a
            <b>WebScheduleInfo</b>. Web applications assigning to the run-time reference property, 
            <see cref="P:Infragistics.WebUI.Data.WebScheduleDataProviderBase.WebScheduleInfo">WebScheduleInfo</see>, must re-bind that object reference on every
            postback to preserve the connection. As an alternative, by assigning the <b>UniqueID</b> of the <b>WebScheduleInfo</b> element
            through this property the binding can be restored through viewstate. Note that if the <b>WebScheduleInfo</b> is also dynamically
            created, and added to the <b>Controls</b> collection on the page, that it must still be recreated on each postback so that it
            exists before <b>LoadViewstate</b> is called on this <b>WebScheduleDataProviderBase</b>.</p>
            </remarks>
        </member>
        <member name="P:Infragistics.WebUI.Data.WebScheduleDataProviderBase.ImageDirectory">
            <summary>
            <b>Overridden.</b> This property is not supported by non-visual elements.
            </summary>
            <value>
            Delegates to the base class' property value, however applications should
            not expect this property to have any effect on the <b>WebScheduleDataProviderBase</b>.
            </value>
            <remarks>
            <p class="body">The <b>WebScheduleDataProviderBase</b> is meant to serve
            as a non-visual element. It inherits from <b>WebControl</b> to maintain
            state and expose server-side events, however many of these inherited
            properties are not applicable to an element with no visual appearance
            and are therefore unsupported.</p>
            </remarks>
        </member>
        <member name="P:Infragistics.WebUI.Data.WebScheduleDataProviderBase.JavaScriptFileName">
            <summary>
            <b>Overridden.</b> This property is not supported by non-visual elements.
            </summary>
            <value>
            Delegates to the base class' property value, however applications should
            not expect this property to have any effect on the <b>WebScheduleDataProviderBase</b>.
            </value>
            <remarks>
            <p class="body">The <b>WebScheduleDataProviderBase</b> is meant to serve
            as a non-visual element. It inherits from <b>WebControl</b> to maintain
            state and expose server-side events, however many of these inherited
            properties are not applicable to an element with no visual appearance
            and are therefore unsupported.</p>
            </remarks>
        </member>
        <member name="P:Infragistics.WebUI.Data.WebScheduleDataProviderBase.JavaScriptFileNameCommon">
            <summary>
            <b>Overridden.</b> This property is not supported by non-visual elements.
            </summary>
            <value>
            Delegates to the base class' property value, however applications should
            not expect this property to have any effect on the <b>WebScheduleDataProviderBase</b>.
            </value>
            <remarks>
            <p class="body">The <b>WebScheduleDataProviderBase</b> is meant to serve
            as a non-visual element. It inherits from <b>WebControl</b> to maintain
            state and expose server-side events, however many of these inherited
            properties are not applicable to an element with no visual appearance
            and are therefore unsupported.</p>
            </remarks>
        </member>
        <member name="P:Infragistics.WebUI.Data.WebScheduleDataProviderBase.StyleSheetFileName">
            <summary>
            <b>Overridden.</b> This property is not supported by non-visual elements.
            </summary>
            <value>
            Delegates to the base class' property value, however applications should
            not expect this property to have any effect on the <b>WebScheduleDataProviderBase</b>.
            </value>
            <remarks>
            <p class="body">The <b>WebScheduleDataProviderBase</b> is meant to serve
            as a non-visual element. It inherits from <b>WebControl</b> to maintain
            state and expose server-side events, however many of these inherited
            properties are not applicable to an element with no visual appearance
            and are therefore unsupported.</p>
            </remarks>
        </member>
        <member name="P:Infragistics.WebUI.Data.WebScheduleDataProviderBase.BrowserTarget">
            <summary>
            <b>Overridden.</b> This property is not supported by non-visual elements.
            </summary>
            <value>
            Delegates to the base class' property value, however applications should
            not expect this property to have any effect on the <b>WebScheduleDataProviderBase</b>.
            </value>
            <remarks>
            <p class="body">The <b>WebScheduleDataProviderBase</b> is meant to serve
            as a non-visual element. It inherits from <b>WebControl</b> to maintain
            state and expose server-side events, however many of these inherited
            properties are not applicable to an element with no visual appearance
            and are therefore unsupported.</p>
            </remarks>
        </member>
        <member name="P:Infragistics.WebUI.Data.WebScheduleDataProviderBase.Enabled">
            <summary>
            <b>Overridden.</b> This property is not supported by non-visual elements.
            </summary>
            <value>
            Delegates to the base class' property value, however applications should
            not expect this property to have any effect on the <b>WebScheduleDataProviderBase</b>.
            </value>
            <remarks>
            <p class="body">The <b>WebScheduleDataProviderBase</b> is meant to serve
            as a non-visual element. It inherits from <b>WebControl</b> to maintain
            state and expose server-side events, however many of these inherited
            properties are not applicable to an element with no visual appearance
            and are therefore unsupported.</p>
            </remarks>
        </member>
        <member name="P:Infragistics.WebUI.Data.WebScheduleDataProviderBase.Visible">
            <summary>
            <b>Overridden.</b> This property is not supported by non-visual elements.
            </summary>
            <value>
            Delegates to the base class' property value, however applications should
            not expect this property to have any effect on the <b>WebScheduleDataProviderBase</b>.
            </value>
            <remarks>
            <p class="body">The <b>WebScheduleDataProviderBase</b> is meant to serve
            as a non-visual element. It inherits from <b>WebControl</b> to maintain
            state and expose server-side events, however many of these inherited
            properties are not applicable to an element with no visual appearance
            and are therefore unsupported.</p>
            </remarks>
        </member>
        <member name="P:Infragistics.WebUI.Data.WebScheduleDataProviderBase.BorderStyle">
            <summary>
            <b>Overridden.</b> This property is not supported by non-visual elements.
            </summary>
            <value>
            Delegates to the base class' property value, however applications should
            not expect this property to have any effect on the <b>WebScheduleDataProviderBase</b>.
            </value>
            <remarks>
            <p class="body">The <b>WebScheduleDataProviderBase</b> is meant to serve
            as a non-visual element. It inherits from <b>WebControl</b> to maintain
            state and expose server-side events, however many of these inherited
            properties are not applicable to an element with no visual appearance
            and are therefore unsupported.</p>
            </remarks>
        </member>
        <member name="P:Infragistics.WebUI.Data.WebScheduleDataProviderBase.Width">
            <summary>
            <b>Overridden.</b> This property is not supported by non-visual elements.
            </summary>
            <value>
            Delegates to the base class' property value, however applications should
            not expect this property to have any effect on the <b>WebScheduleDataProviderBase</b>.
            </value>
            <remarks>
            <p class="body">The <b>WebScheduleDataProviderBase</b> is meant to serve
            as a non-visual element. It inherits from <b>WebControl</b> to maintain
            state and expose server-side events, however many of these inherited
            properties are not applicable to an element with no visual appearance
            and are therefore unsupported.</p>
            </remarks>
        </member>
        <member name="P:Infragistics.WebUI.Data.WebScheduleDataProviderBase.Height">
            <summary>
            <b>Overridden.</b> This property is not supported by non-visual elements.
            </summary>
            <value>
            Delegates to the base class' property value, however applications should
            not expect this property to have any effect on the <b>WebScheduleDataProviderBase</b>.
            </value>
            <remarks>
            <p class="body">The <b>WebScheduleDataProviderBase</b> is meant to serve
            as a non-visual element. It inherits from <b>WebControl</b> to maintain
            state and expose server-side events, however many of these inherited
            properties are not applicable to an element with no visual appearance
            and are therefore unsupported.</p>
            </remarks>
        </member>
        <member name="P:Infragistics.WebUI.Data.WebScheduleDataProviderBase.BorderWidth">
            <summary>
            <b>Overridden.</b> This property is not supported by non-visual elements.
            </summary>
            <value>
            Delegates to the base class' property value, however applications should
            not expect this property to have any effect on the <b>WebScheduleDataProviderBase</b>.
            </value>
            <remarks>
            <p class="body">The <b>WebScheduleDataProviderBase</b> is meant to serve
            as a non-visual element. It inherits from <b>WebControl</b> to maintain
            state and expose server-side events, however many of these inherited
            properties are not applicable to an element with no visual appearance
            and are therefore unsupported.</p>
            </remarks>
        </member>
        <member name="P:Infragistics.WebUI.Data.WebScheduleDataProviderBase.Font">
            <summary>
            <b>Overridden.</b> This property is not supported by non-visual elements.
            </summary>
            <value>
            Delegates to the base class' property value, however applications should
            not expect this property to have any effect on the <b>WebScheduleDataProviderBase</b>.
            </value>
            <remarks>
            <p class="body">The <b>WebScheduleDataProviderBase</b> is meant to serve
            as a non-visual element. It inherits from <b>WebControl</b> to maintain
            state and expose server-side events, however many of these inherited
            properties are not applicable to an element with no visual appearance
            and are therefore unsupported.</p>
            </remarks>
        </member>
        <member name="P:Infragistics.WebUI.Data.WebScheduleDataProviderBase.ToolTip">
            <summary>
            <b>Overridden.</b> This property is not supported by non-visual elements.
            </summary>
            <value>
            Delegates to the base class' property value, however applications should
            not expect this property to have any effect on the <b>WebScheduleDataProviderBase</b>.
            </value>
            <remarks>
            <p class="body">The <b>WebScheduleDataProviderBase</b> is meant to serve
            as a non-visual element. It inherits from <b>WebControl</b> to maintain
            state and expose server-side events, however many of these inherited
            properties are not applicable to an element with no visual appearance
            and are therefore unsupported.</p>
            </remarks>
        </member>
        <member name="P:Infragistics.WebUI.Data.WebScheduleDataProviderBase.CssClass">
            <summary>
            <b>Overridden.</b> This property is not supported by non-visual elements.
            </summary>
            <value>
            Delegates to the base class' property value, however applications should
            not expect this property to have any effect on the <b>WebScheduleDataProviderBase</b>.
            </value>
            <remarks>
            <p class="body">The <b>WebScheduleDataProviderBase</b> is meant to serve
            as a non-visual element. It inherits from <b>WebControl</b> to maintain
            state and expose server-side events, however many of these inherited
            properties are not applicable to an element with no visual appearance
            and are therefore unsupported.</p>
            </remarks>
        </member>
        <member name="P:Infragistics.WebUI.Data.WebScheduleDataProviderBase.BackColor">
            <summary>
            <b>Overridden.</b> This property is not supported by non-visual elements.
            </summary>
            <value>
            Delegates to the base class' property value, however applications should
            not expect this property to have any effect on the <b>WebScheduleDataProviderBase</b>.
            </value>
            <remarks>
            <p class="body">The <b>WebScheduleDataProviderBase</b> is meant to serve
            as a non-visual element. It inherits from <b>WebControl</b> to maintain
            state and expose server-side events, however many of these inherited
            properties are not applicable to an element with no visual appearance
            and are therefore unsupported.</p>
            </remarks>
        </member>
        <member name="P:Infragistics.WebUI.Data.WebScheduleDataProviderBase.ForeColor">
            <summary>
            <b>Overridden.</b> This property is not supported by non-visual elements.
            </summary>
            <value>
            Delegates to the base class' property value, however applications should
            not expect this property to have any effect on the <b>WebScheduleDataProviderBase</b>.
            </value>
            <remarks>
            <p class="body">The <b>WebScheduleDataProviderBase</b> is meant to serve
            as a non-visual element. It inherits from <b>WebControl</b> to maintain
            state and expose server-side events, however many of these inherited
            properties are not applicable to an element with no visual appearance
            and are therefore unsupported.</p>
            </remarks>
        </member>
        <member name="P:Infragistics.WebUI.Data.WebScheduleDataProviderBase.BorderColor">
            <summary>
            <b>Overridden.</b> This property is not supported by non-visual elements.
            </summary>
            <value>
            Delegates to the base class' property value, however applications should
            not expect this property to have any effect on the <b>WebScheduleDataProviderBase</b>.
            </value>
            <remarks>
            <p class="body">The <b>WebScheduleDataProviderBase</b> is meant to serve
            as a non-visual element. It inherits from <b>WebControl</b> to maintain
            state and expose server-side events, however many of these inherited
            properties are not applicable to an element with no visual appearance
            and are therefore unsupported.</p>
            </remarks>
        </member>
        <member name="P:Infragistics.WebUI.Data.WebScheduleDataProviderBase.AccessKey">
            <summary>
            <b>Overridden.</b> This property is not supported by non-visual elements.
            </summary>
            <value>
            Delegates to the base class' property value, however applications should
            not expect this property to have any effect on the <b>WebScheduleDataProviderBase</b>.
            </value>
            <remarks>
            <p class="body">The <b>WebScheduleDataProviderBase</b> is meant to serve
            as a non-visual element. It inherits from <b>WebControl</b> to maintain
            state and expose server-side events, however many of these inherited
            properties are not applicable to an element with no visual appearance
            and are therefore unsupported.</p>
            </remarks>
        </member>
        <member name="P:Infragistics.WebUI.Data.WebScheduleDataProviderBase.TabIndex">
            <summary>
            <b>Overridden.</b> This property is not supported by non-visual elements.
            </summary>
            <value>
            Delegates to the base class' property value, however applications should
            not expect this property to have any effect on the <b>WebScheduleDataProviderBase</b>.
            </value>
            <remarks>
            <p class="body">The <b>WebScheduleDataProviderBase</b> is meant to serve
            as a non-visual element. It inherits from <b>WebControl</b> to maintain
            state and expose server-side events, however many of these inherited
            properties are not applicable to an element with no visual appearance
            and are therefore unsupported.</p>
            </remarks>
        </member>
        <member name="P:Infragistics.WebUI.Data.WebScheduleDataProviderBase.DataBindings">
            <summary>
            Accesses the collection of <b>ScheduleDataBindings</b> which can be added
            to before processing a data-binding operation.
            </summary>
            <value>The temporary collection of <see cref="T:Infragistics.WebUI.Data.ScheduleDataBinding"/> instances
            pertaining to the current operation, if called after <b>RegisterDataBindings</b>
            has completed.</value>
            <remarks>
            <p class="body">Inheritors who have customized and/or extended their
            <see cref="T:Infragistics.WebUI.Data.ScheduleDataBinding"/>s and are extending the <b>WebScheduleDataProviderBase</b>
            class should register their own <b>ScheduleDataBindings</b> in this collection
            by overriding the <see cref="M:Infragistics.WebUI.Data.WebScheduleDataProviderBase.RegisterDataBindings(Infragistics.WebUI.WebSchedule.DataContext)"/> method.</p>
            <p class="body">The default implementation of <b>RegisterDataBindings</b> will add the
            standard WebSchedule data binding objects to this collection for each operation, based
            on whatever <b>DataContext</b> it gets passed by the data-binding framework. Inheritors
            have two options for adding their own, extended derivations of the supplemental classes
            to the WebSchedule object model. First, they can append their own <b>ScheduleDataBinding</b>s
            to the collection by calling <see cref="M:Infragistics.WebUI.Data.DataBindingCollection.Add(Infragistics.WebUI.Data.ScheduleDataBinding)">Add</see>so that they get applied after the standard data binding objects to any
            commands required by the operation. Alternatively, they can override the default data
            binding objects (this is required if the custom <b>ScheduleDataBinding</b> is a subclass
            of one of the standard WebSchedule classes, like <see cref="P:Infragistics.WebUI.Data.WebScheduleDataProviderBase.ResourceBinding"/>) by
            calling <see cref="M:Infragistics.WebUI.Data.DataBindingCollection.Clear">Clear</see> and then <b>Add</b> or 
            <see cref="M:Infragistics.WebUI.Data.DataBindingCollection.AddRange(Infragistics.WebUI.Data.ScheduleDataBinding[])">AddRange</see>.</p>
            <p class="note">No attempts should be made to register additional data binding objects
            with the <b>DataBindings</b> collection once data-bind processing has begun (<i>i.e.</i>,
            the recommended place for all such registrations is in your <b>RegisterDataBindings</b>
            override <i>or</i> at the very beginning of your <i>Fetch</i> or <i>Update</i> method
            implementation for the current operation (this latter approach can be used to sidestep
            having to identify the <b>DataContext</b> based on it's <b>Operation</b> property) in
            an overriden implementation of <b>RegisterDataBindings</b> that must account for all
            possible data contexts.)</p>
            </remarks>
        </member>
        <member name="P:Infragistics.WebUI.Data.WebScheduleDataProviderBase.AppointmentBinding">
            <summary>
            Manages the set of data-binding properties related to the loading and
            updating of activity information from a general purpose data provider.
            </summary>
            <remarks>
            <p class="body">The <see cref="T:Infragistics.WebUI.Data.AppointmentBinding">AppointmentBinding</see> 
            object contains data-binding properties mapping to the <b>Appointment</b> object in the
            <b>WebSchedule</b> object model. Each property maps one data member to a field or named column
            in your application's persistence model. By default, these bindings match the recommendations
            of the <b>WebSchedule</b> persistence model. You may adapt the <b>WebSchedule</b> to existing
            data stores as long as they are compatible with the schema of the <b>WebSchedule</b>
            persistence model, and provide the necessary scheduling activity information.</p>
            <p class="note">When referring to a database data provider, frequently the term
            <i>data model</i> is used in place of <i>persistence model</i>. The notion of a
            persistence model is used here instead, because a data provider may be more
            general than a relational database (for example, comma-separated value flat files,
            Microsoft Exchange collaborative data objects (CDO), or XML documents).</p>
            </remarks>
        </member>
        <member name="P:Infragistics.WebUI.Data.WebScheduleDataProviderBase.ResourceBinding">
            <summary>
            Manages the set of data-binding properties related to the loading of
            resources from a general purpose data provider.
            </summary>
            <remarks>
            <p class="body">The <see cref="T:Infragistics.WebUI.Data.ResourceBinding">ResourceBinding</see> 
            object contains data-binding properties mapping to the <b>Resource</b> object in the
            <b>WebSchedule</b> object model. Each property maps one data member to a named column or field 
            in your application's persistence model. By default, these bindings match the recommendations
            of the <b>WebSchedule</b> persistence model. You may adapt the <b>WebSchedule</b> to existing
            data stores as long as they are compatible with the schema of the <b>WebSchedule</b>
            persistence model, and provide the necessary scheduling resource information.</p>
            <p class="note">When referring to a database data provider, frequently the term
            <i>data model</i> is used in place of <i>persistence model</i>. The notion of a
            persistence model is used here instead, because a data provider may be more
            general than a relational database (for example, comma-separated value flat
            files, Microsoft Exchange collaborative data objects (CDO), or XML documents).
            </p>
            </remarks>
        </member>
        <member name="P:Infragistics.WebUI.Data.WebScheduleDataProviderBase.RecurrenceBinding">
            <summary>
            Manages the set of data-binding properties related to the loading and
            updating of recurrence pattern information from a general purpose data
            provider.
            </summary>
            <remarks>
            <p class="body">The <see cref="T:Infragistics.WebUI.Data.RecurrenceBinding">RecurrenceBinding</see> 
            object contains data-binding properties mapping to the <b>Recurrence</b> object in the
            <b>WebSchedule</b> object model. Each property maps one data member to a field or named column
            in your application's persistence model. By default, these bindings match the recommendations
            of the <b>WebSchedule</b> persistence model. You may adapt the <b>WebSchedule</b> to existing
            data stores as long as they are compatible with the schema of the <b>WebSchedule</b>
            persistence model, and provide the necessary scheduling activity information.</p>
            <p class="note">When referring to a database data provider, frequently the term
            <i>data model</i> is used in place of <i>persistence model</i>. The notion of a
            persistence model is used here instead, because a data provider may be more
            general than a relational database (for example, comma-separated value flat files,
            Microsoft Exchange collaborative data objects (CDO), or XML documents).</p>
            </remarks>
        </member>
        <member name="P:Infragistics.WebUI.Data.WebScheduleDataProviderBase.VarianceBinding">
            <summary>
            Manages the set of data-binding properties related to the loading and
            updating of variance information from a general purpose data provider.
            </summary>
            <remarks>
            <p class="body">The <see cref="T:Infragistics.WebUI.Data.VarianceBinding">VarianceBinding</see> 
            object contains data-binding properties mapping to the <b>Variance</b> object in the
            <b>WebSchedule</b> object model. Each property maps one data member to a field or named column
            in your application's persistence model. By default, these bindings match the recommendations
            of the <b>WebSchedule</b> persistence model. You may adapt the <b>WebSchedule</b> to existing
            data stores as long as they are compatible with the schema of the <b>WebSchedule</b>
            persistence model, and provide the necessary scheduling activity information.</p>
            <p class="note">When referring to a database data provider, frequently the term
            <i>data model</i> is used in place of <i>persistence model</i>. The notion of a
            persistence model is used here instead, because a data provider may be more
            general than a relational database (for example, comma-separated value flat files,
            Microsoft Exchange collaborative data objects (CDO), or XML documents).</p>
            </remarks>
        </member>
        <member name="P:Infragistics.WebUI.Data.WebScheduleDataProviderBase.Infragistics#WebUI#Shared#IUltraLicensedComponent#License">
            <summary>
            Gets the licensing information for this component.
            </summary>
        </member>
        <member name="T:Infragistics.WebUI.Data.WebScheduleDbProvider">
            <summary>
            Provides an enhanced data abstraction layer specialized for
            relational databases.
            </summary>
            <remarks>
            <p class="body">Data providers abstract the underlying data
            storage and retrieval technology from the object models of
            Infragistics' presentation elements. The <b>WebScheduleDbProvider</b>
            offers enhancements specific to relational database management
            systems (such as Microsoft SQL Server), and common data access
            APIs (such as OLE DB) such as specifying a platform-neutral
            <see cref="P:Infragistics.WebUI.Data.WebScheduleDbProvider.ConnectionStringDefault"/> or the capability to
            <see cref="P:Infragistics.WebUI.Data.WebScheduleDbProvider.UseStoredProcedure"/> (not supported by all
            database implementations).</p>
            <p class="body">Inheritors must extend the <b>WebScheduleDbProvider</b>
            base class to provide implementations that create connections
            specific to an underlying data access platform, and handle fetch
            and update operations. Consumers dealing with the abstraction of
            the <b>WebScheduleDbProvider</b> can do so with minimal dependency on
            the underlying implementation. Applications have greater freedom
            to switch data providers.</p>
            </remarks>
        </member>
        <member name="M:Infragistics.WebUI.Data.WebScheduleDbProvider.#ctor">
            <summary>
            Default constructor initializes fields to their initial values.
            </summary>
            <remarks>
            <p class="body">Classes inheriting from <b>WebScheduleDbProvider</b>
            must provide their own constructors to create more purposeful
            instances. Inheritors will always call this parameterless base
            class constructor from their own constructors by default.</p>
            </remarks>
        </member>
        <member name="M:Infragistics.WebUI.Data.WebScheduleDbProvider.OnInit(System.EventArgs)">
            <summary>
            Performs initializations during the early stages of the ASP.NET
            page lifecycle.
            </summary>
            <param name="args">Event arguments.</param>
            <remarks>
            <p class="body">Inheritors should override <b>OnInit</b> to
            perform any actions related to the initialization of their
            <b>WebScheduleDbProvider</b> subclass that must take place
            post-construction. Any operations perform during <b>Init</b>
            should not rely on interacting with other elements on the
            <b>Page</b> as those elements may not have completed their
            own <b>Init</b>, have not been added to the <b>Page</b>,
            and may not be ready to collaborate with the
            <b>WebScheduleDbProvider</b> at the current time.</p>
            </remarks>
        </member>
        <member name="M:Infragistics.WebUI.Data.WebScheduleDbProvider.OnLoad(System.EventArgs)">
            <summary>
            Performs during the load stage of the ASP.NET page lifecycle.
            </summary>
            <param name="args">Event arguments.</param>
            <remarks>
            <p class="body">This override initializes the <b>Connection</b>
            property if it has not already been initialized, and calls the
            base class implementation of <b>OnLoad</b>. The Connection
            property may not have been initialized already if the data
            provider is added dynamically to the page, since the preferred
            time to initialize the Connection property was in the <b>Init</b>
            event of the <b>Page</b> (and when the data provider is dynamically
            added to the page late, that point in time may have already passed.)</p>
            </remarks>
        </member>
        <member name="M:Infragistics.WebUI.Data.WebScheduleDbProvider.CreateConnection(System.String)">
            <summary>
            Establishes a database connection from the supplied <b>ConnectionString</b>
            through the implementation-specific Data Provider.
            </summary>
            <param name="connectionString">A connection string that should be valid for
            the underlying Data Provider.</param>
            <returns>A general-purpose <b>IDbConnection</b> representing a database
            connection in a provider-independent manner.</returns>
            <remarks>
            <p class="body">Inheritors must override this virtual factory method in
            order to provide an <b>IDbConnection</b> implementation specific to their
            underlying Data Provider. <b>CreateConnection</b> will be called by the
            <see cref="P:Infragistics.WebUI.Data.WebScheduleDbProvider.Connection"/> property when necessary to lazily create the
            connection.</p>
            </remarks>
        </member>
        <member name="M:Infragistics.WebUI.Data.WebScheduleDbProvider.FilterConnectionErrorMessage(System.String,System.String,System.Collections.IDictionary)">
            <summary>
            Filter method giving inheritors the opportunity to adjust the text used
            in a connection error message.
            </summary>
            <param name="originalErrorMessage">The original message text, which may
            be localized, from the ADO.NET exception thrown when the connection has
            failed.</param>
            <param name="suggestedErrorMessage">The error message the Infragistics
            WebSchedule data providers recommend.</param>
            <param name="notUsed">Reserved for future use.</param>
            <returns>
            The error message text associated with the no connection error.
            </returns>
            <remarks>
            <p class="body">Inheritors of concrete <strong>WebScheduleDBProvider</strong>
            subclasses may support databases other than Microsoft Access and SQL Server,
            therefore the <em>suggestedErrorMessage</em> may not fit your subclass
            because it makes implementation specific references in the guidance it
            offers when a connection fails.</p>
            <p class="body">Another reason to override this method is to remove sensitive
            information that may be contained in a connection failure error message, such
            as user identity information and server file path information.</p>
            <p class="body">This method can also be used for diagnostic event logging,
            based on the content of the <em>originalErrorMessage</em> argument.</p>
            </remarks>
        </member>
        <member name="M:Infragistics.WebUI.Data.WebScheduleDbProvider.CreateCommand(System.String)">
            <summary>
            Creates an implementation-specific database command associated with the
            <b>Connection</b> of this WebSchedule data provider.
            </summary>
            <param name="text">Either the name of a stored procedure, or dynamic SQL
            to be executed (see the <b>Remarks</b> below for further explanation).
            </param>
            <returns>An <b>IDbCommand</b>-implementation specific to the currently
            connected database, or null (Nothing in Visual Basic .NET) if the <b>Connection</b>
            property has not yet been initialized.</returns>
            <remarks>
            <p class="body">The underlying implementation of the <b>IDbCommand</b>
            returned by this method depends on the implementation of the <b>IDbConnection</b>
            created by an inheritor's override of <see cref="M:Infragistics.WebUI.Data.WebScheduleDbProvider.CreateConnection(System.String)"/>. The
            <b>Connection</b> property of the returned <b>IDbCommand</b> will be initialized
            to this WebSchedule data provider's <see cref="P:Infragistics.WebUI.Data.WebScheduleDbProvider.Connection"/>.</p>
            <p class="body">The <b>CommandType</b> on the returned <b>IDbCommand</b> is
            initialized based on the setting of <see cref="P:Infragistics.WebUI.Data.WebScheduleDbProvider.UseStoredProcedure"/>.  When
            this WebSchedule data provider is configured to use stored procedures, the
            <i>text</i> parameter must be the stored procedure's name, or a run-time
            database error will result when the command is executed. If stored procedures
            are not used (or not supported by the WebSchedule data provider subclass)
            then the <i>text</i> parameter should be the dynamic SQL to be performed
            when the command is executed. If <i>text</i> is not specified (it is null
            or Nothing in Visual Basic .NET) then the <b>CommandText</b> property on
            the command object returned will remain uninitialized (the WebSchedule
            data provider may defer initialization of it until a later point in time).
            </p>
            </remarks>
        </member>
        <member name="M:Infragistics.WebUI.Data.WebScheduleDbProvider.CreateParameter(System.String,System.Data.DbType)">
            <summary>
            Creates an implementation-specific database parameter with the
            specified type.
            </summary>
            <param name="parameterName">Name of the database parameter.</param>
            <param name="parameterType">Data type of the database parameter,
            selected from the list specified in the <b>DbType</b> enumeration.
            </param>
            <returns>An implementation of <b>IDbDataParameter</b> that describes
            the parameter created in a database-independent way, but that is
            compatible with <b>IDbCommand</b> instances created from the current
            WebSchedule data provider <see cref="P:Infragistics.WebUI.Data.WebScheduleDbProvider.Connection"/> (for example,
            through <see cref="M:Infragistics.WebUI.Data.WebScheduleDbProvider.CreateCommand(System.String)"/>).</returns>
            <remarks>
            <p class="body">This factory method is called frequently in the
            early stages of data binding to populate the <b>IParameterCollection</b>
            of database commands necessary to complete the bind. Some data providers
            allow nameless parameters, but others do not. Therefore, inheritors calling
            <b>CreateParameter</b> are encouraged to specify a name for their parameter.</p>
            <p class="body">By default, all parameters created by this method are
            input (with respect to the database) parameters. Their values will be
            transmitted from the web server to the database server.</p>
            <seealso cref="M:Infragistics.WebUI.Data.WebScheduleDbProvider.CreateParameter(System.String,System.Data.DbType,System.Data.ParameterDirection)">CreateParameter</seealso>
            </remarks>
        </member>
        <member name="M:Infragistics.WebUI.Data.WebScheduleDbProvider.CreateParameter(System.String,System.Data.DbType,System.Data.ParameterDirection)">
            <summary>
            Creates an implementation-specific database parameter with the
            specified type and directionality.
            </summary>
            <param name="parameterName">Name of the database parameter.</param>
            <param name="parameterType">Data type of the database parameter,
            selected from the list specified in the <b>DbType</b> enumeration.
            </param>
            <param name="parameterDir">Directionality of the database parameter,
            <i>i.e.</i>, whether it is incoming, outgoing, both, or a return value.
            </param>
            <returns>An implementation of <b>IDbDataParameter</b> that describes
            the parameter created in a database-independent way, but that is
            compatible with <b>IDbCommand</b> instances created from the current
            WebSchedule data provider <see cref="P:Infragistics.WebUI.Data.WebScheduleDbProvider.Connection"/> (for example,
            through <see cref="M:Infragistics.WebUI.Data.WebScheduleDbProvider.CreateCommand(System.String)"/>).</returns>
            <remarks>
            <p class="body">This factory method is called frequently in the
            early stages of data binding to populate the <b>IParameterCollection</b>
            of database commands necessary to complete the bind. Some data providers
            allow nameless parameters, but others do not. Therefore, inheritors calling
            <b>CreateParameter</b> are encouraged to specify a name for their parameter.
            </p>
            <p class="body">Developers having extended the <see cref="T:Infragistics.WebUI.Data.DataParameterSurrogate"/>
            class with the intention of using it with this WebSchedule data provider must
            override this method. Their implementation should supply the data provider
            with instances of their custom class. At bind-time, those instances will be
            converted to the appropriate implementation type through their <b>IConvertible</b>
            implementation (specifically, their override of <b>ToType</b>).</p>
            <seealso cref="M:Infragistics.WebUI.Data.WebScheduleDbProvider.CreateParameter(System.String,System.Data.DbType)"/>
            <seealso cref="P:Infragistics.WebUI.Data.DataParameterSurrogate.DbType"/>
            </remarks>
        </member>
        <member name="M:Infragistics.WebUI.Data.WebScheduleDbProvider.FilterConnectionString(System.String,System.String)">
            <summary>
            Allows <b>WebScheduleDbProvider</b> subclasses an opportunity to validate or
            filter an assigned <b>ConnectionString</b> before the <b>Connection</b>
            is opened.
            </summary>
            <param name="newConnectionString">The new value for the <b>ConnectionString</b>
            property that has been assigned.</param>
            <param name="currentConnectionString"></param>
            <returns>The filtered <i>newConnectionString</i>, with any invalid properties
            stripped or altered as determined by the implementation of this method. The
            implementation of this method may return <i>currentConnectionString</i> if
            the connection string assignment should be rejected.</returns>
            <remarks>
            <p class="body">The base class implementation of <b>FilterConnectionString</b>
            performs no filtering or validation. It always returns <i>newConnectionString</i>.
            </p>
            </remarks>
        </member>
        <member name="M:Infragistics.WebUI.Data.WebScheduleDbProvider.EnsureDataSourceID">
            <summary>
            Initializes the <b>Connection</b> property with information
            read from a <b>SqlDataSource</b> identified by the <b>DataSourceID</b>
            property.
            </summary>
            <remarks>
            <p class="body">The data provider uses the <b>DataSourceControl</b> you identify
            at design-time using the <see cref="P:Infragistics.WebUI.Data.WebScheduleDbProvider.DataSourceID"></see> property to get information necessary
            for connecting with the underlying database. When successful, this method
            initializes the <see cref="P:Infragistics.WebUI.Data.WebScheduleDbProvider.Connection"></see> property.</p>
            </remarks>
            <exception cref="T:System.NotSupportedException">Thrown when a <b>DataSourceControl</b>
            was found, but it belongs to a database incompatible with this WebSchedule data
            provider.</exception>
            <seealso cref="P:Infragistics.WebUI.Data.WebScheduleDbProvider.DataSourceID"></seealso>
            <seealso cref="M:Infragistics.WebUI.Data.WebScheduleDbProvider.FilterDataSource(System.Web.UI.DataSourceControl)"></seealso>
        </member>
        <member name="M:Infragistics.WebUI.Data.WebScheduleDbProvider.FilterDataSource(System.Web.UI.DataSourceControl)">
            <summary>
            Verifies the <b>DataSourceControl</b> meets the WebSchedule data provider's compatibility
            requirements.
            </summary>
            <param name="source">An instance derived from <b>DataSourceControl</b>.</param>
            <returns>True if <em>source</em> is acceptable; otherwise <em>false</em>.</returns>
            <remarks>
            <p class="body">This method is called when resolving the <see cref="P:Infragistics.WebUI.Data.WebScheduleDbProvider.DataSourceID"></see>
            property at run-time.</p>
            <p class="body">If you use this method to capture a reference to the <b>DataSourceControl</b>,
            then you should be aware that any changes you make to the <b>DataSourceControl</b> instance
            may not have an effect on the WebSchedule data provider.</p>
            <p class="body">Inheritors must call the base implementation of the <b>FilterDataSource</b>
            method and logically-AND the outcome with the results of their own processing before returning
            the result, otherwise an overridden implementation may allow to pass through a <b>DataSourceControl</b>
            unable to meet the requirements of a WebSchedule data provider. This could lead to an exception being
            later thrown.</p>
            </remarks>
            <seealso cref="M:Infragistics.WebUI.Data.WebScheduleDbProvider.EnsureDataSourceID"/>
        </member>
        <member name="M:Infragistics.WebUI.Data.WebScheduleDbProvider.Dispose">
            <summary>
            Allows the <b>WebScheduleDbProvider</b> to perform final clean-up of it's
            database connection resources before it's memory is released.
            </summary>
            <remarks>
            <p class="body">The <b>WebScheduleDbProvider</b> closes and cleans-up the
            <b>IDbConnection</b> implementation it holds during <b>Dispose</b>. Only
            connections created by virtue of being the <em>default connection</em>,
            or through a call to the <see cref="M:Infragistics.WebUI.Data.WebScheduleDbProvider.Connect(System.String)"/> method, are disposed of
            automatically by this method.</p>
            <p class="body">Note that if your application initializes the <b>Connection</b>
            of a <b>WebScheduleDbProvider</b> using either the <see cref="P:Infragistics.WebUI.Data.WebScheduleDbProvider.ConnectionID"/>
            property (at design-time), or at run-time by assigning an application-created
            <b>IDbConnection</b> implementation, then a call to <b>Dispose</b> will not
            free these resources. As a rule of thumb, when the constructor call to
            <strong>new</strong> is visible within your application source code, then
            it is the responsibility of your web application to ensure the connection
            is properly closed and disposed of when it is no longer needed.</p>
            </remarks>
        </member>
        <member name="M:Infragistics.WebUI.Data.WebScheduleDbProvider.ShouldSerializeUseStoredProcedure">
            <summary>
            Indicates whether the <see cref="P:Infragistics.WebUI.Data.WebScheduleDbProvider.UseStoredProcedure"/> property has it's
            default value.
            </summary>
            <returns>True if the <b>UseStoredProcedure</b> property has a non-default
            value for the current data provider and should be serialized to the .ASPX
            page; otherwise False.</returns>
            <remarks>
            <p class="body">Inheritors specify whether they use stored procedures by
            default (<em>i.e.</em>, whether they are supported) by overriding the
            <see cref="P:Infragistics.WebUI.Data.WebScheduleDbProvider.UseStoredProcedureDefault"/> property to return true. The
            implementation of <b>ShouldSerializeUseStoredProcedure</b> uses the
            return value of that property to determine whether the developer specifies
            a different setting at design-time, and therefore that should be serialized.
            </p>
            </remarks>
        </member>
        <member name="M:Infragistics.WebUI.Data.WebScheduleDbProvider.ResetUseStoredProcedure">
            <summary>
            Resets the <see cref="P:Infragistics.WebUI.Data.WebScheduleDbProvider.UseStoredProcedure"/> property to its default value.
            </summary>
            <remarks>
            <p class="body">This method allows the design-time environment to provide
            a Reset option. Applications should not need to invoke this method during
            run-time.</p>
            </remarks>
        </member>
        <member name="M:Infragistics.WebUI.Data.WebScheduleDbProvider.Connect(System.String)">
            <summary>
            Connects the <b>WebScheduleDbProvider</b> to a data source identified
            by the supplied Connection String.
            </summary>
            <param name="connectionStr">A connection string compatible with
            the capabilities of the underlying data source.</param>
            <returns>An indication of success (true indicates <see cref="P:Infragistics.WebUI.Data.WebScheduleDbProvider.Connection"/>
            has been updated to refer to the new data source, false indicates the
            connection has failed with no change to the existing <b>Connection</b>).
            </returns>
            <remarks>
            <p class="body">Connections opened through <b>Connect</b> are managed
            by the <b>WebScheduleDbProvider</b> and will be closed when they are
            no longer needed for the processing of the current HTTP request
            (<i>i.e.,</i> when the <b>Page</b> unloads). Using <b>Connect</b>
            hides the underlying data implementation and reduces housekeeping
            responsibilities associated with holding an <b>IDbConnection</b>
            reference directly.</p>
            <p class="body">Each time the <b>Page</b> posts back, any database
            connection will need to be re-established.</p>
            </remarks>
        </member>
        <member name="M:Infragistics.WebUI.Data.WebScheduleDbProvider.GetReader(System.Data.IDbCommand,System.Data.CommandBehavior)">
            <summary>
            Gets an <b>IDataReader</b> for a database selection with specified behavior.
            </summary>
            <param name="currentCommand">An <b>IDbCommand</b> specifying either a text
            command based on a SELECT statement, or a stored procedure returning multiple
            records.</param>
            <param name="behavior">The <b>CommandBehavior</b> when the <b>IDataReader</b>
            returned from this method becomes exhausted.</param>
            <returns>An <b>IDataReader</b> open for forward-only, firehose reading access
            to a command's result set. Returns null (or Nothing) if an error occured while
            attempting to execute <em>currentCommand</em>.</returns>
            <remarks>
            <p class="body">Inheritors may retrieve an <b>IDataReader</b> for use with
            an <b>IDbCommand</b> they've initialized in their own implementation of a
            fetch operation method through this method. The caller can specify the
            command behavior that takes place when the <b>IDataReader</b> exhausts
            itself.</p>
            <p class="body">If the <see cref="P:Infragistics.WebUI.Data.WebScheduleDbProvider.Connection"/> was not open before calling
            this method, then this method will open it (certain <i>behaviors</i> such
            as <em>CloseConnection</em> will effectively close the connection when you
            are through with this data reader) because calling <b>Read</b> on a data
            reader while the connection is closed is not allowed.</p>
            <p class="body">Inheritors must not allow this method to be called prior to
            the initialization and establishment of a good <b>Connection</b>. This 
            shouldn't be a problem as long as <b>GetReader</b> is only called during
            data binding operations.</p>
            </remarks>
        </member>
        <member name="M:Infragistics.WebUI.Data.WebScheduleDbProvider.GetReader(System.Data.IDbCommand)">
            <summary>
            Gets an <b>IDataReader</b> for a database selection with the default behavior.
            </summary>
            <param name="currentCommand">An <b>IDbCommand</b> specifying either a text
            command based on a SELECT statement, or a stored procedure returning multiple
            records.</param>
            <returns>An <b>IDataReader</b> open for forward-only, firehose reading access
            to a command's result set.</returns>
            <remarks>
            <p class="body">Inheritors may retrieve an <b>IDataReader</b> for use with
            an <b>IDbCommand</b> they've initialized in their own implementation of a
            fetch operation method through this method. When this <b>IDataReader</b>
            exhausts itself, the command behavior applied is based on the current
            setting of the <b>CommandBehaviorDefault</b> property.</p>
            <p class="body">If the <see cref="P:Infragistics.WebUI.Data.WebScheduleDbProvider.Connection"/> was not open before calling
            this method, then this method will open it (certain <i>behaviors</i> such
            as <em>CloseConnection</em> will effectively close the connection when you
            are through with this data reader) because calling <b>Read</b> on a data
            reader while the connection is closed is not allowed.</p>
            <p class="body">Inheritors must not allow this method to be called prior to
            the initialization and establishment of a good <b>Connection</b>. This 
            shouldn't be a problem as long as <b>GetReader</b> is only called during
            data binding operations.</p>
            <seealso cref="P:Infragistics.WebUI.Data.WebScheduleDbProvider.CommandBehaviorDefault"/>
            </remarks>
        </member>
        <member name="M:Infragistics.WebUI.Data.WebScheduleDbProvider.ReadObject(System.Data.IDataReader,Infragistics.WebUI.Data.ScheduleDataBinding,System.Object)">
            <summary>
            Reads a composite instance from the WebSchedule object model bound from
            the data model.
            </summary>
            <param name="reader">An <b>IDataReader</b>-implementation that has had
            <b>Read</b> called on it.</param>
            <param name="binding">A registered instance of any subclass of <b>ScheduleDataBinding</b>
            that is used when identifying the <b>Type</b> being bound across the data model into
            the WebSchedule object model</param>
            <param name="compositeInstance"><i>Optional.</i> An instance that has already been
            partially initialized by an earlier call to <b>ReadRecord</b>. May be null (or Nothing
            in Visual Basic .NET) when this composition is not required (<i>i.e.,</i> using stored
            procedures).</param>
            <returns>An instance of a WebSchedule object model type, with values assigned to it's
            properties from those in the data record that has been read. The caller may confidently
            type cast this instance to the expected return type in the WebSchedule object model for
            which the supplied <i>binding</i> was responsible. For example, if <b>ResourceBinding</b>
            were passed, then it is safe to assume the CLR <b>Type</b> of the object returned
            by <b>ReadRecord</b> would be a <b>Resource</b>.</returns>
            <remarks>
            <p class="body">Inheritors implementing their own operations on a custom data provider
            would invoke <b>ReadRecord</b> within the loop that calls <b>Read</b> on <i>reader</i>
            until the result set of an SQL command has been exhausted. Each call binds the database
            record to the instance in the WebSchedule object model represented by <i>binding</i>.
            This instance may have been created by a call to <see cref="M:Infragistics.WebUI.Data.ScheduleDataBinding.CreateInstance">CreateInstance</see>
            or it may re-use a previously constructed <i>compositeInstance</i>.</p>
            <p class="body">When implementing a composite object that involves multiple <b>ScheduleDataBinding</b>s
            (<i>e.g.,</i> because to fully populate it's properties, multiple tables in the data model may need to
            be read), the caller may pass a pre-constructed <i>compositeInstance</i> (it's the caller's responsibility
            to create this instance in advance). When supplied, <b>ReadRecord</b> will not call <b>CreateInstance</b>,
            and will instead populate bound values from this record into the <i>compositeInstance</i>. Generally,
            the additional complexity of composite instances are only necessary when using dynamic SQL commands.
            Developers are encouraged to avoid implementing this complexity in their custom data provider by
            instead using stored procedures which can compose values from multiple data tables in a single
            record, when supported.</p>
            <p class="body">Because subclasses of <b>ScheduleDataBinding</b> inherit all binding member properties
            from their base class, inheritors do not need to use composite data binding to deal with inheritance.
            A highly derived <b>ScheduleDataBinding</b> will bind public properties of its base class(es), for
            example, an <b>AppointmentBinding</b> is sufficient to data-bind both <b>Activity</b> (the base class
            of <b>Appointment</b>) and <b>Appointment</b> properties. It is not necessary to data bind using both
            the <b>ActivityBinding</b> and the <b>AppointmentBinding</b>.</p>
            <p class="note">The instance of the <b>ScheduleDataBinding</b> passed to <i>binding</i>
            must match the one a custom data provider has registered by calling <b>Add</b> (or
            <b>AddRange</b>) on <see cref="P:Infragistics.WebUI.Data.WebScheduleDataProviderBase.DataBindings">DataBindings</see>.
            If the same object reference is not found in <b>DataBindings</b> as is passed to the
            <b>ReadRecord</b> method, then metadata describing how data binding between the data
            model and object model should be performed will not be found, and this method fails.
            This metadata is cached the first time a particular <b>ScheduleDataBinding</b> gets
            added to the <b>DataBindings</b> collection because the initial map generation between
            object and data models is a relatively costly operation. Therefore, changes made to
            the <b>ScheduleDataBinding</b> instance between the time it was first added to the
            <b>DataBindings</b> and the time <b>ReadRecord</b> is called may not be reflected
            by the data bind.</p>
            <seealso cref="M:Infragistics.WebUI.Data.WebScheduleDbProvider.ReadObject(System.Data.IDataReader,Infragistics.WebUI.Data.ScheduleDataBinding)">ReadObject</seealso>
            </remarks>
        </member>
        <member name="M:Infragistics.WebUI.Data.WebScheduleDbProvider.ReadObject(System.Data.IDataReader,Infragistics.WebUI.Data.ScheduleDataBinding)">
            <summary>
            Reads an instance from the WebSchedule object model bound from the data
            model.
            </summary>
            <param name="reader">An <b>IDataReader</b>-implementation that has had
            <b>Read</b> called on it.</param>
            <param name="binding">A registered instance of any subclass of <b>ScheduleDataBinding</b>
            that is used when identifying the <b>Type</b> being bound across the data model into
            the WebSchedule object model</param>
            <returns>An instance of a WebSchedule object model type, with values assigned to it's
            properties from those in the data record that has been read. The caller may confidently
            type cast this instance to the expected return type in the WebSchedule object model for
            which the supplied <i>binding</i> was responsible. For example, if <b>ResourceBinding</b>
            were passed, then it is safe to assume the CLR <b>Type</b> of the object returned
            by <b>ReadRecord</b> would be a <b>Resource</b>.</returns>
            <remarks>
            <p class="body">Inheritors implementing their own operations on a custom data provider
            would invoke <b>ReadRecord</b> within the loop that calls <b>Read</b> on <i>reader</i>
            until the result set of an SQL command has been exhausted. Each call binds the database
            record to a new instance of a corresponding WebSchedule class by calling the
            <see cref="M:Infragistics.WebUI.Data.ScheduleDataBinding.CreateInstance">CreateInstance</see> method on <i>binding</i>.</p>
            <p class="note">The instance of the <b>ScheduleDataBinding</b> passed to <i>binding</i>
            must match the one a custom data provider has registered by calling <b>Add</b> (or
            <b>AddRange</b>) on <see cref="P:Infragistics.WebUI.Data.WebScheduleDataProviderBase.DataBindings">DataBindings</see>.
            If the same object reference is not found in <b>DataBindings</b> as is passed to the
            <b>ReadRecord</b> method, then metadata describing how data binding between the data
            model and object model should be performed will not be found, and this method fails.
            This metadata is cached the first time a particular <b>ScheduleDataBinding</b> gets
            added to the <b>DataBindings</b> collection because the initial map generation between
            object and data models is a relatively costly operation. Therefore, changes made to
            the <b>ScheduleDataBinding</b> instance between the time it was first added to the
            <b>DataBindings</b> and the time <b>ReadRecord</b> is called may not be reflected
            by the data bind.</p>
            <seealso cref="M:Infragistics.WebUI.Data.WebScheduleDbProvider.ReadObject(System.Data.IDataReader,Infragistics.WebUI.Data.ScheduleDataBinding,System.Object)">ReadObject</seealso>
            </remarks>
        </member>
        <member name="M:Infragistics.WebUI.Data.WebScheduleDbProvider.Fetch(Infragistics.WebUI.WebSchedule.DataContext)">
            <summary>
            Fetches WebSchedule objects from the data model using the configured
            data bindings and underlying data store technology.
            </summary>
            <param name="context">A <b>DataContext</b> describing the data bindings
            and operation to be performed.</param>
            <remarks>
            <p class="body">This method implements the <b>Fetch</b> method of the
            <b>IDataFetch</b> interface. The <b>WebScheduleInfo</b> consumes this
            interface in order to populate it's collections with Activities and
            Resources from the WebSchedule data model at data-bind time. Web
            application developers should not call this method directly from
            their scheduling applications.</p>
            <p class="body">The base class implementation of <b>Fetch</b> handles
            the following operations:</p>
            <list type="number">
            	<item>
            		<term>FetchActivities</term>
            		<description>Retrieves activities over a frame interval (date
            		range) for an organizing resource.</description>
            	</item>
            	<item>
            		<term>FetchReminders</term>
            		<description>Retrieves activities for which a reminder should
            		be triggered (based on the reminder lead-time) for their
            		organizing resource when logged on.</description>
            	</item>
            	<item>
            		<term>FetchResource</term>
            		<description>Retrieves a singular resource that is the active
            		organizer of activities.</description>
            	</item>
            	<item>
            		<term>FetchResources</term>
            		<description>Retrieves resources who can organize and own
            		activities.</description>
            	</item>
            </list>
            <p class="body">Inheritors developing their own custom data provider
            should override <b>Fetch</b> to support additional operations, current
            operations on different relational database management systems, and
            data bindings (<i>e.g.,</i> to increase the number of types the
            WebSchedule data model can persist from a scheduling application).
            Please see the help documentation for further information on extending
            <b>WebScheduleDbProvider</b> to create a custom data provider.</p>
            <p class="body">When extending the <b>WebScheduleDbProvider</b> (additional
            operations or data bindings), inheritors should first check <i>context</i>
            to see if it matches one of their extended <b>DataContext</b>s. When it
            does, the subclass is responsible for dispatching it to a method it
            implements for handling that operation and/or <b>ScheduleDataBinding</b>
            subclass. If the <i>context</i> does not match a recognized operation,
            then call the base implementation of <b>Fetch</b> to ensure proper
            dispatch and/or error handling.</p>
            <p class="body">When implementing support for a new relational database
            management system (or other underlying data store), the implementation
            of methods for standard operations (<i>i.e.,</i> "FetchActivities",
            "AddActivity", etc.) MAY not be compatible with that data technology.
            When this is the case, the overridden implementation of <b>Fetch</b>
            in the subclass should handle the standard operation and dispatch it
            to it's own method supporting the new data platform.</p>
            <seealso cref="M:Infragistics.WebUI.Data.WebScheduleDbProvider.Update(Infragistics.WebUI.WebSchedule.DataContext)"/>
            </remarks>
            <exception cref="T:System.ArgumentException">Thrown when <i>context</i> does
            not specify a supported operation. A valid <see cref="P:Infragistics.WebUI.WebSchedule.DataContext.Operation">Operation</see>
            must be one of "FetchResource", "FetchResources", "FetchActivities" or "FetchReminders".</exception>
            <exception cref="T:System.ArgumentNullException">Thrown when the supplied <i>context</i>
            is null (Nothing in Visual Basic .NET).</exception>
        </member>
        <member name="M:Infragistics.WebUI.Data.WebScheduleDbProvider.Update(Infragistics.WebUI.WebSchedule.DataContext)">
            <summary>
            Updates WebSchedule objects to the data model using the configured
            data bindings and underlying data store technology.
            </summary>
            <param name="context">A <b>DataContext</b> describing the data bindings
            and operation to be performed.</param>
            <remarks>
            <p class="body">This method implements the <b>Update</b> method of the
            <b>IDataUpdate</b> interface. The <b>WebScheduleInfo</b> consumes this
            interface in order to persist changes to Activities and Resources
            from the WebSchedule data model during postback changes and events.</p>
            <p class="body">Web application developers should not call this method
            directly from their scheduling applications. Instead, they may call the
            public methods exposed by the <b>WebScheduleDbProvider</b> for adding,
            editing, and deleting instances of Activities and Resources from the
            data store.</p>
            <p class="body">The base class implementation of <b>Update</b> handles
            the following operations:</p>
            <list type="number">
            	<item>
            		<term>AddActivity</term>
            		<description>Inserts an individual activity, optionally associated
            		with an organizing resource who owns it.</description>
            	</item>
            	<item>
            		<term>UpdateActivity</term>
            		<description>Updates an existing activity for edits performed by
            		an end user.</description>
            	</item>
            	<item>
            		<term>RemoveActivity</term>
            		<description>Deletes an existing activity in reaction to an end
            		user request.</description>
            	</item>
            	<item>
            		<term>AddResource</term>
            		<description>Inserts an individual resource. Not currently used
            		during interactive processing, but supports the <see cref="M:Infragistics.WebUI.Data.WebScheduleDbProvider.AddResource(Infragistics.WebUI.WebSchedule.Resource)">AddResource</see>
            		method for administering the WebSchedule data model.</description>
            	</item>
            	<item>
            		<term>UpdateResource</term>
            		<description>Updates an existing resource for changes. Not currently
            		used during interactive processing, but supports the <see cref="M:Infragistics.WebUI.Data.WebScheduleDbProvider.UpdateResource(Infragistics.WebUI.WebSchedule.Resource)">UpdateResource</see>
            		method for administering the WebSchedule data model.</description>
            	</item>
            	<item>
            		<term>RemoveResource</term>
            		<description>Deletes an existing resource. Not currently used
            		during interactive processing, but supports the <see cref="M:Infragistics.WebUI.Data.WebScheduleDbProvider.RemoveResource(Infragistics.WebUI.WebSchedule.Resource)">RemoveResource</see>
            		method for administering the WebSchedule data model.</description>
            	</item>
            </list>
            <p class="body">Inheritors developing their own custom data provider
            should override <b>Update</b> to support additional operations, current
            operations on different relational database management systems, and
            data bindings (<i>e.g.,</i> to increase the number of types the
            WebSchedule data model can persist from a scheduling application).
            Please see the help documentation for further information on extending
            <b>WebScheduleDbProvider</b> to create a custom data provider.</p>
            <p class="body">When extending the <b>WebScheduleDbProvider</b> (additional
            operations or data bindings), inheritors should first check <i>context</i>
            to see if it matches one of their extended <b>DataContext</b>s. When it
            does, the subclass is responsible for dispatching it to a method it
            implements for handling that operation and/or <b>ScheduleDataBinding</b>
            subclass. If the <i>context</i> does not match a recognized operation,
            then call the base implementation of <b>Update</b> to ensure proper
            dispatch and/or error handling.</p>
            <p class="body">When implementing support for a new relational database
            management system (or other underlying data store), the implementation
            of methods for standard operations (<i>i.e.,</i> "FetchActivities",
            "AddActivity", etc.) MAY not be compatible with that data technology.
            When this is the case, the overridden implementation of <b>Fetch</b>
            in the subclass should handle the standard operation and dispatch it
            to it's own method supporting the new data platform.</p>
            <seealso cref="M:Infragistics.WebUI.Data.WebScheduleDbProvider.AddActivity(Infragistics.WebUI.WebSchedule.AddActivityContext)">AddActivity</seealso>
            <seealso cref="M:Infragistics.WebUI.Data.WebScheduleDbProvider.UpdateActivity(Infragistics.WebUI.WebSchedule.UpdateActivityContext)">UpdateActivity</seealso>
            <seealso cref="M:Infragistics.WebUI.Data.WebScheduleDbProvider.RemoveActivity(Infragistics.WebUI.WebSchedule.RemoveActivityContext)">RemoveActivity</seealso>
            <seealso cref="M:Infragistics.WebUI.Data.WebScheduleDbProvider.AddResource(Infragistics.WebUI.WebSchedule.AddResourceContext)">AddResource</seealso>
            <seealso cref="M:Infragistics.WebUI.Data.WebScheduleDbProvider.UpdateResource(Infragistics.WebUI.WebSchedule.UpdateResourceContext)">UpdateResource</seealso>
            <seealso cref="M:Infragistics.WebUI.Data.WebScheduleDbProvider.RemoveResource(Infragistics.WebUI.WebSchedule.RemoveResourceContext)">RemoveResource</seealso>
            <seealso cref="M:Infragistics.WebUI.Data.WebScheduleDbProvider.Fetch(Infragistics.WebUI.WebSchedule.DataContext)"/>
            </remarks>
            <exception cref="T:System.ArgumentException">Thrown when <i>context</i> is
            not a supported <b>DataContext</b> class or subclass.  <i>context</i> must
            be <b>UpdateRemindersContext</b>, <b>UpdateActivityContext</b>, 
            <b>AddActivityContext</b>, <b>RemoveActivityContext</b>, 
            <b>UpdateResourceContext</b>, <b>AddResourceContext</b>, 
            <b>RemoveResourceContext</b>, or <b>UpdateSnoozeContext</b>.
            </exception>
            <exception cref="T:System.ArgumentNullException">Thrown when the supplied
            <i>context</i> is null (Nothing in Visual Basic .NET).</exception>
        </member>
        <member name="M:Infragistics.WebUI.Data.WebScheduleDbProvider.AddActivity(Infragistics.WebUI.WebSchedule.AddActivityContext)">
            <summary>
            Adds an activity to the WebSchedule data store.
            </summary>
            <param name="context">
            Describes the <b>Activity</b> being added.
            </param>
            <remarks>
            <p class="body">When <see cref="P:Infragistics.WebUI.Data.WebScheduleDbProvider.UseStoredProcedure"/> is true, this
            method executes the <b>Activity_Add</b> stored procedure. When it is
            false, dynamic SQL is employed.</p>
            </remarks>
        </member>
        <member name="M:Infragistics.WebUI.Data.WebScheduleDbProvider.AddVariance(Infragistics.WebUI.WebSchedule.AddVarianceContext)">
            <summary>
            Adds a variance to the WebSchedule data store.
            </summary>
            <param name="context">
            Describes the <b>Variance</b> being added.
            </param>
            <remarks>
            <p class="body">When <see cref="P:Infragistics.WebUI.Data.WebScheduleDbProvider.UseStoredProcedure"/> is true, this
            method executes the <b>Variance_Add</b> stored procedure. When it is
            false, dynamic SQL is employed.</p>
            </remarks>
        </member>
        <member name="M:Infragistics.WebUI.Data.WebScheduleDbProvider.AddRecurrence(Infragistics.WebUI.WebSchedule.AddRecurrenceContext)">
            <summary>
            Adds a recurrence to the WebSchedule data store.
            </summary>
            <param name="context">
            Describes the <b>Recurrence</b> being added.
            </param>
            <remarks>
            <p class="body">When <see cref="P:Infragistics.WebUI.Data.WebScheduleDbProvider.UseStoredProcedure"/> is true, this
            method executes the <b>Recurrence_Add</b> stored procedure. When it is
            false, dynamic SQL is employed.</p>
            </remarks>
        </member>
        <member name="M:Infragistics.WebUI.Data.WebScheduleDbProvider.AddResource(Infragistics.WebUI.WebSchedule.AddResourceContext)">
            <summary>
            Adds a resource to the WebSchedule data store.
            </summary>
            <param name="context">
            Describes the <b>Resource</b> being added.
            </param>
            <remarks>
            <p class="body">When <see cref="P:Infragistics.WebUI.Data.WebScheduleDbProvider.UseStoredProcedure"/> is true, this
            method executes the <b>Resource_Add</b> stored procedure. When it is
            false, dynamic SQL is employed.</p>
            </remarks>
        </member>
        <member name="M:Infragistics.WebUI.Data.WebScheduleDbProvider.RemoveActivity(Infragistics.WebUI.WebSchedule.RemoveActivityContext)">
            <summary>
            Removes an activity from the WebSchedule data store.
            </summary>
            <param name="context">
            Describes the <b>Activity</b> being removed.
            </param>
            <remarks>
            <p class="body">When <see cref="P:Infragistics.WebUI.Data.WebScheduleDbProvider.UseStoredProcedure"/> is true, this
            method executes the <b>Activity_Rem</b> stored procedure. When it is
            false, dynamic SQL is employed.</p>
            </remarks>
        </member>
        <member name="M:Infragistics.WebUI.Data.WebScheduleDbProvider.RemoveResource(Infragistics.WebUI.WebSchedule.RemoveResourceContext)">
            <summary>
            Removes a resource from the WebSchedule data store.
            </summary>
            <param name="context">
            Describes the <b>Resource</b> being removed.
            </param>
            <remarks>
            <p class="body">When <see cref="P:Infragistics.WebUI.Data.WebScheduleDbProvider.UseStoredProcedure"/> is true, this
            method executes the <b>Resource_Rem</b> stored procedure. When it is
            false, dynamic SQL is employed.</p>
            </remarks>
        </member>
        <member name="M:Infragistics.WebUI.Data.WebScheduleDbProvider.RemoveRecurrence(Infragistics.WebUI.WebSchedule.RemoveRecurrenceContext)">
            <summary>
            Removes a recurrence off of an existing activity from the WebSchedule data store.
            </summary>
            <param name="context">
            Describes the <b>Recurrence</b> being removed from an existing
            <b>Activity</b>.
            </param>
            <remarks>
            <p class="body">When <see cref="P:Infragistics.WebUI.Data.WebScheduleDbProvider.UseStoredProcedure"/> is true, this
            method executes the <b>Recurrence_Rem</b> stored procedure. When it is
            false, dynamic SQL is employed.</p>
            </remarks>
        </member>
        <member name="M:Infragistics.WebUI.Data.WebScheduleDbProvider.RemoveVariance(Infragistics.WebUI.WebSchedule.RemoveVarianceContext)">
            <summary>
            Removes an activity's variance from the WebSchedule data store.
            </summary>
            <param name="context">
            Describes the <strong>AppointmentVariance</strong> being removed.
            </param>
            <remarks>
            <p class="body">When <see cref="P:Infragistics.WebUI.Data.WebScheduleDbProvider.UseStoredProcedure"/> is true, this
            method executes the <b>Variance_Rem</b> stored procedure. When it is
            false, dynamic SQL is employed.</p>
            </remarks>
        </member>
        <member name="M:Infragistics.WebUI.Data.WebScheduleDbProvider.FetchActivities(Infragistics.WebUI.WebSchedule.FetchActivitiesContext)">
            <summary>
            Selects activities from the WebSchedule data store by date range
            and organizer.
            </summary>
            <param name="context">
            Describes the <b>Activities</b> being selected, in particular,
            their organizing resource and date range of interest.
            </param>
            <remarks>
            <p class="body">When <see cref="P:Infragistics.WebUI.Data.WebScheduleDbProvider.UseStoredProcedure"/> is true, this
            method executes the <b>Activity_SelByDate</b> stored procedure. When it is
            false, dynamic SQL is employed.</p>
            </remarks>
        </member>
        <member name="M:Infragistics.WebUI.Data.WebScheduleDbProvider.UpdateActivity(Infragistics.WebUI.WebSchedule.UpdateActivityContext)">
            <summary>
            Updates an existing activity in the WebSchedule data store.
            </summary>
            <param name="context">
            Describes the <b>Activity</b> being updated, in particular,
            the data key uniquely identifying this <b>Activity</b>.
            </param>
            <remarks>
            <p class="body">When <see cref="P:Infragistics.WebUI.Data.WebScheduleDbProvider.UseStoredProcedure"/> is true, this
            method executes the <b>Activity_Upd</b> stored procedure. When it is
            false, dynamic SQL is employed.</p>
            </remarks>
        </member>
        <member name="M:Infragistics.WebUI.Data.WebScheduleDbProvider.UpdateRecurrence(Infragistics.WebUI.WebSchedule.UpdateRecurrenceContext)">
            <summary>
            Updates an existing recurrence in the WebSchedule data store.
            </summary>
            <param name="context">
            Describes the <b>Recurrence</b> being updated, in particular,
            the data key uniquely identifying this <b>Recurrence</b> must
            be set.
            </param>
            <remarks>
            <p class="body">When <see cref="P:Infragistics.WebUI.Data.WebScheduleDbProvider.UseStoredProcedure"/> is true, this
            method executes the <b>Recurrence_Upd</b> stored procedure. When it
            is false, dynamic SQL is employed.</p>
            </remarks>
        </member>
        <member name="M:Infragistics.WebUI.Data.WebScheduleDbProvider.UpdateVariance(Infragistics.WebUI.WebSchedule.UpdateVarianceContext)">
            <summary>
            Updates an existing variance in the WebSchedule data store.
            </summary>
            <param name="context">
            Describes the <b>Variance</b> being updated, in particular,
            the data key uniquely identifying this <b>Variance</b>.
            </param>
            <remarks>
            <p class="body">When <see cref="P:Infragistics.WebUI.Data.WebScheduleDbProvider.UseStoredProcedure"/> is true, this
            method executes the <b>Variance_Upd</b> stored procedure. When it is
            false, dynamic SQL is employed.</p>
            </remarks>
        </member>
        <member name="M:Infragistics.WebUI.Data.WebScheduleDbProvider.UpdateResource(Infragistics.WebUI.WebSchedule.UpdateResourceContext)">
            <summary>
            Updates an existing resource in the WebSchedule data store.
            </summary>
            <param name="context">
            Describes the <b>Resource</b> being updated, in particular,
            the name uniquely identifying this <b>Resource</b>.
            </param>
            <remarks>
            <p class="body">When <see cref="P:Infragistics.WebUI.Data.WebScheduleDbProvider.UseStoredProcedure"/> is true, this
            method executes the <b>Resource_Upd</b> stored procedure. When it is
            false, dynamic SQL is employed.</p>
            </remarks>
        </member>
        <member name="M:Infragistics.WebUI.Data.WebScheduleDbProvider.FetchResources">
            <summary>
            Gets the collection of all resources from the WebSchedule data store.
            </summary>
            <returns>An enumerable, countable collection of resources as an
            implementation of <b>ICollection</b>.</returns>
            <remarks>
            <p class="body">This method supports administrative-mode applications
            that need to supply a pick-list or selection of activity organizers.
            Interactive scheduling applications do not require this method when
            their end user works with the activities of a single, visible
            <b>Resource</b>.</p>
            </remarks>
        </member>
        <member name="M:Infragistics.WebUI.Data.WebScheduleDbProvider.FetchResource(Infragistics.WebUI.WebSchedule.FetchResourcesContext)">
            <summary>
            Selects a single resource from the WebSchedule data store.
            </summary>
            <param name="context">
            Describes the <b>Resource</b> being selected.
            </param>
            <remarks>
            <p class="body">When <see cref="P:Infragistics.WebUI.Data.WebScheduleDbProvider.UseStoredProcedure"/> is true, this
            method executes the <b>Resource_SelByName</b> stored procedure. When
            it is false, dynamic SQL is employed.</p>
            </remarks>
        </member>
        <member name="M:Infragistics.WebUI.Data.WebScheduleDbProvider.FetchRecurrences(Infragistics.WebUI.WebSchedule.FetchRecurrencesContext)">
            <summary>
            Selects recurrence patterns from the WebSchedule data store by date range
            and organizer.
            </summary>
            <param name="context">
            Describes the <b>Recurrences</b> being selected, in particular,
            their organizing resource and date range of interest.
            </param>
            <remarks>
            <p class="body">When <see cref="P:Infragistics.WebUI.Data.WebScheduleDbProvider.UseStoredProcedure"/> is true, this
            method executes the <b>Recurrence_SelByDate</b> stored procedure. When it is
            false, dynamic SQL is employed.</p>
            </remarks>
        </member>
        <member name="M:Infragistics.WebUI.Data.WebScheduleDbProvider.FetchVariances(Infragistics.WebUI.WebSchedule.FetchVariancesContext)">
            <summary>
            Selects variances from the WebSchedule data store by date range
            and organizer.
            </summary>
            <param name="context">
            Describes the <b>Variances</b> being selected, in particular,
            their organizing resource and date range of interest. A variance
            represents information about a particular occurrence of a recurring
            activity that differs from the norm.
            </param>
            <remarks>
            <p class="body">When <see cref="P:Infragistics.WebUI.Data.WebScheduleDbProvider.UseStoredProcedure"/> is true, this
            method executes the <b>Variance_Sel</b> stored procedure. When it is
            false, dynamic SQL is employed.</p>
            </remarks>
        </member>
        <member name="M:Infragistics.WebUI.Data.WebScheduleDbProvider.OnInitializeResource(Infragistics.WebUI.WebSchedule.Resource,System.Collections.IList)">
            <summary>
            Initializes a <b>Resource</b> object that has been retrieved from the data source.
            </summary>
            <param name="resource">A <b>Resource</b> to be initialized and added to the
            <i>ownerCollection</i>.</param>
            <param name="ownerCollection">A container to hold the <i>resource</i> once
            it has been initialized.</param>
            <remarks>
            <p class="body">Inheritors should always call the base class implementation of
            <b>OnInitializeResource</b> before adding their own extended initialization logic.
            This ensures the necessary fields of the <b>Resource</b> receive proper
            initialization, and the <b>Resource</b> has been added to the <i>ownerCollection</i>
            (as long as it doesn't already exist; duplicate <b>Resource</b>s by key are
            discarded).</p>
            </remarks>
        </member>
        <member name="M:Infragistics.WebUI.Data.WebScheduleDbProvider.OnInitializeActivity(Infragistics.WebUI.WebSchedule.Appointment,System.Collections.IList)">
            <summary>
            Initializes an <b>Activity</b> object that has been retrieved from the data source.
            </summary>
            <param name="appointment">An <b>Activity</b> to be initialized and added to the
            <i>ownerCollection</i>.</param>
            <param name="ownerCollection">A container to hold the <i>appointment</i> once
            it has been initialized.</param>
            <remarks>
            <p class="body">Inheritors should always call the base class implementation of
            <b>OnInitializeActivity</b> before adding their own extended initialization logic.
            This ensures the necessary fields of the <b>Activity</b> are properly initialized,
            and the <b>Activity</b> is added to the <i>ownerCollection</i>.</p>
            </remarks>
        </member>
        <member name="M:Infragistics.WebUI.Data.WebScheduleDbProvider.OnInitializeRecurrence(Infragistics.WebUI.WebSchedule.Recurrence,System.Collections.IList)">
            <summary>
            Initializes a <b>Recurrence</b> object that has been retrieved from the data source.
            </summary>
            <param name="recurrence">A <b>Recurrence</b> to be initialized and added to the
            <i>ownerCollection</i>.</param>
            <param name="ownerCollection">A container to hold the <i>recurrence</i> once
            it has been initialized.</param>
            <remarks>
            <p class="body">Inheritors should always call the base class implementation of
            <b>OnInitializeRecurrence</b> before adding their own extended initialization logic.
            This ensures the necessary fields of the <b>Recurrence</b> are properly initialized,
            and the <b>Recurrence</b> is added to the <i>ownerCollection</i>.</p>
            </remarks>
        </member>
        <member name="M:Infragistics.WebUI.Data.WebScheduleDbProvider.AddActivity(Infragistics.WebUI.WebSchedule.Activity,Infragistics.WebUI.WebSchedule.Resource)">
            <summary>
            Adds an <b>Activity</b> that does not currently exist to the database.
            </summary>
            <param name="activity">An activity created dynamically by the application
            or taken from an external source, that is not already present in the data
            source.</param>
            <param name="resource">A resource that is the organizer affiliated with
            the <i>activity</i>, or null (Nothing in Visual Basic .NET) to indicate
            the <i>activity</i> has no <b>Resource</b> to be associated with it.
            </param>
            <remarks>
            <p class="body">WebSchedule automatically handles adding an <b>Activity</b>
            when an end user submits a new <b>Appointment</b> through the user interface.
            Developers would call <b>AddActivity</b> to add additional Activities they
            may have created programmatically. Ordinarily, <b>Activity</b> instances
            added to the <b>ActivitiesCollection</b> on <b>WebScheduleInfo</b> are
            not automatically saved to the data store.</p>
            <p class="body">The <b>AddActivity</b> method also supports administrative
            and batch applications to transform external scheduling information into the
            WebSchedule data model, and bulk load it into the data store. An example is
            an application that extracts, transforms, and loads user schedules from
            Microsoft Exchange into WebSchedule.</p>
            <p class="body">Any setting of the <b>DataKey</b> or <b>Key</b> properties
            of the supplied <i>activity</i> will be ignored, since this method adds a
            new row to the Activity data table. When this method is successful, the
            <b>DataKey</b> on the supplied <b>Activity</b> object reference will be
            modified to contain the auto-generated identifier from the database.</p>
            <p class="body">The supplied <i>resource</i> is used to enter a new row
            into the ActivityResource child table. When specified, the <i>resource</i>
            must exist in the <b>ResourcesCollection</b> of <b>WebScheduleInfo</b> and
            within the data store, or the referential integrity constraint of the
            WebSchedule data model will be violated. The <b>DataKey</b> of the
            <i>resource</i> is used when adding this row to ActivityResource and
            must be valid for the operation to be successful.</p>
            <p class="note">Were the <i>resource</i> omitted (passed in as null or
            Nothing in Visual Basic .NET) then the <i>activity</i> will be associated
            with the <b>UnassignedResource</b> by default.</p>
            </remarks>
            <exception cref="T:System.ArgumentNullException">Thrown when the <em>activity</em>
            was supplied as a null reference (or Nothing in Visual Basic .NET). An <b>Activity</b>
            must be non-null in order for it's properties to be inserted into the data store.
            </exception>
            <exception cref="T:System.NotSupportedException">Thrown when the concrete
            type of <em>activity</em> is something other than <b>Appointment</b>.
            Presently, only the insertion of <b>Appointment</b> objects into the
            data store is supported.</exception>
            <exception cref="T:System.ComponentModel.WarningException">Thrown when the
            <see cref="P:Infragistics.WebUI.Data.WebScheduleDataProviderBase.WebScheduleInfo">WebScheduleInfo</see>
            property has not been properly initialized before calling <b>AddActivity</b>.
            In order for <b>AddActivity</b> to add the supplied <em>activity</em> to
            the data store, the <b>WebScheduleDataProviderBase</b> must already be
            initialized with the same <b>WebScheduleInfo</b> as the <em>activity</em>
            was.</exception>
        </member>
        <member name="M:Infragistics.WebUI.Data.WebScheduleDbProvider.AddResource(Infragistics.WebUI.WebSchedule.Resource)">
            <summary>
            Adds a <b>Resource</b> that does not currently exist to the database.
            </summary>
            <param name="resource">A resource created dynamically by the application
            or taken from an external source.</param>
            <remarks>
            <p class="body">Any setting of the <b>DataKey</b> or <b>Key</b> properties
            of the supplied <i>resource</i> will be ignored, since this method adds a
            new row to the Resource data table. When this method is successful, the
            <b>DataKey</b> on the supplied <b>Resource</b> object reference will be
            modified to contain the auto-generated identifier from the database.</p>
            </remarks>
        </member>
        <member name="M:Infragistics.WebUI.Data.WebScheduleDbProvider.UpdateActivity(Infragistics.WebUI.WebSchedule.Activity)">
            <summary>
            Modifies an <b>Activity</b> that already exists in the database.
            </summary>
            <param name="activity">An initialized activity loaded from the data source.
            </param>
            <remarks>
            <p class="body">WebSchedule automatically handles updating an <b>Activity</b>
            when an end user directly edits it within the user interface. Developers would
            call <b>UpdateActivity</b> to persist changes their application makes to other
            copies of activities. Ordinarily, such changes would not be persistent.</p>
            <p class="body">The <b>UpdateActivity</b> method also supports administrative
            tasks an application might perform on a WebSchedule data store: such as
            moving all start times for appointments back one hour on a specific date,
            or marking all appointments more than one month old with Low <b>Importance</b>
            as an indication they can be deleted or archived.</p>
            <p class="body">The <b>DataKey</b> property of the specified <i>activity</i>
            is used to edit an existing row within the Activity data table. If a row
            having the <b>DataKey</b> as it's primary key does not already exist, then
            the <b>UpdateActivity</b> method fails.</p>
            <p class="note">The data provider cannot add the supplied <i>activity</i>
            as if it were a new row when it finds it doesn't exist, because it
            must respect the primary key constraints of the Activity table. In
            particular, the primary key may be an AutoNumber column for which
            direct assignment is unsupported (or potentially hazardous) in many
            relational database management systems.</p>
            <p class="body">No other properties on the <b>Activity</b> instance
            supplied to <b>UpdateActivity</b> are used as keys. Instead, all other
            properties (on which data binding is defined) are used as the source
            of values that update their corresponding columns in the existing row
            of the Activity table.</p>
            </remarks>
            <exception cref="T:System.ArgumentNullException">Thrown when the <em>activity</em>
            was supplied as a null reference (or Nothing in Visual Basic .NET). An <b>Activity</b>
            must be non-null to specify a <b>DataKey</b> and have property values with which
            to update the data store.
            </exception>
            <exception cref="T:System.NotSupportedException">Thrown when the concrete
            type of <em>activity</em> is something other than <b>Appointment</b>.
            Presently, only the update of <b>Appointment</b> objects into the
            data store is supported.</exception>
            <exception cref="T:System.ComponentModel.WarningException">Thrown when the
            <see cref="P:Infragistics.WebUI.Data.WebScheduleDataProviderBase.WebScheduleInfo">WebScheduleInfo</see>
            property has not been properly initialized before calling <b>UpdateActivity</b>.
            In order for <b>UpdateActivity</b> to modify the supplied <em>activity</em> in
            the data store, the <b>WebScheduleDataProviderBase</b> must already be
            initialized with the same <b>WebScheduleInfo</b> as the <em>activity</em>
            was.</exception>
        </member>
        <member name="M:Infragistics.WebUI.Data.WebScheduleDbProvider.UpdateResource(Infragistics.WebUI.WebSchedule.Resource)">
            <summary>
            Modifies a <b>Resource</b> that already exists in the database.
            </summary>
            <param name="resource">An initialized resource loaded from the
            data source.</param>
            <remarks>
            <p class="body">The supplied <i>resource</i> must have a valid
            <b>DataKey</b> that can be used to identify it's current place
            in the Resource table. This method updates the column values in
            a single row of the Resource table based on the <b>DataKey</b>.
            It does not perform extra checking to confirm that the supplied
            <b>Resource</b> instance matches the row it finds within the
            Resource table field-for-field.</p>
            </remarks>
            <exception cref="T:System.ArgumentNullException">Thrown when the
            <em>resource</em> was supplied as a null reference (or Nothing
            in Visual Basic .NET). A <b>Resource</b> must be non-null to
            specify a <b>DataKey</b> and have property values with which
            to update the data store.</exception>
        </member>
        <member name="M:Infragistics.WebUI.Data.WebScheduleDbProvider.RemoveActivity(Infragistics.WebUI.WebSchedule.Activity)">
            <summary>
            Deletes an existing <b>Activity</b> permanently from the database,
            and detaches it from any related <b>Resource</b>.
            </summary>
            <param name="activity">An activity originating from the database
            that has a current, valid <b>DataKey</b> and is to be removed
            from the database.</param>
            <remarks>
            <p class="body">WebSchedule automatically handles removal of an
            <b>Activity</b> when the end user clicks the 'Delete' button
            from within the Edit Appointment dialog of WebSchedule's user
            interface. Developers would call <b>RemoveActivity</b> to make
            additional deletions based on application-defined criteria.
            The act of removing an <b>Activity</b> from it's 
            <b>ActivitiesCollection</b> is insufficient to commit this
            change to the data store. In order to persist such a change,
            the developer must pass the removed <b>Activity</b> to this
            method.</p>
            <p class="body">The <b>RemoveActivity</b> method also supports
            administrative tasks an application might perform on a WebSchedule
            data store: such as in a nightly batch responsible for deleting
            all appointments having an <b>EndDateTime</b> of more than a year
            in the past for the purpose of keeping the database size manageable.</p>
            <p class="body">The supplied <i>activity</i> must have a valid
            <b>DataKey</b> that can be used to identify it's current row
            in the Activity table. <b>RemoveActivity</b> then deletes that
            row from the Activity table based on the <b>DataKey</b>. It
            does not perform extra checking to confirm that the supplied
            <b>Activity</b> instance matches the row within the Activity
            table, field-for-field. The activity is permanently deleted,
            and cannot be recovered by ordinary means (see <b>Note</b>
            below).</p>
            <p class="body">Calling <b>RemoveActivity</b> only removes the
            <b>Activity</b> from the data store. The developer must exercise
            caution not to treat any copies of that <b>Activity</b> still
            contained in <b>ActivitiesCollection</b> (or other object
            references) as continuing to be valid. The safest practice
            for developers is to first remove any and all references to the
            <b>Activity</b> instance from collections his/her application
            may be using, and then to pass the instance to <b>RemoveActivity</b>
            for final removal from the data store so it does not return
            to the collections on a subsequent data-bind fetch operation.</p>
            <p class="body">When all Activities associated with an organizing
            <b>Resource</b> have been removed, this does not invalidate the
            <b>Resource</b>. By default, this <b>Resource</b> remains available
            to have additional activities scheduled for it. If the developer
            needs orphaned resources to be removed, then the application should
            call <see cref="M:Infragistics.WebUI.Data.WebScheduleDbProvider.RemoveResource(Infragistics.WebUI.WebSchedule.Resource)">RemoveResource</see> to finish cleaning up.</p>
            <p class="note">Developers are encouraged to deploy scheduling
            applications to an industrial-grade database management system
            (in this case, one that supports keeping transaction logs and
            backups). When combined with a sound database recovery plan,
            this deployment scenario allows for restoration of inadvertantly
            removed Activities. Please speak with your Database Administrator
            to learn more about what options are available.</p>
            </remarks>
            <exception cref="T:System.ArgumentException">Thrown when the
            <em>activity</em> contains a null reference (or Nothing
            in Visual Basic .NET) for it's <b>DataKey</b> property.
            A non-null <b>DataKey</b> must be specified to identify
            an existing Activity row to delete from the data store.
            </exception>
            <exception cref="T:System.ArgumentNullException">Thrown when the
            <em>activity</em> was supplied as a null reference (or Nothing
            in Visual Basic .NET). An <b>Activity</b> must be non-null to
            specify a <b>DataKey</b> to delete.
            </exception>
            <exception cref="T:System.ComponentModel.WarningException">Thrown when the
            <see cref="P:Infragistics.WebUI.Data.WebScheduleDataProviderBase.WebScheduleInfo">WebScheduleInfo</see>
            property has not been properly initialized before calling <b>RemoveActivity</b>.
            In order for <b>RemoveActivity</b> to delete the supplied <em>activity</em> in
            the data store, the <b>WebScheduleDataProviderBase</b> must already be
            initialized with the same <b>WebScheduleInfo</b> as the <em>activity</em>
            was.</exception>
        </member>
        <member name="M:Infragistics.WebUI.Data.WebScheduleDbProvider.RemoveResource(Infragistics.WebUI.WebSchedule.Resource)">
            <summary>
            Deletes an existing <b>Resource</b> permanently from the database,
            and detaches it from any related <b>Activities</b>.
            </summary>
            <param name="resource">A resource originating from the database that
            has a current, valid <b>DataKey</b> and is to be removed from the
            database.</param>
            <remarks>
            <p class="body">The supplied <i>resource</i> must have a valid
            <b>DataKey</b> that can be used to identify it's current place
            in the Resource table. This method deletes a single row from
            the Resource table based on the <b>DataKey</b>. It does not
            perform extra checking to confirm that the supplied <b>Resource</b>
            instance matches the row within the Resource table field-for-field.</p>
            <p class="body">References within the ActivityResource table to
            the <i>resource</i> being deleted will be replaced by references
            to the UnassignedResource. This effectively disconnects the
            Activity from it's Resource. Depending on scheduling application
            requirements, Administrators may periodically need to clean-up
            rows in the Activity table associated with the UnassignedResource
            as resources are removed from the application over time.</p>
            <p class="note">Deleting the UnassignedResource from the Resource
            table is not programmatically supported. Any attempt to remove the
            UnassignedResource row from the Resource table jeopardizes data
            model integrity as it's presence is required by several operations.
            </p>
            </remarks>
            <exception cref="T:System.ArgumentException">Thrown when the
            <em>resource</em> contains a null reference (or Nothing
            in Visual Basic .NET) for it's <b>Name</b> property.
            A non-null <b>Name</b> must be specified to identify
            an existing Resource row to delete from the data store.
            </exception>
            <exception cref="T:System.ArgumentNullException">Thrown when the
            <em>resource</em> was supplied as a null reference (or Nothing
            in Visual Basic .NET). An <b>Resource</b> must be non-null to
            specify it's <b>Name</b> to delete.
            </exception>
        </member>
        <member name="M:Infragistics.WebUI.Data.WebScheduleDbProvider.OnConnectionError(System.Object,Infragistics.WebUI.Data.DataProviderErrorEventArgs)">
            <summary>
            Called in response to a failure to open or close the <see cref="P:Infragistics.WebUI.Data.WebScheduleDbProvider.Connection"/>.
            </summary>
            <param name="sender">The <b>IDbConnection</b> implementation that could not be
            opened or closed.</param>
            <param name="args">Event arguments for firing the <b>DataProviderError</b> event.</param>
            <remarks>
            <p class="body">Inheritors may override this method to supplement it with their own
            error handling or recovery processing, however they must ensure the base method
            implementation gets called to fire the <b>DataProviderError</b> event and perform
            other necessary clean-up.</p>
            </remarks>
        </member>
        <member name="M:Infragistics.WebUI.Data.WebScheduleDbProvider.OnDataError(System.Object,Infragistics.WebUI.Data.DataProviderErrorEventArgs)">
            <summary>
            Called in response to a failure to execute a command or bind parameters.
            </summary>
            <param name="sender">The <b>IDbCommand</b> implementation if the
            error occured before command execution.</param>
            <param name="args">Event arguments for firing the <b>DataProviderError</b>
            event.</param>
            <remarks>
            <p class="body">Inheritors may override this method to supplement it with
            their own error handling or recovery processing, however they must ensure
            the base method implementation gets called to fire the <b>DataProviderError</b>
            event and perform other necessary clean-up.</p>
            </remarks>
        </member>
        <member name="M:Infragistics.WebUI.Data.WebScheduleDbProvider.OnConcurrencyConflict(System.Object,Infragistics.WebUI.Data.DataProviderErrorEventArgs)">
            <summary>
            Called when the data provider traps an attempt to update the data store
            with an old version of some WebSchedule data object.
            </summary>
            <param name="sender">The WebSchedule data object that is out-of-date.
            An implementation may use it's <b>DataKey</b> to retrieve the current
            data object from the data store (<i>e.g.</i>, in order to arbitrate
            fields in conflict).</param>
            <param name="args">Event arguments for firing the <b>DataProviderError</b>
            event.</param>
            <remarks>
            <p class="body">Inheritors may override this method to supplement it with
            their own recovery or conflict resolution process, however they must ensure
            the base method implementation gets called to fire the <b>DataProviderError</b>
            event and perform other necessary clean-up.</p>
            <p class="body">Although not supported by default, the <b>OnConcurrencyConflict</b>
            notification allows inheritors to implement their own custom logic for dealing
            with concurrency conflicts in two manners: (a) notify end users posting a late
            update to an <b>Activity</b> that their changes could not be accepted,
            (b) arbitrate conflicts field-by-field between the two version of the
            <b>Activity</b>.</p>
            <p class="body">Application developers can subscribe to the <b>DataProviderError</b>
            event to receive notice of a concurrency conflict, and pass on that notice to the
            end user (<i>e.g.</i>, by registering a client script block to pop up a message
            box informing the end user of the conflict). It's not required to subclass the
            <b>WebScheduleDbProvider</b> just to receive this notification.</p>
            </remarks>
        </member>
        <member name="E:Infragistics.WebUI.Data.WebScheduleDbProvider.InitializeActivity">
            <summary>
            Event fired each time a new <b>Activity</b> gets loaded from the
            database and initialized.
            </summary>
            <remarks>
            <p class="body">This event fires immediately after each individual
            <b>Activity</b> is databound from a record in the database, and
            added to it's parent collection. Developers may subscribe to handle
            this event by registering a method in their application matching
            the signature of <see cref="T:Infragistics.WebUI.Data.InitializeActivityEventHandler">InitializeActivityEventHandler</see>.
            A reference to the new <b>Activity</b> will be passed inside of
            the event arguments to that event handler when it gets called back.
            </p>
            <seealso cref="T:Infragistics.WebUI.Data.InitializeActivityEventArgs">InitializeActivityEventArgs</seealso>
            </remarks>
        </member>
        <member name="E:Infragistics.WebUI.Data.WebScheduleDbProvider.InitializeResource">
            <summary>
            Event fired each time a new <b>Resource</b> gets loaded from the
            database and initialized.
            </summary>
            <remarks>
            <p class="body">This event fires immediately after each individual
            <b>Resource</b> is databound from a record in the database, and
            added to it's parent collection. Developers may subscribe to handle
            this event by registering a method in their application matching
            the signature of <see cref="T:Infragistics.WebUI.Data.InitializeResourceEventHandler">InitializeResourceEventHandler</see>.
            A reference to the new <b>Resource</b> will be passed inside of
            the event arguments to that event handler when it gets called back.
            </p>
            <seealso cref="T:Infragistics.WebUI.Data.InitializeResourceEventArgs">InitializeResourceEventArgs</seealso>
            </remarks>
        </member>
        <member name="E:Infragistics.WebUI.Data.WebScheduleDbProvider.DataProviderError">
            <summary>
            Event fired in response to a data-related error or condition that has
            prevented an operation from being completed.
            </summary>
            <remarks>
            <p class="body">This event fires in response to a number of data-related,
            connection-related, or bind-related error conditions (see <see cref="T:Infragistics.WebUI.Data.ErrorCondition"/>
            for a list of causes). Most of these errors are related to an <b>Exception</b>
            that has been caught from the underlying .NET data provider when trying to use
            the <see cref="P:Infragistics.WebUI.Data.WebScheduleDbProvider.Connection"/> or commands configured within the <b>OperationContext</b>.
            Binding errors occur due to type or name mismatches between WebSchedule data model and
            WebSchedule object model as defined by the <see cref="T:Infragistics.WebUI.Data.ScheduleDataBinding"/>. Concurrency
            errors occur in multi-user environments when an attempt is made to update the data store
            with an old copy of an object, and these are trapped so an application can notify the
            end user that their change could not be made.</p>
            <seealso cref="T:Infragistics.WebUI.Data.DataProviderErrorEventArgs"/>
            </remarks>
        </member>
        <member name="E:Infragistics.WebUI.Data.WebScheduleDbProvider.InitializeRecurrence">
            <summary>
            Event fired each time a new <b>Recurrence</b> gets loaded from the
            database and initialized.
            </summary>
            <remarks>
            <p class="body">This event fires immediately after each individual
            <b>Recurrence</b> is databound from a record in the database, and
            added to it's parent collection. Developers may subscribe to handle
            this event by registering a method in their application matching
            the signature of <see cref="T:Infragistics.WebUI.Data.InitializeRecurrenceEventHandler">InitializeRecurrenceEventHandler</see>.
            A reference to the new <b>Recurrence</b> will be passed inside of
            the event arguments to that event handler when it gets called back.
            </p>
            <p class="note">The <b>InitializeRecurrence</b> event fires before
            the root activity has been loaded for the recurrence.</p>
            <seealso cref="T:Infragistics.WebUI.Data.InitializeRecurrenceEventArgs">InitializeRecurrenceEventArgs</seealso>
            </remarks>
        </member>
        <member name="P:Infragistics.WebUI.Data.WebScheduleDbProvider.ConnectionStringDefault">
            <summary>
            Default connection string used to establish a connection with
            the Data Provider when no <b>ConnectionString</b> is supplied
            by the developer.
            </summary>
            <remarks>
            <p class="body">Inheritors may override this read-only property
            with a default connection string suitable for their own .NET Data
            Provider. The <see cref="P:Infragistics.WebUI.Data.WebScheduleDbProvider.Connection"/> property calls the subclass'
            implementation of <see cref="M:Infragistics.WebUI.Data.WebScheduleDbProvider.CreateConnection(System.String)"/> and passes the
            connection string specified here when a connection is first
            initialized.</p>
            <p class="body">Connection strings can contain sensitive logon
            credentials for accessing database resources, therefore developers
            must exercise caution in securing the places in which connection
            strings can appear in their code. While a default connection is
            offered for convenience, frequently it is more secure to assign
            an <b>IDbConnection</b> component (such as an <b>OleDbConnection</b>)
            directly to the <see cref="P:Infragistics.WebUI.Data.WebScheduleDbProvider.Connection"/> property in <b>Page_Load</b>.
            In this manner, application code can create a connection string with
            the necessary logon credentials at the last moment, drawn from a
            securable source such as the web.config file or LSA.</p>
            <p class="body">Inheritors providing a default connection string
            may make use of the <see cref="M:Infragistics.WebUI.Data.WebScheduleDbProvider.FilterConnectionString(System.String,System.String)"/> method
            to achieve a similar effect. <b>FilterConnectionString</b> is
            called before the default connection string is used, and can add
            logon credentials at the last moment to the connection string.
            An overridden implementation of <b>FilterConnectionString</b>
            may obtain those logon credentials from a secured resource.</p>
            </remarks>
        </member>
        <member name="P:Infragistics.WebUI.Data.WebScheduleDbProvider.ConnectionID">
            <summary>
            Identifies an <b>IDbConnection</b> component on the <b>Page</b> that should
            initialize this data provider's <see cref="P:Infragistics.WebUI.Data.WebScheduleDbProvider.Connection"/> property.
            </summary>
            <value>Programmatic identifier of a component on the <b>Page</b> (typically
            as a protected member field) that the <b>Connection</b> property should attempt
            to connect through.</value>
            <remarks>
            <p class="body">Assigns a connection component from the design-time component
            tray (for instance, an <b>OleDbConnection</b> named <em>oleDbConnection1</em>)
            to this <b>WebScheduleDbProvider</b>. Because this is an abstract class, the
            implementation of <b>IDbConnection</b> assigned must be compatible with the
            underlying database technology supported by the <b>WebScheduleDbProvider</b>
            subclass in use, or undefined behavior may result.</p>
            <p class="body">Applications calling <b>Close</b> on the connection component
            wired to the <b>WebScheduleDbProvider</b> through <b>ConnectionID</b> do not
            need to call <b>Close</b> directly on the <b>Connection</b> property because
            they represent the same object reference.</p>
            <p class="body">When an application needs to change the connection at run-time,
            the developer needs to assign a new <b>IDbConnection</b> implementation directly
            to the <see cref="P:Infragistics.WebUI.Data.WebScheduleDbProvider.Connection"/> property.</p>
            <p class="note">If the <b>WebScheduleDbProvider</b> does not have <b>TypeInformation</b>
            permission to reflect against and read the object reference of the <b>IDbConnection</b>
            component named by this property, then it cannot bind to it at run-time.  In this situation,
            an application must either imperatively call <see cref="M:Infragistics.WebUI.Data.WebScheduleDbProvider.Connect(System.String)"/> with a connection
            string, or assign an <b>IDbConnection</b> implementation (such as the protected field that
            contains the original connection component) to <b>Connection</b> directly.</p>
            </remarks>
            <exception cref="T:System.NotSupportedException">Thrown when a value is assigned
            to the <b>ConnectionID</b> property at run-time. This property is intended only
            for design-time serialization of an <b>IDbConnection</b> component; developers
            must assign a suitable <b>IDbConnection</b> implementation to the <see cref="P:Infragistics.WebUI.Data.WebScheduleDbProvider.Connection"/>
            property directly at run-time.</exception>
        </member>
        <member name="P:Infragistics.WebUI.Data.WebScheduleDbProvider.DataSourceID">
            <summary>
            Identifies a <b>SqlDataSource</b> control on the <b>Page</b> that will be used
            to initialize this data provider's <see cref="P:Infragistics.WebUI.Data.WebScheduleDbProvider.Connection"/> property.
            </summary>
            <value>Programmatic identifier of a control on the <b>Page</b> that the
            <b>Connection</b> property should access for information on locating a
            database.</value>
            <remarks>
            <p class="body">Set this property to a <b>SqlDataSource</b> on the design
            surface within Microsoft Visual Studio .NET 2005 (and later) to direct the
            WebSchedule data provider to use this data source to identify the connection
            information it requires to reach the database.</p>
            <p class="body">As an alternative to setting the <b>DataSourceID</b> property
            in the designer, at run-time you may directly assign your <b>IDbConnection</b>-implementing
            component to the WebSchedule data provider using the <see cref="P:Infragistics.WebUI.Data.WebScheduleDbProvider.Connection"></see>
            property, or call the <see cref="M:Infragistics.WebUI.Data.WebScheduleDbProvider.Connect(System.String)"></see> method with a connection
            string appropriate for your database.</p>
            </remarks>
            <seealso cref="M:Infragistics.WebUI.Data.WebScheduleDbProvider.EnsureDataSourceID"></seealso>
        </member>
        <member name="P:Infragistics.WebUI.Data.WebScheduleDbProvider.Connection">
            <summary>
            Contains the <b>IDbConnection</b> implementation representing a database
            connection to the underlying data access technology.
            </summary>
            <remarks>
            <p class="body">The initial <b>IDbConnection</b> implementation returned
            by this property will be initialized based on the <see cref="P:Infragistics.WebUI.Data.WebScheduleDbProvider.ConnectionID"/>
            assigned to the <b>WebScheduleDbProvider</b>. When no explicit connection
            is established at design-time, a default <b>IDbConnection</b> based on the
            <see cref="P:Infragistics.WebUI.Data.WebScheduleDbProvider.ConnectionStringDefault"/> is created using <see cref="M:Infragistics.WebUI.Data.WebScheduleDbProvider.CreateConnection(System.String)"/>.
            </p>
            <p class="body">When the <b>WebScheduleDbProvider</b> creates an <b>IDbConnection</b>
            implementation, it takes full responsibility for closing and disposing of it
            when processing of the <b>Page</b> ends. When the application creates it's own
            <b>IDbConnection</b> implementation and assigns it to the <b>Connection</b>
            property, then the application is responsible for closing and disposing of
            it. Similarly, the <b>WebScheduleDbProvider</b> does not close or dispose
            a connection initialized by the design-time setting of a <see cref="P:Infragistics.WebUI.Data.WebScheduleDbProvider.ConnectionID"/>.
            </p>
            </remarks>
        </member>
        <member name="P:Infragistics.WebUI.Data.WebScheduleDbProvider.UseStoredProcedure">
            <summary>
            Indicates whether stored procedures are used to query and
            update the data provider.
            </summary>
            <remarks>
            <p class="body">If supported, developers are strongly encouraged
            to use stored procedures. They generally execute faster because
            they can be compiled and/or optimized by query planning and index
            selection techniques by the database, they are more easily managed
            and secured by DBAs through the user and role facilities offered
            by most databases, and their parameterized interface gives
            developers an addition level of resiliency against SQL-injection
            vulnerabilities.</p>
            <p class="body">Not every data provider supports the use of stored
            procedures.</p>
            </remarks>
        </member>
        <member name="P:Infragistics.WebUI.Data.WebScheduleDbProvider.UseStoredProcedureDefault">
            <summary>
            The default value for the <see cref="P:Infragistics.WebUI.Data.WebScheduleDbProvider.UseStoredProcedure"/> property.
            </summary>
            <value>
            The base class implementation of <b>UseStoredProcedureDefault</b>
            always returns False as the default. Inheritors may override this
            property to return True, if they support stored procedures.
            </value>
            <remarks>
            <p class="body">This is called at construction-time to initialize
            the field holding the stored procedure flag, based on whether the
            underlying data provider supports stored procedures. It is also
            called at serialization-time to determine whether the design-time
            setting of <b>UseStoredProcedure</b> should be preserved. Because
            it is called early in the <b>WebScheduleDbProvider</b> lifecycle,
            any overriding implementations of this property should avoid any
            interactions with other components (which may not have had an
            opportunity to initialize themselves).</p>
            </remarks>
        </member>
        <member name="P:Infragistics.WebUI.Data.WebScheduleDbProvider.SuppressOccurrenceConversion">
            <summary>
            Disables conversion of Occurrences into their recurring roots.
            </summary>
            <value>False when Occurrences (where detected) should be converted
            into their Recurrence root activity before a database operation
            sensitive to this distinction takes place, otherwise True to
            suppress this behavior.</value>
            <remarks>
            <p class="body">Some WebSchedule data provider operations, such
            as the <see cref="M:Infragistics.WebUI.Data.WebScheduleDbProvider.UpdateActivity(Infragistics.WebUI.WebSchedule.Activity)"/> method, update an
            <strong>Activity</strong> in the data source using the timestamp
            to protect against concurrency violations. Occurrences generally
            do not have a timestamp, and are not represented individually in
            the standard WebSchedule data model as rows within the Activity
            table (unless they are variances). The important takeaway from
            this is that Occurrences are instances of an Activity created at
            run-time and not from the data source. An update operation will
            fail if it is performed on an occurrence.</p>
            <p class="body">Normally, the WebSchedule data provider will
            convert an occurrence (if one has been detected) into it's
            recurrence root Activity, which has a data source-generated
            timestamp and <strong>DataKey</strong> property. Therefore,
            the default value of this property is False.</p>
            <p class="body">Inheritors implementing a custom data provider
            which treats occurrences differently from the standard data
            model may need to override this property to return True, if
            they want to suppress these conversions from taking place
            automatically by those data provider methods affected.</p>
            </remarks>
        </member>
        <member name="P:Infragistics.WebUI.Data.WebScheduleDbProvider.CommandBehaviorDefault">
            <summary>
            Specifies the default <b>CommandBehavior</b> used by the method
            <see cref="M:Infragistics.WebUI.Data.WebScheduleDbProvider.GetReader(System.Data.IDbCommand)">GetReader</see>.
            </summary>
            <value>The <b>CommandBehavior</b> applied when nothing is specified
            for <b>GetDataReader</b>. By default, after calling <b>GetDataReader</b>
            the <b>IDataReader</b> implementation returned will behave according
            to the <b>CommandBehavior</b> of <em>CloseConnection</em>. This is,
            it will close the underlying connection when finished.</value>
            <remarks>
            <p class="body">Sometimes inheritors may want to perform multiple
            commands without closing the underlying connection. Setting the
            <b>CommandBehaviorDefault</b> allows them to modify the default
            behavior associated with a call to <b>GetDataReader</b>. Note
            that inheritors always have the option of calling the overload
            of <b>GetDataReader</b> accepting an explicit <b>CommandBehavior</b>
            as it's second parameter if the situations calls for a behavior
            different from that of <b>CommandBehaviorDefault</b>.</p>
            </remarks>
        </member>
        <member name="T:Infragistics.WebUI.Data.WebScheduleOleDbProvider">
            <summary>
            Data provider for <b>WebSchedule</b> and it's OLE DB compatible
            data model.
            </summary>
            <remarks>
            <p class="body">The <b>WebScheduleOleDbProvider</b> is a
            specialized <see cref="T:Infragistics.WebUI.Data.WebScheduleDbProvider"/> offering data
            abstraction and translation services to the <b>WebSchedule</b>
            elements of a web application from OLE DB-compatible data
            sources.</p>
            <p class="body">The <b>WebScheduleDbProvider</b>s serve as the
            data abstraction layer (DAL) between an application's database
            provider and the <b>WebSchedule</b> data binding interface. The
            different <em>Data Bindings</em> an application attaches to his
            provider determine the mappings between a custom database schema
            (which may vary between applications), and the eventual 
            <b>WebSchedule</b> object model (which remains fixed for a
            particular version).</p>
            <p class="body">Web applications using OLE DB data sources to
            persist their scheduling information should use the
            <b>WebScheduleOleDbProvider</b> to map data stored within
            their OLE DB data source to the <b>WebSchedule</b> object model.</p>
            </remarks>
        </member>
        <member name="M:Infragistics.WebUI.Data.WebScheduleOleDbProvider.#ctor">
            <summary>
            Default constructor initializes fields to their initial values.
            </summary>
            <remarks>
            <p class="body">Classes inheriting from <b>WebScheduleOleDbProvider</b>
            must provide their own constructors to create more purposeful instances.
            Inheritors will always call this parameterless base class constructor from
            their own constructors by default.</p>
            </remarks>
        </member>
        <member name="M:Infragistics.WebUI.Data.WebScheduleOleDbProvider.CreateConnection(System.String)">
            <summary>
            Establishes a database connection from the supplied <b>ConnectionString</b>
            to an OLE DB Data Provider.
            </summary>
            <param name="connectionStr">A connection string that should be valid
            for the OLE DB Data Provider.</param>
            <returns>A general-purpose <b>IDbConnection</b> representing a database
            connection usable in a provider-independent manner.</returns>
            <remarks>
            <p class="body">Inheritors must override this virtual factory method in
            order to provide an <b>OleDbConnection</b> using the supplied <em>connectionString</em>.
            <b>CreateConnection</b> will be called by the <b>Connection</b> property when
            the connection is first demanded.</p>
            </remarks>
        </member>
        <member name="M:Infragistics.WebUI.Data.WebScheduleOleDbProvider.FilterDataSource(System.Web.UI.DataSourceControl)">
            <summary>
            Verifies the <b>DataSourceControl</b> meets the requirements of the WebSchedule
            OLE DB data provider.
            </summary>
            <param name="source">An instance of <b>DataSourceControl</b>.</param>
            <returns>True if the <b>DataSourceControl</b> supports Microsoft Access;
            otherwise false.</returns>
        </member>
        <member name="M:Infragistics.WebUI.Data.WebScheduleOleDbProvider.GetTimestampFunction">
            <summary>
            This method supports the internal Infragistics control infrastructure.
            </summary>
            <returns>
            The implementation-specific timestamp function used to replace
            timestamp function placeholders within a command template when
            binding.
            </returns>
            <remarks>
            <p class="body">This method supports the internal Infragistics
            control infrastructure, and is not supported for application
            use. Inheritors must not depend on overriding this method
            because it is subject to change.</p>
            </remarks>
        </member>
        <member name="P:Infragistics.WebUI.Data.WebScheduleOleDbProvider.ConnectionStringDefault">
            <summary>
            Default connection string used to establish an OLE DB
            connection when no <b>ConnectionString</b> is supplied
            by the developer.
            </summary>
            <remarks>
            <p class="body">Inheritors may override this read-only
            property with their own default connection string suitable
            for connection to an OLE DB data source.</p>
            <p class="body">Before creating a new <b>OleDbConnection</b>,
            the base class' <see cref="P:Connection"/> property calls the
            overridden <see cref="M:Infragistics.WebUI.Data.WebScheduleOleDbProvider.CreateConnection(System.String)"/> factory method
            passing a developer-specified <b>ConnectionString</b>. If
            no <b>ConnectionString</b> has been specified, then the
            base class' <b>Connection</b> property passes <b>CreateConnection</b>
            the default connection string provided by this property.</p>
            </remarks>
        </member>
        <member name="T:Infragistics.WebUI.Data.WebScheduleSqlClientProvider">
            <summary>
            Data provider for <b>WebSchedule</b> and it's Microsoft SQL Server
            data model.
            </summary>
            <remarks>
            <p class="body">The <b>WebScheduleSqlClientProvider</b> is a
            specialized <see cref="T:Infragistics.WebUI.Data.WebScheduleDbProvider"/> offering data
            abstraction and translation services to the <b>WebSchedule</b>
            elements of a web application from Microsoft SQL Server 
            back-ends.</p>
            <p class="body">The <b>WebScheduleDbProvider</b>s serve as the
            data abstraction layer (DAL) between an application's database
            provider and the <b>WebSchedule</b> data binding interface. The
            different <em>Data Bindings</em> an application attaches to his
            provider determine the mappings between a custom database schema
            (which may vary between applications), and the eventual 
            <b>WebSchedule</b> object model (which remains fixed for a
            particular version).</p>
            <p class="body">Web applications targeting Microsoft SQL Server
            as their relational database should use the 
            <b>WebScheduleSqlClientProvider</b> to map data stored within
            Microsoft SQL Server to the <b>WebSchedule</b> object model.</p>
            </remarks>
        </member>
        <member name="M:Infragistics.WebUI.Data.WebScheduleSqlClientProvider.#ctor">
            <summary>
            Default constructor initializes fields to their initial values.
            </summary>
            <remarks>
            <p class="body">Classes inheriting from <b>WebScheduleSqlClientProvider</b>
            must provide their own constructors to create more purposeful instances.
            Inheritors will always call this parameterless base class constructor from
            their own constructors by default.</p>
            </remarks>
        </member>
        <member name="M:Infragistics.WebUI.Data.WebScheduleSqlClientProvider.CreateConnection(System.String)">
            <summary>
            Establishes a database connection from the supplied <b>ConnectionString</b>
            to a Microsoft SQL Server instance.
            </summary>
            <param name="connectionStr">A connection string that should be valid
            for Microsoft SQL Server.</param>
            <returns>A general-purpose <b>IDbConnection</b> representing a database
            connection usable in a provider-independent manner.</returns>
            <remarks>
            <p class="body">Inheritors must override this virtual factory method in
            order to provide an <b>SqlConnection</b> using the supplied <em>connectionString</em>.
            <b>CreateConnection</b> will be called by the <b>Connection</b> property when
            the connection is first demanded.</p>
            </remarks>
        </member>
        <member name="M:Infragistics.WebUI.Data.WebScheduleSqlClientProvider.GetTimestampFunction">
            <summary>
            This method supports the internal Infragistics control infrastructure.
            </summary>
            <returns>
            The implementation-specific timestamp function used to replace
            timestamp function placeholders within a command template when
            binding.
            </returns>
            <remarks>
            <p class="body">This method supports the internal Infragistics
            control infrastructure, and is not supported for application
            use. Inheritors must not depend on overriding this method
            because it is subject to change.</p>
            </remarks>
        </member>
        <member name="P:Infragistics.WebUI.Data.WebScheduleSqlClientProvider.ConnectionStringDefault">
            <summary>
            Default connection string used to establish a SQL Server
            connection when no <b>ConnectionString</b> is supplied
            by the developer.
            </summary>
            <remarks>
            <p class="body">Inheritors may override this read-only
            property with their own default connection string suitable
            for connection to Microsoft SQL Server.</p>
            <p class="body">Before creating a new <b>SqlConnection</b>,
            the base class' <see cref="P:Connection"/> property calls the
            overridden <see cref="M:Infragistics.WebUI.Data.WebScheduleSqlClientProvider.CreateConnection(System.String)"/> factory method
            passing a developer-specified <b>ConnectionString</b>. If
            no <b>ConnectionString</b> has been specified, then the
            base class' <b>Connection</b> property passes <b>CreateConnection</b>
            the default connection string provided by this property.</p>
            </remarks>
        </member>
        <member name="P:Infragistics.WebUI.Data.WebScheduleSqlClientProvider.UseStoredProcedureDefault">
            <summary>
            The default value for the <see cref="P:UseStoredProcedure"/> property.
            </summary>
            <value>
            The SQL Server data provider implementation of <b>UseStoredProcedureDefault</b>
            always returns True, because Microsoft SQL Server supports stored procedures.
            </value>
            <remarks>
            <p class="body">This is called at construction-time to initialize
            the field holding the stored procedure flag, based on whether the
            underlying data provider supports stored procedures. It also gets 
            called at serialization-time to determine whether the design-time
            setting of <b>UseStoredProcedure</b> should be preserved. Because
            it is called early in the <b>WebScheduleDbProvider</b> lifecycle,
            this override avoids interacting with other components to determine
            whether to support stored procedures by default.</p>
            </remarks>
        </member>
    </members>
</doc>
